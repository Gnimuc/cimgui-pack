// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlImGuiTestEngine.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<ImBuildInfo> : std::false_type { };
  template<> struct DefaultConstructible<ImBuildInfo> : std::false_type { };
}

// Class generating the wrapper for type ImBuildInfo
// signature to use in the veto file: ImBuildInfo
struct JlImBuildInfo: public Wrapper {

  JlImBuildInfo(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ImBuildInfo (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_utils.h:77:8
    jlcxx::TypeWrapper<ImBuildInfo>  t = jlModule.add_type<ImBuildInfo>("ImBuildInfo");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ImBuildInfo>>(new jlcxx::TypeWrapper<ImBuildInfo>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding Type methods  to provide read access to the field Type (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_utils.h:79:21
    // signature to use in the veto list: ImBuildInfo::Type
    t.method("Type", [](const ImBuildInfo& a) -> const char * { return a.Type; });
    t.method("Type", [](const ImBuildInfo* a) -> const char * { return a->Type; });

    DEBUG_MSG("Adding Cpu methods  to provide read access to the field Cpu (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_utils.h:80:21
    // signature to use in the veto list: ImBuildInfo::Cpu
    t.method("Cpu", [](const ImBuildInfo& a) -> const char * { return a.Cpu; });
    t.method("Cpu", [](const ImBuildInfo* a) -> const char * { return a->Cpu; });

    DEBUG_MSG("Adding OS methods  to provide read access to the field OS (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_utils.h:81:21
    // signature to use in the veto list: ImBuildInfo::OS
    t.method("OS", [](const ImBuildInfo& a) -> const char * { return a.OS; });
    t.method("OS", [](const ImBuildInfo* a) -> const char * { return a->OS; });

    DEBUG_MSG("Adding Compiler methods  to provide read access to the field Compiler (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_utils.h:82:21
    // signature to use in the veto list: ImBuildInfo::Compiler
    t.method("Compiler", [](const ImBuildInfo& a) -> const char * { return a.Compiler; });
    t.method("Compiler", [](const ImBuildInfo* a) -> const char * { return a->Compiler; });

    DEBUG_MSG("Adding Time methods  to provide read access to the field Time (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_utils.h:84:21
    // signature to use in the veto list: ImBuildInfo::Time
    t.method("Time", [](const ImBuildInfo& a) -> const char * { return a.Time; });
    t.method("Time", [](const ImBuildInfo* a) -> const char * { return a->Time; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ImBuildInfo>> type_;
};
std::shared_ptr<Wrapper> newJlImBuildInfo(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlImBuildInfo(module));
}
