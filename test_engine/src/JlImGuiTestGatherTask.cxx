// this file was auto-generated by wrapit v1.3.3
#include "Wrapper.h"

#include "jlImGuiTestEngine.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<ImGuiTestGatherTask> : std::false_type { };
  template<> struct DefaultConstructible<ImGuiTestGatherTask> : std::false_type { };
}

// Class generating the wrapper for type ImGuiTestGatherTask
// signature to use in the veto file: ImGuiTestGatherTask
struct JlImGuiTestGatherTask: public Wrapper {

  JlImGuiTestGatherTask(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ImGuiTestGatherTask (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:34:8
    jlcxx::TypeWrapper<ImGuiTestGatherTask>  t = jlModule.add_type<ImGuiTestGatherTask>("ImGuiTestGatherTask");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ImGuiTestGatherTask>>(new jlcxx::TypeWrapper<ImGuiTestGatherTask>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void ImGuiTestGatherTask::Clear() (" __HERE__ ")");
    // signature to use in the veto list: void ImGuiTestGatherTask::Clear()
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:45:10
    t.method("Clear", static_cast<void (ImGuiTestGatherTask::*)() >(&ImGuiTestGatherTask::Clear));

    DEBUG_MSG("Adding InParentID methods  to provide read access to the field InParentID (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:37:29
    // signature to use in the veto list: ImGuiTestGatherTask::InParentID
    t.method("InParentID", [](const ImGuiTestGatherTask& a) -> ImGuiID { return a.InParentID; });
    t.method("InParentID", [](ImGuiTestGatherTask& a) -> ImGuiID { return a.InParentID; });
    t.method("InParentID", [](const ImGuiTestGatherTask* a) -> ImGuiID { return a->InParentID; });
    t.method("InParentID", [](ImGuiTestGatherTask* a) -> ImGuiID { return a->InParentID; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:37:29
    // signature to use in the veto list: ImGuiTestGatherTask::InParentID
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding InParentID! methods to provide write access to the field InParentID (" __HERE__ ")");
    t.method("InParentID!", [](ImGuiTestGatherTask& a, ImGuiID val) -> ImGuiID { return a.InParentID = val; });

    DEBUG_MSG("Adding InParentID! methods to provide write access to the field InParentID (" __HERE__ ")");
    t.method("InParentID!", [](ImGuiTestGatherTask* a, ImGuiID val) -> ImGuiID { return a->InParentID = val; });

    DEBUG_MSG("Adding InMaxDepth methods  to provide read access to the field InMaxDepth (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:38:29
    // signature to use in the veto list: ImGuiTestGatherTask::InMaxDepth
    t.method("InMaxDepth", [](const ImGuiTestGatherTask& a) -> int { return a.InMaxDepth; });
    t.method("InMaxDepth", [](ImGuiTestGatherTask& a) -> int { return a.InMaxDepth; });
    t.method("InMaxDepth", [](const ImGuiTestGatherTask* a) -> int { return a->InMaxDepth; });
    t.method("InMaxDepth", [](ImGuiTestGatherTask* a) -> int { return a->InMaxDepth; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:38:29
    // signature to use in the veto list: ImGuiTestGatherTask::InMaxDepth
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding InMaxDepth! methods to provide write access to the field InMaxDepth (" __HERE__ ")");
    t.method("InMaxDepth!", [](ImGuiTestGatherTask& a, int val) -> int { return a.InMaxDepth = val; });

    DEBUG_MSG("Adding InMaxDepth! methods to provide write access to the field InMaxDepth (" __HERE__ ")");
    t.method("InMaxDepth!", [](ImGuiTestGatherTask* a, int val) -> int { return a->InMaxDepth = val; });

    DEBUG_MSG("Adding InLayerMask methods  to provide read access to the field InLayerMask (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:39:29
    // signature to use in the veto list: ImGuiTestGatherTask::InLayerMask
    t.method("InLayerMask", [](const ImGuiTestGatherTask& a) -> short { return a.InLayerMask; });
    t.method("InLayerMask", [](ImGuiTestGatherTask& a) -> short { return a.InLayerMask; });
    t.method("InLayerMask", [](const ImGuiTestGatherTask* a) -> short { return a->InLayerMask; });
    t.method("InLayerMask", [](ImGuiTestGatherTask* a) -> short { return a->InLayerMask; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:39:29
    // signature to use in the veto list: ImGuiTestGatherTask::InLayerMask
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding InLayerMask! methods to provide write access to the field InLayerMask (" __HERE__ ")");
    t.method("InLayerMask!", [](ImGuiTestGatherTask& a, short val) -> short { return a.InLayerMask = val; });

    DEBUG_MSG("Adding InLayerMask! methods to provide write access to the field InLayerMask (" __HERE__ ")");
    t.method("InLayerMask!", [](ImGuiTestGatherTask* a, short val) -> short { return a->InLayerMask = val; });

    DEBUG_MSG("Adding OutList methods  to provide read access to the field OutList (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:42:29
    // signature to use in the veto list: ImGuiTestGatherTask::OutList
    t.method("OutList", [](const ImGuiTestGatherTask& a) -> ImGuiTestItemList * { return a.OutList; });
    t.method("OutList", [](ImGuiTestGatherTask& a) -> ImGuiTestItemList * { return a.OutList; });
    t.method("OutList", [](const ImGuiTestGatherTask* a) -> ImGuiTestItemList * { return a->OutList; });
    t.method("OutList", [](ImGuiTestGatherTask* a) -> ImGuiTestItemList * { return a->OutList; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:42:29
    // signature to use in the veto list: ImGuiTestGatherTask::OutList
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding OutList! methods to provide write access to the field OutList (" __HERE__ ")");
    t.method("OutList!", [](ImGuiTestGatherTask& a, ImGuiTestItemList * val) -> ImGuiTestItemList * { return a.OutList = val; });

    DEBUG_MSG("Adding OutList! methods to provide write access to the field OutList (" __HERE__ ")");
    t.method("OutList!", [](ImGuiTestGatherTask* a, ImGuiTestItemList * val) -> ImGuiTestItemList * { return a->OutList = val; });

    DEBUG_MSG("Adding LastItemInfo methods  to provide read access to the field LastItemInfo (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:43:29
    // signature to use in the veto list: ImGuiTestGatherTask::LastItemInfo
    t.method("LastItemInfo", [](const ImGuiTestGatherTask& a) -> ImGuiTestItemInfo * { return a.LastItemInfo; });
    t.method("LastItemInfo", [](ImGuiTestGatherTask& a) -> ImGuiTestItemInfo * { return a.LastItemInfo; });
    t.method("LastItemInfo", [](const ImGuiTestGatherTask* a) -> ImGuiTestItemInfo * { return a->LastItemInfo; });
    t.method("LastItemInfo", [](ImGuiTestGatherTask* a) -> ImGuiTestItemInfo * { return a->LastItemInfo; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:43:29
    // signature to use in the veto list: ImGuiTestGatherTask::LastItemInfo
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding LastItemInfo! methods to provide write access to the field LastItemInfo (" __HERE__ ")");
    t.method("LastItemInfo!", [](ImGuiTestGatherTask& a, ImGuiTestItemInfo * val) -> ImGuiTestItemInfo * { return a.LastItemInfo = val; });

    DEBUG_MSG("Adding LastItemInfo! methods to provide write access to the field LastItemInfo (" __HERE__ ")");
    t.method("LastItemInfo!", [](ImGuiTestGatherTask* a, ImGuiTestItemInfo * val) -> ImGuiTestItemInfo * { return a->LastItemInfo = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ImGuiTestGatherTask>> type_;
};
std::shared_ptr<Wrapper> newJlImGuiTestGatherTask(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlImGuiTestGatherTask(module));
}
