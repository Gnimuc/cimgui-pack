// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlImGuiTestEngine.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<ImGuiTestEngineIO> : std::false_type { };
  template<> struct DefaultConstructible<ImGuiTestEngineIO> : std::false_type { };
}

// Class generating the wrapper for type ImGuiTestEngineIO
// signature to use in the veto file: ImGuiTestEngineIO
struct JlImGuiTestEngineIO: public Wrapper {

  JlImGuiTestEngineIO(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ImGuiTestEngineIO (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:223:18
    jlcxx::TypeWrapper<ImGuiTestEngineIO>  t = jlModule.add_type<ImGuiTestEngineIO>("ImGuiTestEngineIO");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ImGuiTestEngineIO>>(new jlcxx::TypeWrapper<ImGuiTestEngineIO>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding CoroutineFuncs methods  to provide read access to the field CoroutineFuncs (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:230:49
    // signature to use in the veto list: ImGuiTestEngineIO::CoroutineFuncs
    t.method("CoroutineFuncs", [](const ImGuiTestEngineIO& a) -> ImGuiTestCoroutineInterface * { return a.CoroutineFuncs; });
    t.method("CoroutineFuncs", [](ImGuiTestEngineIO& a) -> ImGuiTestCoroutineInterface * { return a.CoroutineFuncs; });
    t.method("CoroutineFuncs", [](const ImGuiTestEngineIO* a) -> ImGuiTestCoroutineInterface * { return a->CoroutineFuncs; });
    t.method("CoroutineFuncs", [](ImGuiTestEngineIO* a) -> ImGuiTestCoroutineInterface * { return a->CoroutineFuncs; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:230:49
    // signature to use in the veto list: ImGuiTestEngineIO::CoroutineFuncs
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding CoroutineFuncs! methods to provide write access to the field CoroutineFuncs (" __HERE__ ")");
    t.method("CoroutineFuncs!", [](ImGuiTestEngineIO& a, ImGuiTestCoroutineInterface * val) -> ImGuiTestCoroutineInterface * { return a.CoroutineFuncs = val; });

    DEBUG_MSG("Adding CoroutineFuncs! methods to provide write access to the field CoroutineFuncs (" __HERE__ ")");
    t.method("CoroutineFuncs!", [](ImGuiTestEngineIO* a, ImGuiTestCoroutineInterface * val) -> ImGuiTestCoroutineInterface * { return a->CoroutineFuncs = val; });

    DEBUG_MSG("Adding SrcFileOpenUserData methods  to provide read access to the field SrcFileOpenUserData (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:233:49
    // signature to use in the veto list: ImGuiTestEngineIO::SrcFileOpenUserData
    t.method("SrcFileOpenUserData", [](const ImGuiTestEngineIO& a) -> void * { return a.SrcFileOpenUserData; });
    t.method("SrcFileOpenUserData", [](ImGuiTestEngineIO& a) -> void * { return a.SrcFileOpenUserData; });
    t.method("SrcFileOpenUserData", [](const ImGuiTestEngineIO* a) -> void * { return a->SrcFileOpenUserData; });
    t.method("SrcFileOpenUserData", [](ImGuiTestEngineIO* a) -> void * { return a->SrcFileOpenUserData; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:233:49
    // signature to use in the veto list: ImGuiTestEngineIO::SrcFileOpenUserData
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding SrcFileOpenUserData! methods to provide write access to the field SrcFileOpenUserData (" __HERE__ ")");
    t.method("SrcFileOpenUserData!", [](ImGuiTestEngineIO& a, void * val) -> void * { return a.SrcFileOpenUserData = val; });

    DEBUG_MSG("Adding SrcFileOpenUserData! methods to provide write access to the field SrcFileOpenUserData (" __HERE__ ")");
    t.method("SrcFileOpenUserData!", [](ImGuiTestEngineIO* a, void * val) -> void * { return a->SrcFileOpenUserData = val; });

    DEBUG_MSG("Adding ScreenCaptureUserData methods  to provide read access to the field ScreenCaptureUserData (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:234:49
    // signature to use in the veto list: ImGuiTestEngineIO::ScreenCaptureUserData
    t.method("ScreenCaptureUserData", [](const ImGuiTestEngineIO& a) -> void * { return a.ScreenCaptureUserData; });
    t.method("ScreenCaptureUserData", [](ImGuiTestEngineIO& a) -> void * { return a.ScreenCaptureUserData; });
    t.method("ScreenCaptureUserData", [](const ImGuiTestEngineIO* a) -> void * { return a->ScreenCaptureUserData; });
    t.method("ScreenCaptureUserData", [](ImGuiTestEngineIO* a) -> void * { return a->ScreenCaptureUserData; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:234:49
    // signature to use in the veto list: ImGuiTestEngineIO::ScreenCaptureUserData
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ScreenCaptureUserData! methods to provide write access to the field ScreenCaptureUserData (" __HERE__ ")");
    t.method("ScreenCaptureUserData!", [](ImGuiTestEngineIO& a, void * val) -> void * { return a.ScreenCaptureUserData = val; });

    DEBUG_MSG("Adding ScreenCaptureUserData! methods to provide write access to the field ScreenCaptureUserData (" __HERE__ ")");
    t.method("ScreenCaptureUserData!", [](ImGuiTestEngineIO* a, void * val) -> void * { return a->ScreenCaptureUserData = val; });

    DEBUG_MSG("Adding ConfigSavedSettings methods  to provide read access to the field ConfigSavedSettings (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:237:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigSavedSettings
    t.method("ConfigSavedSettings", [](const ImGuiTestEngineIO& a) -> bool { return a.ConfigSavedSettings; });
    t.method("ConfigSavedSettings", [](ImGuiTestEngineIO& a) -> bool { return a.ConfigSavedSettings; });
    t.method("ConfigSavedSettings", [](const ImGuiTestEngineIO* a) -> bool { return a->ConfigSavedSettings; });
    t.method("ConfigSavedSettings", [](ImGuiTestEngineIO* a) -> bool { return a->ConfigSavedSettings; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:237:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigSavedSettings
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ConfigSavedSettings! methods to provide write access to the field ConfigSavedSettings (" __HERE__ ")");
    t.method("ConfigSavedSettings!", [](ImGuiTestEngineIO& a, bool val) -> bool { return a.ConfigSavedSettings = val; });

    DEBUG_MSG("Adding ConfigSavedSettings! methods to provide write access to the field ConfigSavedSettings (" __HERE__ ")");
    t.method("ConfigSavedSettings!", [](ImGuiTestEngineIO* a, bool val) -> bool { return a->ConfigSavedSettings = val; });

    DEBUG_MSG("Adding ConfigRunSpeed methods  to provide read access to the field ConfigRunSpeed (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:238:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigRunSpeed
    t.method("ConfigRunSpeed", [](const ImGuiTestEngineIO& a) -> ImGuiTestRunSpeed { return a.ConfigRunSpeed; });
    t.method("ConfigRunSpeed", [](ImGuiTestEngineIO& a) -> ImGuiTestRunSpeed { return a.ConfigRunSpeed; });
    t.method("ConfigRunSpeed", [](const ImGuiTestEngineIO* a) -> ImGuiTestRunSpeed { return a->ConfigRunSpeed; });
    t.method("ConfigRunSpeed", [](ImGuiTestEngineIO* a) -> ImGuiTestRunSpeed { return a->ConfigRunSpeed; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:238:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigRunSpeed
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ConfigRunSpeed! methods to provide write access to the field ConfigRunSpeed (" __HERE__ ")");
    t.method("ConfigRunSpeed!", [](ImGuiTestEngineIO& a, ImGuiTestRunSpeed val) -> ImGuiTestRunSpeed { return a.ConfigRunSpeed = val; });

    DEBUG_MSG("Adding ConfigRunSpeed! methods to provide write access to the field ConfigRunSpeed (" __HERE__ ")");
    t.method("ConfigRunSpeed!", [](ImGuiTestEngineIO* a, ImGuiTestRunSpeed val) -> ImGuiTestRunSpeed { return a->ConfigRunSpeed = val; });

    DEBUG_MSG("Adding ConfigStopOnError methods  to provide read access to the field ConfigStopOnError (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:239:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigStopOnError
    t.method("ConfigStopOnError", [](const ImGuiTestEngineIO& a) -> bool { return a.ConfigStopOnError; });
    t.method("ConfigStopOnError", [](ImGuiTestEngineIO& a) -> bool { return a.ConfigStopOnError; });
    t.method("ConfigStopOnError", [](const ImGuiTestEngineIO* a) -> bool { return a->ConfigStopOnError; });
    t.method("ConfigStopOnError", [](ImGuiTestEngineIO* a) -> bool { return a->ConfigStopOnError; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:239:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigStopOnError
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ConfigStopOnError! methods to provide write access to the field ConfigStopOnError (" __HERE__ ")");
    t.method("ConfigStopOnError!", [](ImGuiTestEngineIO& a, bool val) -> bool { return a.ConfigStopOnError = val; });

    DEBUG_MSG("Adding ConfigStopOnError! methods to provide write access to the field ConfigStopOnError (" __HERE__ ")");
    t.method("ConfigStopOnError!", [](ImGuiTestEngineIO* a, bool val) -> bool { return a->ConfigStopOnError = val; });

    DEBUG_MSG("Adding ConfigBreakOnError methods  to provide read access to the field ConfigBreakOnError (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:240:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigBreakOnError
    t.method("ConfigBreakOnError", [](const ImGuiTestEngineIO& a) -> bool { return a.ConfigBreakOnError; });
    t.method("ConfigBreakOnError", [](ImGuiTestEngineIO& a) -> bool { return a.ConfigBreakOnError; });
    t.method("ConfigBreakOnError", [](const ImGuiTestEngineIO* a) -> bool { return a->ConfigBreakOnError; });
    t.method("ConfigBreakOnError", [](ImGuiTestEngineIO* a) -> bool { return a->ConfigBreakOnError; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:240:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigBreakOnError
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ConfigBreakOnError! methods to provide write access to the field ConfigBreakOnError (" __HERE__ ")");
    t.method("ConfigBreakOnError!", [](ImGuiTestEngineIO& a, bool val) -> bool { return a.ConfigBreakOnError = val; });

    DEBUG_MSG("Adding ConfigBreakOnError! methods to provide write access to the field ConfigBreakOnError (" __HERE__ ")");
    t.method("ConfigBreakOnError!", [](ImGuiTestEngineIO* a, bool val) -> bool { return a->ConfigBreakOnError = val; });

    DEBUG_MSG("Adding ConfigKeepGuiFunc methods  to provide read access to the field ConfigKeepGuiFunc (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:241:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigKeepGuiFunc
    t.method("ConfigKeepGuiFunc", [](const ImGuiTestEngineIO& a) -> bool { return a.ConfigKeepGuiFunc; });
    t.method("ConfigKeepGuiFunc", [](ImGuiTestEngineIO& a) -> bool { return a.ConfigKeepGuiFunc; });
    t.method("ConfigKeepGuiFunc", [](const ImGuiTestEngineIO* a) -> bool { return a->ConfigKeepGuiFunc; });
    t.method("ConfigKeepGuiFunc", [](ImGuiTestEngineIO* a) -> bool { return a->ConfigKeepGuiFunc; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:241:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigKeepGuiFunc
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ConfigKeepGuiFunc! methods to provide write access to the field ConfigKeepGuiFunc (" __HERE__ ")");
    t.method("ConfigKeepGuiFunc!", [](ImGuiTestEngineIO& a, bool val) -> bool { return a.ConfigKeepGuiFunc = val; });

    DEBUG_MSG("Adding ConfigKeepGuiFunc! methods to provide write access to the field ConfigKeepGuiFunc (" __HERE__ ")");
    t.method("ConfigKeepGuiFunc!", [](ImGuiTestEngineIO* a, bool val) -> bool { return a->ConfigKeepGuiFunc = val; });

    DEBUG_MSG("Adding ConfigVerboseLevel methods  to provide read access to the field ConfigVerboseLevel (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:242:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigVerboseLevel
    t.method("ConfigVerboseLevel", [](const ImGuiTestEngineIO& a) -> ImGuiTestVerboseLevel { return a.ConfigVerboseLevel; });
    t.method("ConfigVerboseLevel", [](ImGuiTestEngineIO& a) -> ImGuiTestVerboseLevel { return a.ConfigVerboseLevel; });
    t.method("ConfigVerboseLevel", [](const ImGuiTestEngineIO* a) -> ImGuiTestVerboseLevel { return a->ConfigVerboseLevel; });
    t.method("ConfigVerboseLevel", [](ImGuiTestEngineIO* a) -> ImGuiTestVerboseLevel { return a->ConfigVerboseLevel; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:242:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigVerboseLevel
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ConfigVerboseLevel! methods to provide write access to the field ConfigVerboseLevel (" __HERE__ ")");
    t.method("ConfigVerboseLevel!", [](ImGuiTestEngineIO& a, ImGuiTestVerboseLevel val) -> ImGuiTestVerboseLevel { return a.ConfigVerboseLevel = val; });

    DEBUG_MSG("Adding ConfigVerboseLevel! methods to provide write access to the field ConfigVerboseLevel (" __HERE__ ")");
    t.method("ConfigVerboseLevel!", [](ImGuiTestEngineIO* a, ImGuiTestVerboseLevel val) -> ImGuiTestVerboseLevel { return a->ConfigVerboseLevel = val; });

    DEBUG_MSG("Adding ConfigVerboseLevelOnError methods  to provide read access to the field ConfigVerboseLevelOnError (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:243:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigVerboseLevelOnError
    t.method("ConfigVerboseLevelOnError", [](const ImGuiTestEngineIO& a) -> ImGuiTestVerboseLevel { return a.ConfigVerboseLevelOnError; });
    t.method("ConfigVerboseLevelOnError", [](ImGuiTestEngineIO& a) -> ImGuiTestVerboseLevel { return a.ConfigVerboseLevelOnError; });
    t.method("ConfigVerboseLevelOnError", [](const ImGuiTestEngineIO* a) -> ImGuiTestVerboseLevel { return a->ConfigVerboseLevelOnError; });
    t.method("ConfigVerboseLevelOnError", [](ImGuiTestEngineIO* a) -> ImGuiTestVerboseLevel { return a->ConfigVerboseLevelOnError; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:243:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigVerboseLevelOnError
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ConfigVerboseLevelOnError! methods to provide write access to the field ConfigVerboseLevelOnError (" __HERE__ ")");
    t.method("ConfigVerboseLevelOnError!", [](ImGuiTestEngineIO& a, ImGuiTestVerboseLevel val) -> ImGuiTestVerboseLevel { return a.ConfigVerboseLevelOnError = val; });

    DEBUG_MSG("Adding ConfigVerboseLevelOnError! methods to provide write access to the field ConfigVerboseLevelOnError (" __HERE__ ")");
    t.method("ConfigVerboseLevelOnError!", [](ImGuiTestEngineIO* a, ImGuiTestVerboseLevel val) -> ImGuiTestVerboseLevel { return a->ConfigVerboseLevelOnError = val; });

    DEBUG_MSG("Adding ConfigLogToTTY methods  to provide read access to the field ConfigLogToTTY (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:244:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigLogToTTY
    t.method("ConfigLogToTTY", [](const ImGuiTestEngineIO& a) -> bool { return a.ConfigLogToTTY; });
    t.method("ConfigLogToTTY", [](ImGuiTestEngineIO& a) -> bool { return a.ConfigLogToTTY; });
    t.method("ConfigLogToTTY", [](const ImGuiTestEngineIO* a) -> bool { return a->ConfigLogToTTY; });
    t.method("ConfigLogToTTY", [](ImGuiTestEngineIO* a) -> bool { return a->ConfigLogToTTY; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:244:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigLogToTTY
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ConfigLogToTTY! methods to provide write access to the field ConfigLogToTTY (" __HERE__ ")");
    t.method("ConfigLogToTTY!", [](ImGuiTestEngineIO& a, bool val) -> bool { return a.ConfigLogToTTY = val; });

    DEBUG_MSG("Adding ConfigLogToTTY! methods to provide write access to the field ConfigLogToTTY (" __HERE__ ")");
    t.method("ConfigLogToTTY!", [](ImGuiTestEngineIO* a, bool val) -> bool { return a->ConfigLogToTTY = val; });

    DEBUG_MSG("Adding ConfigLogToDebugger methods  to provide read access to the field ConfigLogToDebugger (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:245:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigLogToDebugger
    t.method("ConfigLogToDebugger", [](const ImGuiTestEngineIO& a) -> bool { return a.ConfigLogToDebugger; });
    t.method("ConfigLogToDebugger", [](ImGuiTestEngineIO& a) -> bool { return a.ConfigLogToDebugger; });
    t.method("ConfigLogToDebugger", [](const ImGuiTestEngineIO* a) -> bool { return a->ConfigLogToDebugger; });
    t.method("ConfigLogToDebugger", [](ImGuiTestEngineIO* a) -> bool { return a->ConfigLogToDebugger; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:245:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigLogToDebugger
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ConfigLogToDebugger! methods to provide write access to the field ConfigLogToDebugger (" __HERE__ ")");
    t.method("ConfigLogToDebugger!", [](ImGuiTestEngineIO& a, bool val) -> bool { return a.ConfigLogToDebugger = val; });

    DEBUG_MSG("Adding ConfigLogToDebugger! methods to provide write access to the field ConfigLogToDebugger (" __HERE__ ")");
    t.method("ConfigLogToDebugger!", [](ImGuiTestEngineIO* a, bool val) -> bool { return a->ConfigLogToDebugger = val; });

    DEBUG_MSG("Adding ConfigRestoreFocusAfterTests methods  to provide read access to the field ConfigRestoreFocusAfterTests (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:246:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigRestoreFocusAfterTests
    t.method("ConfigRestoreFocusAfterTests", [](const ImGuiTestEngineIO& a) -> bool { return a.ConfigRestoreFocusAfterTests; });
    t.method("ConfigRestoreFocusAfterTests", [](ImGuiTestEngineIO& a) -> bool { return a.ConfigRestoreFocusAfterTests; });
    t.method("ConfigRestoreFocusAfterTests", [](const ImGuiTestEngineIO* a) -> bool { return a->ConfigRestoreFocusAfterTests; });
    t.method("ConfigRestoreFocusAfterTests", [](ImGuiTestEngineIO* a) -> bool { return a->ConfigRestoreFocusAfterTests; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:246:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigRestoreFocusAfterTests
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ConfigRestoreFocusAfterTests! methods to provide write access to the field ConfigRestoreFocusAfterTests (" __HERE__ ")");
    t.method("ConfigRestoreFocusAfterTests!", [](ImGuiTestEngineIO& a, bool val) -> bool { return a.ConfigRestoreFocusAfterTests = val; });

    DEBUG_MSG("Adding ConfigRestoreFocusAfterTests! methods to provide write access to the field ConfigRestoreFocusAfterTests (" __HERE__ ")");
    t.method("ConfigRestoreFocusAfterTests!", [](ImGuiTestEngineIO* a, bool val) -> bool { return a->ConfigRestoreFocusAfterTests = val; });

    DEBUG_MSG("Adding ConfigCaptureEnabled methods  to provide read access to the field ConfigCaptureEnabled (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:247:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigCaptureEnabled
    t.method("ConfigCaptureEnabled", [](const ImGuiTestEngineIO& a) -> bool { return a.ConfigCaptureEnabled; });
    t.method("ConfigCaptureEnabled", [](ImGuiTestEngineIO& a) -> bool { return a.ConfigCaptureEnabled; });
    t.method("ConfigCaptureEnabled", [](const ImGuiTestEngineIO* a) -> bool { return a->ConfigCaptureEnabled; });
    t.method("ConfigCaptureEnabled", [](ImGuiTestEngineIO* a) -> bool { return a->ConfigCaptureEnabled; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:247:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigCaptureEnabled
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ConfigCaptureEnabled! methods to provide write access to the field ConfigCaptureEnabled (" __HERE__ ")");
    t.method("ConfigCaptureEnabled!", [](ImGuiTestEngineIO& a, bool val) -> bool { return a.ConfigCaptureEnabled = val; });

    DEBUG_MSG("Adding ConfigCaptureEnabled! methods to provide write access to the field ConfigCaptureEnabled (" __HERE__ ")");
    t.method("ConfigCaptureEnabled!", [](ImGuiTestEngineIO* a, bool val) -> bool { return a->ConfigCaptureEnabled = val; });

    DEBUG_MSG("Adding ConfigCaptureOnError methods  to provide read access to the field ConfigCaptureOnError (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:248:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigCaptureOnError
    t.method("ConfigCaptureOnError", [](const ImGuiTestEngineIO& a) -> bool { return a.ConfigCaptureOnError; });
    t.method("ConfigCaptureOnError", [](ImGuiTestEngineIO& a) -> bool { return a.ConfigCaptureOnError; });
    t.method("ConfigCaptureOnError", [](const ImGuiTestEngineIO* a) -> bool { return a->ConfigCaptureOnError; });
    t.method("ConfigCaptureOnError", [](ImGuiTestEngineIO* a) -> bool { return a->ConfigCaptureOnError; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:248:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigCaptureOnError
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ConfigCaptureOnError! methods to provide write access to the field ConfigCaptureOnError (" __HERE__ ")");
    t.method("ConfigCaptureOnError!", [](ImGuiTestEngineIO& a, bool val) -> bool { return a.ConfigCaptureOnError = val; });

    DEBUG_MSG("Adding ConfigCaptureOnError! methods to provide write access to the field ConfigCaptureOnError (" __HERE__ ")");
    t.method("ConfigCaptureOnError!", [](ImGuiTestEngineIO* a, bool val) -> bool { return a->ConfigCaptureOnError = val; });

    DEBUG_MSG("Adding ConfigNoThrottle methods  to provide read access to the field ConfigNoThrottle (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:249:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigNoThrottle
    t.method("ConfigNoThrottle", [](const ImGuiTestEngineIO& a) -> bool { return a.ConfigNoThrottle; });
    t.method("ConfigNoThrottle", [](ImGuiTestEngineIO& a) -> bool { return a.ConfigNoThrottle; });
    t.method("ConfigNoThrottle", [](const ImGuiTestEngineIO* a) -> bool { return a->ConfigNoThrottle; });
    t.method("ConfigNoThrottle", [](ImGuiTestEngineIO* a) -> bool { return a->ConfigNoThrottle; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:249:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigNoThrottle
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ConfigNoThrottle! methods to provide write access to the field ConfigNoThrottle (" __HERE__ ")");
    t.method("ConfigNoThrottle!", [](ImGuiTestEngineIO& a, bool val) -> bool { return a.ConfigNoThrottle = val; });

    DEBUG_MSG("Adding ConfigNoThrottle! methods to provide write access to the field ConfigNoThrottle (" __HERE__ ")");
    t.method("ConfigNoThrottle!", [](ImGuiTestEngineIO* a, bool val) -> bool { return a->ConfigNoThrottle = val; });

    DEBUG_MSG("Adding ConfigMouseDrawCursor methods  to provide read access to the field ConfigMouseDrawCursor (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:250:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigMouseDrawCursor
    t.method("ConfigMouseDrawCursor", [](const ImGuiTestEngineIO& a) -> bool { return a.ConfigMouseDrawCursor; });
    t.method("ConfigMouseDrawCursor", [](ImGuiTestEngineIO& a) -> bool { return a.ConfigMouseDrawCursor; });
    t.method("ConfigMouseDrawCursor", [](const ImGuiTestEngineIO* a) -> bool { return a->ConfigMouseDrawCursor; });
    t.method("ConfigMouseDrawCursor", [](ImGuiTestEngineIO* a) -> bool { return a->ConfigMouseDrawCursor; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:250:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigMouseDrawCursor
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ConfigMouseDrawCursor! methods to provide write access to the field ConfigMouseDrawCursor (" __HERE__ ")");
    t.method("ConfigMouseDrawCursor!", [](ImGuiTestEngineIO& a, bool val) -> bool { return a.ConfigMouseDrawCursor = val; });

    DEBUG_MSG("Adding ConfigMouseDrawCursor! methods to provide write access to the field ConfigMouseDrawCursor (" __HERE__ ")");
    t.method("ConfigMouseDrawCursor!", [](ImGuiTestEngineIO* a, bool val) -> bool { return a->ConfigMouseDrawCursor = val; });

    DEBUG_MSG("Adding ConfigFixedDeltaTime methods  to provide read access to the field ConfigFixedDeltaTime (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:251:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigFixedDeltaTime
    t.method("ConfigFixedDeltaTime", [](const ImGuiTestEngineIO& a) -> float { return a.ConfigFixedDeltaTime; });
    t.method("ConfigFixedDeltaTime", [](ImGuiTestEngineIO& a) -> float { return a.ConfigFixedDeltaTime; });
    t.method("ConfigFixedDeltaTime", [](const ImGuiTestEngineIO* a) -> float { return a->ConfigFixedDeltaTime; });
    t.method("ConfigFixedDeltaTime", [](ImGuiTestEngineIO* a) -> float { return a->ConfigFixedDeltaTime; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:251:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigFixedDeltaTime
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ConfigFixedDeltaTime! methods to provide write access to the field ConfigFixedDeltaTime (" __HERE__ ")");
    t.method("ConfigFixedDeltaTime!", [](ImGuiTestEngineIO& a, float val) -> float { return a.ConfigFixedDeltaTime = val; });

    DEBUG_MSG("Adding ConfigFixedDeltaTime! methods to provide write access to the field ConfigFixedDeltaTime (" __HERE__ ")");
    t.method("ConfigFixedDeltaTime!", [](ImGuiTestEngineIO* a, float val) -> float { return a->ConfigFixedDeltaTime = val; });

    DEBUG_MSG("Adding PerfStressAmount methods  to provide read access to the field PerfStressAmount (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:252:33
    // signature to use in the veto list: ImGuiTestEngineIO::PerfStressAmount
    t.method("PerfStressAmount", [](const ImGuiTestEngineIO& a) -> int { return a.PerfStressAmount; });
    t.method("PerfStressAmount", [](ImGuiTestEngineIO& a) -> int { return a.PerfStressAmount; });
    t.method("PerfStressAmount", [](const ImGuiTestEngineIO* a) -> int { return a->PerfStressAmount; });
    t.method("PerfStressAmount", [](ImGuiTestEngineIO* a) -> int { return a->PerfStressAmount; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:252:33
    // signature to use in the veto list: ImGuiTestEngineIO::PerfStressAmount
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding PerfStressAmount! methods to provide write access to the field PerfStressAmount (" __HERE__ ")");
    t.method("PerfStressAmount!", [](ImGuiTestEngineIO& a, int val) -> int { return a.PerfStressAmount = val; });

    DEBUG_MSG("Adding PerfStressAmount! methods to provide write access to the field PerfStressAmount (" __HERE__ ")");
    t.method("PerfStressAmount!", [](ImGuiTestEngineIO* a, int val) -> int { return a->PerfStressAmount = val; });

    DEBUG_MSG("Adding MouseSpeed methods  to provide read access to the field MouseSpeed (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:256:33
    // signature to use in the veto list: ImGuiTestEngineIO::MouseSpeed
    t.method("MouseSpeed", [](const ImGuiTestEngineIO& a) -> float { return a.MouseSpeed; });
    t.method("MouseSpeed", [](ImGuiTestEngineIO& a) -> float { return a.MouseSpeed; });
    t.method("MouseSpeed", [](const ImGuiTestEngineIO* a) -> float { return a->MouseSpeed; });
    t.method("MouseSpeed", [](ImGuiTestEngineIO* a) -> float { return a->MouseSpeed; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:256:33
    // signature to use in the veto list: ImGuiTestEngineIO::MouseSpeed
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding MouseSpeed! methods to provide write access to the field MouseSpeed (" __HERE__ ")");
    t.method("MouseSpeed!", [](ImGuiTestEngineIO& a, float val) -> float { return a.MouseSpeed = val; });

    DEBUG_MSG("Adding MouseSpeed! methods to provide write access to the field MouseSpeed (" __HERE__ ")");
    t.method("MouseSpeed!", [](ImGuiTestEngineIO* a, float val) -> float { return a->MouseSpeed = val; });

    DEBUG_MSG("Adding MouseWobble methods  to provide read access to the field MouseWobble (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:257:33
    // signature to use in the veto list: ImGuiTestEngineIO::MouseWobble
    t.method("MouseWobble", [](const ImGuiTestEngineIO& a) -> float { return a.MouseWobble; });
    t.method("MouseWobble", [](ImGuiTestEngineIO& a) -> float { return a.MouseWobble; });
    t.method("MouseWobble", [](const ImGuiTestEngineIO* a) -> float { return a->MouseWobble; });
    t.method("MouseWobble", [](ImGuiTestEngineIO* a) -> float { return a->MouseWobble; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:257:33
    // signature to use in the veto list: ImGuiTestEngineIO::MouseWobble
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding MouseWobble! methods to provide write access to the field MouseWobble (" __HERE__ ")");
    t.method("MouseWobble!", [](ImGuiTestEngineIO& a, float val) -> float { return a.MouseWobble = val; });

    DEBUG_MSG("Adding MouseWobble! methods to provide write access to the field MouseWobble (" __HERE__ ")");
    t.method("MouseWobble!", [](ImGuiTestEngineIO* a, float val) -> float { return a->MouseWobble = val; });

    DEBUG_MSG("Adding ScrollSpeed methods  to provide read access to the field ScrollSpeed (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:258:33
    // signature to use in the veto list: ImGuiTestEngineIO::ScrollSpeed
    t.method("ScrollSpeed", [](const ImGuiTestEngineIO& a) -> float { return a.ScrollSpeed; });
    t.method("ScrollSpeed", [](ImGuiTestEngineIO& a) -> float { return a.ScrollSpeed; });
    t.method("ScrollSpeed", [](const ImGuiTestEngineIO* a) -> float { return a->ScrollSpeed; });
    t.method("ScrollSpeed", [](ImGuiTestEngineIO* a) -> float { return a->ScrollSpeed; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:258:33
    // signature to use in the veto list: ImGuiTestEngineIO::ScrollSpeed
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ScrollSpeed! methods to provide write access to the field ScrollSpeed (" __HERE__ ")");
    t.method("ScrollSpeed!", [](ImGuiTestEngineIO& a, float val) -> float { return a.ScrollSpeed = val; });

    DEBUG_MSG("Adding ScrollSpeed! methods to provide write access to the field ScrollSpeed (" __HERE__ ")");
    t.method("ScrollSpeed!", [](ImGuiTestEngineIO* a, float val) -> float { return a->ScrollSpeed = val; });

    DEBUG_MSG("Adding TypingSpeed methods  to provide read access to the field TypingSpeed (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:259:33
    // signature to use in the veto list: ImGuiTestEngineIO::TypingSpeed
    t.method("TypingSpeed", [](const ImGuiTestEngineIO& a) -> float { return a.TypingSpeed; });
    t.method("TypingSpeed", [](ImGuiTestEngineIO& a) -> float { return a.TypingSpeed; });
    t.method("TypingSpeed", [](const ImGuiTestEngineIO* a) -> float { return a->TypingSpeed; });
    t.method("TypingSpeed", [](ImGuiTestEngineIO* a) -> float { return a->TypingSpeed; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:259:33
    // signature to use in the veto list: ImGuiTestEngineIO::TypingSpeed
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding TypingSpeed! methods to provide write access to the field TypingSpeed (" __HERE__ ")");
    t.method("TypingSpeed!", [](ImGuiTestEngineIO& a, float val) -> float { return a.TypingSpeed = val; });

    DEBUG_MSG("Adding TypingSpeed! methods to provide write access to the field TypingSpeed (" __HERE__ ")");
    t.method("TypingSpeed!", [](ImGuiTestEngineIO* a, float val) -> float { return a->TypingSpeed = val; });

    DEBUG_MSG("Adding ActionDelayShort methods  to provide read access to the field ActionDelayShort (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:260:33
    // signature to use in the veto list: ImGuiTestEngineIO::ActionDelayShort
    t.method("ActionDelayShort", [](const ImGuiTestEngineIO& a) -> float { return a.ActionDelayShort; });
    t.method("ActionDelayShort", [](ImGuiTestEngineIO& a) -> float { return a.ActionDelayShort; });
    t.method("ActionDelayShort", [](const ImGuiTestEngineIO* a) -> float { return a->ActionDelayShort; });
    t.method("ActionDelayShort", [](ImGuiTestEngineIO* a) -> float { return a->ActionDelayShort; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:260:33
    // signature to use in the veto list: ImGuiTestEngineIO::ActionDelayShort
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ActionDelayShort! methods to provide write access to the field ActionDelayShort (" __HERE__ ")");
    t.method("ActionDelayShort!", [](ImGuiTestEngineIO& a, float val) -> float { return a.ActionDelayShort = val; });

    DEBUG_MSG("Adding ActionDelayShort! methods to provide write access to the field ActionDelayShort (" __HERE__ ")");
    t.method("ActionDelayShort!", [](ImGuiTestEngineIO* a, float val) -> float { return a->ActionDelayShort = val; });

    DEBUG_MSG("Adding ActionDelayStandard methods  to provide read access to the field ActionDelayStandard (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:261:33
    // signature to use in the veto list: ImGuiTestEngineIO::ActionDelayStandard
    t.method("ActionDelayStandard", [](const ImGuiTestEngineIO& a) -> float { return a.ActionDelayStandard; });
    t.method("ActionDelayStandard", [](ImGuiTestEngineIO& a) -> float { return a.ActionDelayStandard; });
    t.method("ActionDelayStandard", [](const ImGuiTestEngineIO* a) -> float { return a->ActionDelayStandard; });
    t.method("ActionDelayStandard", [](ImGuiTestEngineIO* a) -> float { return a->ActionDelayStandard; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:261:33
    // signature to use in the veto list: ImGuiTestEngineIO::ActionDelayStandard
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ActionDelayStandard! methods to provide write access to the field ActionDelayStandard (" __HERE__ ")");
    t.method("ActionDelayStandard!", [](ImGuiTestEngineIO& a, float val) -> float { return a.ActionDelayStandard = val; });

    DEBUG_MSG("Adding ActionDelayStandard! methods to provide write access to the field ActionDelayStandard (" __HERE__ ")");
    t.method("ActionDelayStandard!", [](ImGuiTestEngineIO* a, float val) -> float { return a->ActionDelayStandard = val; });

    DEBUG_MSG("Adding ConfigWatchdogWarning methods  to provide read access to the field ConfigWatchdogWarning (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:271:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigWatchdogWarning
    t.method("ConfigWatchdogWarning", [](const ImGuiTestEngineIO& a) -> float { return a.ConfigWatchdogWarning; });
    t.method("ConfigWatchdogWarning", [](ImGuiTestEngineIO& a) -> float { return a.ConfigWatchdogWarning; });
    t.method("ConfigWatchdogWarning", [](const ImGuiTestEngineIO* a) -> float { return a->ConfigWatchdogWarning; });
    t.method("ConfigWatchdogWarning", [](ImGuiTestEngineIO* a) -> float { return a->ConfigWatchdogWarning; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:271:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigWatchdogWarning
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ConfigWatchdogWarning! methods to provide write access to the field ConfigWatchdogWarning (" __HERE__ ")");
    t.method("ConfigWatchdogWarning!", [](ImGuiTestEngineIO& a, float val) -> float { return a.ConfigWatchdogWarning = val; });

    DEBUG_MSG("Adding ConfigWatchdogWarning! methods to provide write access to the field ConfigWatchdogWarning (" __HERE__ ")");
    t.method("ConfigWatchdogWarning!", [](ImGuiTestEngineIO* a, float val) -> float { return a->ConfigWatchdogWarning = val; });

    DEBUG_MSG("Adding ConfigWatchdogKillTest methods  to provide read access to the field ConfigWatchdogKillTest (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:272:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigWatchdogKillTest
    t.method("ConfigWatchdogKillTest", [](const ImGuiTestEngineIO& a) -> float { return a.ConfigWatchdogKillTest; });
    t.method("ConfigWatchdogKillTest", [](ImGuiTestEngineIO& a) -> float { return a.ConfigWatchdogKillTest; });
    t.method("ConfigWatchdogKillTest", [](const ImGuiTestEngineIO* a) -> float { return a->ConfigWatchdogKillTest; });
    t.method("ConfigWatchdogKillTest", [](ImGuiTestEngineIO* a) -> float { return a->ConfigWatchdogKillTest; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:272:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigWatchdogKillTest
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ConfigWatchdogKillTest! methods to provide write access to the field ConfigWatchdogKillTest (" __HERE__ ")");
    t.method("ConfigWatchdogKillTest!", [](ImGuiTestEngineIO& a, float val) -> float { return a.ConfigWatchdogKillTest = val; });

    DEBUG_MSG("Adding ConfigWatchdogKillTest! methods to provide write access to the field ConfigWatchdogKillTest (" __HERE__ ")");
    t.method("ConfigWatchdogKillTest!", [](ImGuiTestEngineIO* a, float val) -> float { return a->ConfigWatchdogKillTest = val; });

    DEBUG_MSG("Adding ConfigWatchdogKillApp methods  to provide read access to the field ConfigWatchdogKillApp (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:273:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigWatchdogKillApp
    t.method("ConfigWatchdogKillApp", [](const ImGuiTestEngineIO& a) -> float { return a.ConfigWatchdogKillApp; });
    t.method("ConfigWatchdogKillApp", [](ImGuiTestEngineIO& a) -> float { return a.ConfigWatchdogKillApp; });
    t.method("ConfigWatchdogKillApp", [](const ImGuiTestEngineIO* a) -> float { return a->ConfigWatchdogKillApp; });
    t.method("ConfigWatchdogKillApp", [](ImGuiTestEngineIO* a) -> float { return a->ConfigWatchdogKillApp; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:273:33
    // signature to use in the veto list: ImGuiTestEngineIO::ConfigWatchdogKillApp
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ConfigWatchdogKillApp! methods to provide write access to the field ConfigWatchdogKillApp (" __HERE__ ")");
    t.method("ConfigWatchdogKillApp!", [](ImGuiTestEngineIO& a, float val) -> float { return a.ConfigWatchdogKillApp = val; });

    DEBUG_MSG("Adding ConfigWatchdogKillApp! methods to provide write access to the field ConfigWatchdogKillApp (" __HERE__ ")");
    t.method("ConfigWatchdogKillApp!", [](ImGuiTestEngineIO* a, float val) -> float { return a->ConfigWatchdogKillApp = val; });

    DEBUG_MSG("Adding ExportResultsFilename methods  to provide read access to the field ExportResultsFilename (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:277:33
    // signature to use in the veto list: ImGuiTestEngineIO::ExportResultsFilename
    t.method("ExportResultsFilename", [](const ImGuiTestEngineIO& a) -> const char * { return a.ExportResultsFilename; });
    t.method("ExportResultsFilename", [](const ImGuiTestEngineIO* a) -> const char * { return a->ExportResultsFilename; });

    DEBUG_MSG("Adding ExportResultsFormat methods  to provide read access to the field ExportResultsFormat (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:278:33
    // signature to use in the veto list: ImGuiTestEngineIO::ExportResultsFormat
    t.method("ExportResultsFormat", [](const ImGuiTestEngineIO& a) -> ImGuiTestEngineExportFormat { return a.ExportResultsFormat; });
    t.method("ExportResultsFormat", [](ImGuiTestEngineIO& a) -> ImGuiTestEngineExportFormat { return a.ExportResultsFormat; });
    t.method("ExportResultsFormat", [](const ImGuiTestEngineIO* a) -> ImGuiTestEngineExportFormat { return a->ExportResultsFormat; });
    t.method("ExportResultsFormat", [](ImGuiTestEngineIO* a) -> ImGuiTestEngineExportFormat { return a->ExportResultsFormat; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:278:33
    // signature to use in the veto list: ImGuiTestEngineIO::ExportResultsFormat
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ExportResultsFormat! methods to provide write access to the field ExportResultsFormat (" __HERE__ ")");
    t.method("ExportResultsFormat!", [](ImGuiTestEngineIO& a, ImGuiTestEngineExportFormat val) -> ImGuiTestEngineExportFormat { return a.ExportResultsFormat = val; });

    DEBUG_MSG("Adding ExportResultsFormat! methods to provide write access to the field ExportResultsFormat (" __HERE__ ")");
    t.method("ExportResultsFormat!", [](ImGuiTestEngineIO* a, ImGuiTestEngineExportFormat val) -> ImGuiTestEngineExportFormat { return a->ExportResultsFormat = val; });

    DEBUG_MSG("Adding CheckDrawDataIntegrity methods  to provide read access to the field CheckDrawDataIntegrity (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:281:33
    // signature to use in the veto list: ImGuiTestEngineIO::CheckDrawDataIntegrity
    t.method("CheckDrawDataIntegrity", [](const ImGuiTestEngineIO& a) -> bool { return a.CheckDrawDataIntegrity; });
    t.method("CheckDrawDataIntegrity", [](ImGuiTestEngineIO& a) -> bool { return a.CheckDrawDataIntegrity; });
    t.method("CheckDrawDataIntegrity", [](const ImGuiTestEngineIO* a) -> bool { return a->CheckDrawDataIntegrity; });
    t.method("CheckDrawDataIntegrity", [](ImGuiTestEngineIO* a) -> bool { return a->CheckDrawDataIntegrity; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:281:33
    // signature to use in the veto list: ImGuiTestEngineIO::CheckDrawDataIntegrity
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding CheckDrawDataIntegrity! methods to provide write access to the field CheckDrawDataIntegrity (" __HERE__ ")");
    t.method("CheckDrawDataIntegrity!", [](ImGuiTestEngineIO& a, bool val) -> bool { return a.CheckDrawDataIntegrity = val; });

    DEBUG_MSG("Adding CheckDrawDataIntegrity! methods to provide write access to the field CheckDrawDataIntegrity (" __HERE__ ")");
    t.method("CheckDrawDataIntegrity!", [](ImGuiTestEngineIO* a, bool val) -> bool { return a->CheckDrawDataIntegrity = val; });

    DEBUG_MSG("Adding IsRunningTests methods  to provide read access to the field IsRunningTests (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:288:33
    // signature to use in the veto list: ImGuiTestEngineIO::IsRunningTests
    t.method("IsRunningTests", [](const ImGuiTestEngineIO& a) -> bool { return a.IsRunningTests; });
    t.method("IsRunningTests", [](ImGuiTestEngineIO& a) -> bool { return a.IsRunningTests; });
    t.method("IsRunningTests", [](const ImGuiTestEngineIO* a) -> bool { return a->IsRunningTests; });
    t.method("IsRunningTests", [](ImGuiTestEngineIO* a) -> bool { return a->IsRunningTests; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:288:33
    // signature to use in the veto list: ImGuiTestEngineIO::IsRunningTests
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding IsRunningTests! methods to provide write access to the field IsRunningTests (" __HERE__ ")");
    t.method("IsRunningTests!", [](ImGuiTestEngineIO& a, bool val) -> bool { return a.IsRunningTests = val; });

    DEBUG_MSG("Adding IsRunningTests! methods to provide write access to the field IsRunningTests (" __HERE__ ")");
    t.method("IsRunningTests!", [](ImGuiTestEngineIO* a, bool val) -> bool { return a->IsRunningTests = val; });

    DEBUG_MSG("Adding IsRequestingMaxAppSpeed methods  to provide read access to the field IsRequestingMaxAppSpeed (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:289:33
    // signature to use in the veto list: ImGuiTestEngineIO::IsRequestingMaxAppSpeed
    t.method("IsRequestingMaxAppSpeed", [](const ImGuiTestEngineIO& a) -> bool { return a.IsRequestingMaxAppSpeed; });
    t.method("IsRequestingMaxAppSpeed", [](ImGuiTestEngineIO& a) -> bool { return a.IsRequestingMaxAppSpeed; });
    t.method("IsRequestingMaxAppSpeed", [](const ImGuiTestEngineIO* a) -> bool { return a->IsRequestingMaxAppSpeed; });
    t.method("IsRequestingMaxAppSpeed", [](ImGuiTestEngineIO* a) -> bool { return a->IsRequestingMaxAppSpeed; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:289:33
    // signature to use in the veto list: ImGuiTestEngineIO::IsRequestingMaxAppSpeed
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding IsRequestingMaxAppSpeed! methods to provide write access to the field IsRequestingMaxAppSpeed (" __HERE__ ")");
    t.method("IsRequestingMaxAppSpeed!", [](ImGuiTestEngineIO& a, bool val) -> bool { return a.IsRequestingMaxAppSpeed = val; });

    DEBUG_MSG("Adding IsRequestingMaxAppSpeed! methods to provide write access to the field IsRequestingMaxAppSpeed (" __HERE__ ")");
    t.method("IsRequestingMaxAppSpeed!", [](ImGuiTestEngineIO* a, bool val) -> bool { return a->IsRequestingMaxAppSpeed = val; });

    DEBUG_MSG("Adding IsCapturing methods  to provide read access to the field IsCapturing (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:290:33
    // signature to use in the veto list: ImGuiTestEngineIO::IsCapturing
    t.method("IsCapturing", [](const ImGuiTestEngineIO& a) -> bool { return a.IsCapturing; });
    t.method("IsCapturing", [](ImGuiTestEngineIO& a) -> bool { return a.IsCapturing; });
    t.method("IsCapturing", [](const ImGuiTestEngineIO* a) -> bool { return a->IsCapturing; });
    t.method("IsCapturing", [](ImGuiTestEngineIO* a) -> bool { return a->IsCapturing; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:290:33
    // signature to use in the veto list: ImGuiTestEngineIO::IsCapturing
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding IsCapturing! methods to provide write access to the field IsCapturing (" __HERE__ ")");
    t.method("IsCapturing!", [](ImGuiTestEngineIO& a, bool val) -> bool { return a.IsCapturing = val; });

    DEBUG_MSG("Adding IsCapturing! methods to provide write access to the field IsCapturing (" __HERE__ ")");
    t.method("IsCapturing!", [](ImGuiTestEngineIO* a, bool val) -> bool { return a->IsCapturing = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ImGuiTestEngineIO>> type_;
};
std::shared_ptr<Wrapper> newJlImGuiTestEngineIO(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlImGuiTestEngineIO(module));
}
