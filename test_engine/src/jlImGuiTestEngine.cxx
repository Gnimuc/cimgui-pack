// this file was auto-generated by wrapit v1.4.0
#include "jlcxx/jlcxx.hpp"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

#include "jlImGuiTestEngine.h"

#include <regex>

#include "dbg_msg.h"
#include "Wrapper.h"

class JlImGuiContext;
class JlImGuiTestEngine;
class JlImGuiTestEngineIO;
class JlImGuiTest;
class JlImGuiTestCoroutineInterface;
class JlImGuiTestItemInfo;
class JlImGuiTestItemList;
class JlImGuiTestLogLineInfo;
class JlImGuiTestLog;
class JlImGuiTestOutput;
class JlImGuiTestRunTask;
class JlStr;
class JlImBuildInfo;
class JlImMovingAverage;
class JlImGuiCsvParser;
class JlImGuiTestInfoTask;
class JlImGuiTestGatherTask;
class JlImGuiTestFindByLabelTask;
class JlImGuiTestInput;
class JlImVec2;
class JlImGuiTestInputs;
class JlImGuiTestContext;
class JlImGuiPerfTool;
class JlImGuiCaptureToolUI;
class JlImGuiCaptureContext;
class JlImGuiCaptureArgs;
class JlImGuiTestRef;
class JlImGuiTestRefDesc;
class JlImGuiTestActionFilter;
class JlImGuiTestGenericItemStatus;
class JlImGuiTestGenericVars;
class JlImVec4;
class JlImGuiPerfToolEntry;
class JlImGuiPerfToolBatch;
class JlGlobal;

std::shared_ptr<Wrapper> newJlImGuiContext(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImGuiTestEngine(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImGuiTestEngineIO(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImGuiTest(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImGuiTestCoroutineInterface(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImGuiTestItemInfo(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImGuiTestItemList(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImGuiTestLogLineInfo(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImGuiTestLog(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImGuiTestOutput(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImGuiTestRunTask(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlStr(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImBuildInfo(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImMovingAverage(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImGuiCsvParser(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImGuiTestInfoTask(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImGuiTestGatherTask(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImGuiTestFindByLabelTask(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImGuiTestInput(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImVec2(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImGuiTestInputs(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImGuiTestContext(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImGuiPerfTool(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImGuiCaptureToolUI(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImGuiCaptureContext(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImGuiCaptureArgs(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImGuiTestRef(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImGuiTestRefDesc(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImGuiTestActionFilter(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImGuiTestGenericItemStatus(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImGuiTestGenericVars(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImVec4(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImGuiPerfToolEntry(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlImGuiPerfToolBatch(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlGlobal(jlcxx::Module&);
//method from libcxxwrap returning its version
extern "C" JLCXX_API const char* cxxwrap_version_string();

//Check the code is compiled with a compatible version of libcxxwrap:
static_assert(1000*1000*JLCXX_VERSION_MAJOR  + 1000 * JLCXX_VERSION_MINOR + JLCXX_VERSION_PATCH >= 12000
  && 1000 * 1000 * JLCXX_VERSION_MAJOR  + 1000 * JLCXX_VERSION_MINOR + JLCXX_VERSION_PATCH < 14000,
  "The code was generated with WrapIt! for "
  "a different CxxWrap version (controlled with the cxxwrap_version parameter).");

//Check the version of loaded libcxxwrap library:
void throw_if_version_incompatibility(){
  std::string version_str = cxxwrap_version_string();
  static std::regex r("([[:digit:]]{1,3})\\.([[:digit:]]{1,3})\\.([[:digit:]]{1,3})");
  std::smatch matches;
  if(!std::regex_match(version_str, matches, r)){
    std::cerr << "Warning: Failed to check libcxxwrap version.";
  } else{    long version_int =   1000*1000*strtol(matches[1].str().c_str(), 0, 10)
                       +      1000*strtol(matches[2].str().c_str(), 0, 10)
                       +           strtol(matches[3].str().c_str(), 0, 10);
    if(version_int < 12000 || version_int >= 14000){
      throw std::runtime_error(std::string("Found libcxxwrap_jll version ")
       + version_str + ", while module ImGuiTestEngine requires a version in "
      "[0.12.0, 0.14.0)."
      " Note: if the module was installed with the package manager, the Project.toml file "
      "of the package is probably missing a compat specification that would have prevented "
      "the inconsistency.");
    }
  }
}


JLCXX_MODULE define_julia_module(jlcxx::Module& jlModule){
  
throw_if_version_incompatibility();

  std::vector<std::shared_ptr<Wrapper>> wrappers = {
    std::shared_ptr<Wrapper>(newJlImGuiContext(jlModule)),
    std::shared_ptr<Wrapper>(newJlImGuiTestEngine(jlModule)),
    std::shared_ptr<Wrapper>(newJlImGuiTestEngineIO(jlModule)),
    std::shared_ptr<Wrapper>(newJlImGuiTest(jlModule)),
    std::shared_ptr<Wrapper>(newJlImGuiTestCoroutineInterface(jlModule)),
    std::shared_ptr<Wrapper>(newJlImGuiTestItemInfo(jlModule)),
    std::shared_ptr<Wrapper>(newJlImGuiTestItemList(jlModule)),
    std::shared_ptr<Wrapper>(newJlImGuiTestLogLineInfo(jlModule)),
    std::shared_ptr<Wrapper>(newJlImGuiTestLog(jlModule)),
    std::shared_ptr<Wrapper>(newJlImGuiTestOutput(jlModule)),
    std::shared_ptr<Wrapper>(newJlImGuiTestRunTask(jlModule)),
    std::shared_ptr<Wrapper>(newJlStr(jlModule)),
    std::shared_ptr<Wrapper>(newJlImBuildInfo(jlModule)),
    std::shared_ptr<Wrapper>(newJlImMovingAverage(jlModule)),
    std::shared_ptr<Wrapper>(newJlImGuiCsvParser(jlModule)),
    std::shared_ptr<Wrapper>(newJlImGuiTestInfoTask(jlModule)),
    std::shared_ptr<Wrapper>(newJlImGuiTestGatherTask(jlModule)),
    std::shared_ptr<Wrapper>(newJlImGuiTestFindByLabelTask(jlModule)),
    std::shared_ptr<Wrapper>(newJlImGuiTestInput(jlModule)),
    std::shared_ptr<Wrapper>(newJlImVec2(jlModule)),
    std::shared_ptr<Wrapper>(newJlImGuiTestInputs(jlModule)),
    std::shared_ptr<Wrapper>(newJlImGuiTestContext(jlModule)),
    std::shared_ptr<Wrapper>(newJlImGuiPerfTool(jlModule)),
    std::shared_ptr<Wrapper>(newJlImGuiCaptureToolUI(jlModule)),
    std::shared_ptr<Wrapper>(newJlImGuiCaptureContext(jlModule)),
    std::shared_ptr<Wrapper>(newJlImGuiCaptureArgs(jlModule)),
    std::shared_ptr<Wrapper>(newJlImGuiTestRef(jlModule)),
    std::shared_ptr<Wrapper>(newJlImGuiTestRefDesc(jlModule)),
    std::shared_ptr<Wrapper>(newJlImGuiTestActionFilter(jlModule)),
    std::shared_ptr<Wrapper>(newJlImGuiTestGenericItemStatus(jlModule)),
    std::shared_ptr<Wrapper>(newJlImGuiTestGenericVars(jlModule)),
    std::shared_ptr<Wrapper>(newJlImVec4(jlModule)),
    std::shared_ptr<Wrapper>(newJlImGuiPerfToolEntry(jlModule)),
    std::shared_ptr<Wrapper>(newJlImGuiPerfToolBatch(jlModule)),
    std::shared_ptr<Wrapper>(newJlGlobal(jlModule))
  };

  DEBUG_MSG("Adding wrapper for enum ImGuiTestActiveFunc (" __HERE__ ")");
  // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:65:6
  jlModule.add_bits<ImGuiTestActiveFunc>("ImGuiTestActiveFunc", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("ImGuiTestActiveFunc_None", ImGuiTestActiveFunc_None);
  jlModule.set_const("ImGuiTestActiveFunc_GuiFunc", ImGuiTestActiveFunc_GuiFunc);
  jlModule.set_const("ImGuiTestActiveFunc_TestFunc", ImGuiTestActiveFunc_TestFunc);

  DEBUG_MSG("Adding wrapper for enum ImGuiTestRunSpeed (" __HERE__ ")");
  // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:72:6
  jlModule.add_bits<ImGuiTestRunSpeed>("ImGuiTestRunSpeed", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("ImGuiTestRunSpeed_Fast", ImGuiTestRunSpeed_Fast);
  jlModule.set_const("ImGuiTestRunSpeed_Normal", ImGuiTestRunSpeed_Normal);
  jlModule.set_const("ImGuiTestRunSpeed_Cinematic", ImGuiTestRunSpeed_Cinematic);
  jlModule.set_const("ImGuiTestRunSpeed_COUNT", ImGuiTestRunSpeed_COUNT);

  DEBUG_MSG("Adding wrapper for enum ImGuiTestVerboseLevel (" __HERE__ ")");
  // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:80:6
  jlModule.add_bits<ImGuiTestVerboseLevel>("ImGuiTestVerboseLevel", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("ImGuiTestVerboseLevel_Silent", ImGuiTestVerboseLevel_Silent);
  jlModule.set_const("ImGuiTestVerboseLevel_Error", ImGuiTestVerboseLevel_Error);
  jlModule.set_const("ImGuiTestVerboseLevel_Warning", ImGuiTestVerboseLevel_Warning);
  jlModule.set_const("ImGuiTestVerboseLevel_Info", ImGuiTestVerboseLevel_Info);
  jlModule.set_const("ImGuiTestVerboseLevel_Debug", ImGuiTestVerboseLevel_Debug);
  jlModule.set_const("ImGuiTestVerboseLevel_Trace", ImGuiTestVerboseLevel_Trace);
  jlModule.set_const("ImGuiTestVerboseLevel_COUNT", ImGuiTestVerboseLevel_COUNT);

  DEBUG_MSG("Adding wrapper for enum ImGuiTestStatus (" __HERE__ ")");
  // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:92:6
  jlModule.add_bits<ImGuiTestStatus>("ImGuiTestStatus", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("ImGuiTestStatus_Unknown", ImGuiTestStatus_Unknown);
  jlModule.set_const("ImGuiTestStatus_Success", ImGuiTestStatus_Success);
  jlModule.set_const("ImGuiTestStatus_Queued", ImGuiTestStatus_Queued);
  jlModule.set_const("ImGuiTestStatus_Running", ImGuiTestStatus_Running);
  jlModule.set_const("ImGuiTestStatus_Error", ImGuiTestStatus_Error);
  jlModule.set_const("ImGuiTestStatus_Suspended", ImGuiTestStatus_Suspended);
  jlModule.set_const("ImGuiTestStatus_COUNT", ImGuiTestStatus_COUNT);

  DEBUG_MSG("Adding wrapper for enum ImGuiTestGroup (" __HERE__ ")");
  // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:104:6
  jlModule.add_bits<ImGuiTestGroup>("ImGuiTestGroup", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("ImGuiTestGroup_Unknown", ImGuiTestGroup_Unknown);
  jlModule.set_const("ImGuiTestGroup_Tests", ImGuiTestGroup_Tests);
  jlModule.set_const("ImGuiTestGroup_Perfs", ImGuiTestGroup_Perfs);
  jlModule.set_const("ImGuiTestGroup_COUNT", ImGuiTestGroup_COUNT);

  DEBUG_MSG("Adding wrapper for enum ImGuiTestFlags_ (" __HERE__ ")");
  // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:113:6
  jlModule.add_bits<ImGuiTestFlags_>("ImGuiTestFlags_", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("ImGuiTestFlags_None", ImGuiTestFlags_None);
  jlModule.set_const("ImGuiTestFlags_NoGuiWarmUp", ImGuiTestFlags_NoGuiWarmUp);
  jlModule.set_const("ImGuiTestFlags_NoAutoFinish", ImGuiTestFlags_NoAutoFinish);
  jlModule.set_const("ImGuiTestFlags_NoRecoveryWarnings", ImGuiTestFlags_NoRecoveryWarnings);

  DEBUG_MSG("Adding wrapper for enum ImGuiTestCheckFlags_ (" __HERE__ ")");
  // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:123:6
  jlModule.add_bits<ImGuiTestCheckFlags_>("ImGuiTestCheckFlags_", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("ImGuiTestCheckFlags_None", ImGuiTestCheckFlags_None);
  jlModule.set_const("ImGuiTestCheckFlags_SilentSuccess", ImGuiTestCheckFlags_SilentSuccess);

  DEBUG_MSG("Adding wrapper for enum ImGuiTestLogFlags_ (" __HERE__ ")");
  // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:130:6
  jlModule.add_bits<ImGuiTestLogFlags_>("ImGuiTestLogFlags_", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("ImGuiTestLogFlags_None", ImGuiTestLogFlags_None);
  jlModule.set_const("ImGuiTestLogFlags_NoHeader", ImGuiTestLogFlags_NoHeader);

  DEBUG_MSG("Adding wrapper for enum ImGuiTestRunFlags_ (" __HERE__ ")");
  // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:136:6
  jlModule.add_bits<ImGuiTestRunFlags_>("ImGuiTestRunFlags_", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("ImGuiTestRunFlags_None", ImGuiTestRunFlags_None);
  jlModule.set_const("ImGuiTestRunFlags_GuiFuncDisable", ImGuiTestRunFlags_GuiFuncDisable);
  jlModule.set_const("ImGuiTestRunFlags_GuiFuncOnly", ImGuiTestRunFlags_GuiFuncOnly);
  jlModule.set_const("ImGuiTestRunFlags_NoSuccessMsg", ImGuiTestRunFlags_NoSuccessMsg);
  jlModule.set_const("ImGuiTestRunFlags_EnableRawInputs", ImGuiTestRunFlags_EnableRawInputs);
  jlModule.set_const("ImGuiTestRunFlags_RunFromGui", ImGuiTestRunFlags_RunFromGui);
  jlModule.set_const("ImGuiTestRunFlags_RunFromCommandLine", ImGuiTestRunFlags_RunFromCommandLine);
  jlModule.set_const("ImGuiTestRunFlags_NoError", ImGuiTestRunFlags_NoError);
  jlModule.set_const("ImGuiTestRunFlags_ShareVars", ImGuiTestRunFlags_ShareVars);
  jlModule.set_const("ImGuiTestRunFlags_ShareTestContext", ImGuiTestRunFlags_ShareTestContext);

  DEBUG_MSG("Adding wrapper for enum ImGuiTestEngineExportFormat (" __HERE__ ")");
  // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_exporters.h:46:6
  jlModule.add_bits<ImGuiTestEngineExportFormat>("ImGuiTestEngineExportFormat", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("ImGuiTestEngineExportFormat_None", ImGuiTestEngineExportFormat_None);
  jlModule.set_const("ImGuiTestEngineExportFormat_JUnitXml", ImGuiTestEngineExportFormat_JUnitXml);

  DEBUG_MSG("Adding wrapper for enum ImOsConsoleStream (" __HERE__ ")");
  // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_utils.h:94:6
  jlModule.add_bits<ImOsConsoleStream>("ImOsConsoleStream", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("ImOsConsoleStream_StandardOutput", ImOsConsoleStream_StandardOutput);
  jlModule.set_const("ImOsConsoleStream_StandardError", ImOsConsoleStream_StandardError);

  DEBUG_MSG("Adding wrapper for enum ImOsConsoleTextColor (" __HERE__ ")");
  // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_utils.h:100:6
  jlModule.add_bits<ImOsConsoleTextColor>("ImOsConsoleTextColor", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("ImOsConsoleTextColor_Black", ImOsConsoleTextColor_Black);
  jlModule.set_const("ImOsConsoleTextColor_White", ImOsConsoleTextColor_White);
  jlModule.set_const("ImOsConsoleTextColor_BrightWhite", ImOsConsoleTextColor_BrightWhite);
  jlModule.set_const("ImOsConsoleTextColor_BrightRed", ImOsConsoleTextColor_BrightRed);
  jlModule.set_const("ImOsConsoleTextColor_BrightGreen", ImOsConsoleTextColor_BrightGreen);
  jlModule.set_const("ImOsConsoleTextColor_BrightBlue", ImOsConsoleTextColor_BrightBlue);
  jlModule.set_const("ImOsConsoleTextColor_BrightYellow", ImOsConsoleTextColor_BrightYellow);

  DEBUG_MSG("Adding wrapper for enum ImGuiTestInputType (" __HERE__ ")");
  // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:64:6
  jlModule.add_bits<ImGuiTestInputType>("ImGuiTestInputType", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("ImGuiTestInputType_None", ImGuiTestInputType_None);
  jlModule.set_const("ImGuiTestInputType_Key", ImGuiTestInputType_Key);
  jlModule.set_const("ImGuiTestInputType_Char", ImGuiTestInputType_Char);
  jlModule.set_const("ImGuiTestInputType_ViewportFocus", ImGuiTestInputType_ViewportFocus);
  jlModule.set_const("ImGuiTestInputType_ViewportSetPos", ImGuiTestInputType_ViewportSetPos);
  jlModule.set_const("ImGuiTestInputType_ViewportSetSize", ImGuiTestInputType_ViewportSetSize);
  jlModule.set_const("ImGuiTestInputType_ViewportClose", ImGuiTestInputType_ViewportClose);

  DEBUG_MSG("Adding wrapper for enum ImGuiTestAction (" __HERE__ ")");
  // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:102:6
  jlModule.add_bits<ImGuiTestAction>("ImGuiTestAction", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("ImGuiTestAction_Unknown", ImGuiTestAction_Unknown);
  jlModule.set_const("ImGuiTestAction_Hover", ImGuiTestAction_Hover);
  jlModule.set_const("ImGuiTestAction_Click", ImGuiTestAction_Click);
  jlModule.set_const("ImGuiTestAction_DoubleClick", ImGuiTestAction_DoubleClick);
  jlModule.set_const("ImGuiTestAction_Check", ImGuiTestAction_Check);
  jlModule.set_const("ImGuiTestAction_Uncheck", ImGuiTestAction_Uncheck);
  jlModule.set_const("ImGuiTestAction_Open", ImGuiTestAction_Open);
  jlModule.set_const("ImGuiTestAction_Close", ImGuiTestAction_Close);
  jlModule.set_const("ImGuiTestAction_Input", ImGuiTestAction_Input);
  jlModule.set_const("ImGuiTestAction_NavActivate", ImGuiTestAction_NavActivate);
  jlModule.set_const("ImGuiTestAction_COUNT", ImGuiTestAction_COUNT);

  DEBUG_MSG("Adding wrapper for enum ImGuiTestOpFlags_ (" __HERE__ ")");
  // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:119:6
  jlModule.add_bits<ImGuiTestOpFlags_>("ImGuiTestOpFlags_", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("ImGuiTestOpFlags_None", ImGuiTestOpFlags_None);
  jlModule.set_const("ImGuiTestOpFlags_NoCheckHoveredId", ImGuiTestOpFlags_NoCheckHoveredId);
  jlModule.set_const("ImGuiTestOpFlags_NoError", ImGuiTestOpFlags_NoError);
  jlModule.set_const("ImGuiTestOpFlags_NoFocusWindow", ImGuiTestOpFlags_NoFocusWindow);
  jlModule.set_const("ImGuiTestOpFlags_NoAutoUncollapse", ImGuiTestOpFlags_NoAutoUncollapse);
  jlModule.set_const("ImGuiTestOpFlags_NoAutoOpenFullPath", ImGuiTestOpFlags_NoAutoOpenFullPath);
  jlModule.set_const("ImGuiTestOpFlags_NoYield", ImGuiTestOpFlags_NoYield);
  jlModule.set_const("ImGuiTestOpFlags_IsSecondAttempt", ImGuiTestOpFlags_IsSecondAttempt);
  jlModule.set_const("ImGuiTestOpFlags_MoveToEdgeL", ImGuiTestOpFlags_MoveToEdgeL);
  jlModule.set_const("ImGuiTestOpFlags_MoveToEdgeR", ImGuiTestOpFlags_MoveToEdgeR);
  jlModule.set_const("ImGuiTestOpFlags_MoveToEdgeU", ImGuiTestOpFlags_MoveToEdgeU);
  jlModule.set_const("ImGuiTestOpFlags_MoveToEdgeD", ImGuiTestOpFlags_MoveToEdgeD);

  DEBUG_MSG("Adding wrapper for enum ImGuiInputSource (" __HERE__ ")");
  // defined in ../cimgui/imgui/imgui_internal.h:1403:6
  jlModule.add_bits<ImGuiInputSource>("ImGuiInputSource", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("ImGuiInputSource_None", ImGuiInputSource_None);
  jlModule.set_const("ImGuiInputSource_Mouse", ImGuiInputSource_Mouse);
  jlModule.set_const("ImGuiInputSource_Keyboard", ImGuiInputSource_Keyboard);
  jlModule.set_const("ImGuiInputSource_Gamepad", ImGuiInputSource_Gamepad);
  jlModule.set_const("ImGuiInputSource_COUNT", ImGuiInputSource_COUNT);

  DEBUG_MSG("Adding wrapper for enum ImGuiPerfToolDisplayType (" __HERE__ ")");
  // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:60:6
  jlModule.add_bits<ImGuiPerfToolDisplayType>("ImGuiPerfToolDisplayType", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("ImGuiPerfToolDisplayType_Simple", ImGuiPerfToolDisplayType_Simple);
  jlModule.set_const("ImGuiPerfToolDisplayType_PerBranchColors", ImGuiPerfToolDisplayType_PerBranchColors);
  jlModule.set_const("ImGuiPerfToolDisplayType_CombineByBuildInfo", ImGuiPerfToolDisplayType_CombineByBuildInfo);
  for(const auto& w: wrappers) w->add_methods();

}
