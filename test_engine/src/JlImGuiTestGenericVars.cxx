// this file was auto-generated by wrapit v1.3.3
#include "Wrapper.h"

#include "jlImGuiTestEngine.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<ImGuiTestGenericVars> : std::false_type { };
  template<> struct DefaultConstructible<ImGuiTestGenericVars> : std::false_type { };
}

// Class generating the wrapper for type ImGuiTestGenericVars
// signature to use in the veto file: ImGuiTestGenericVars
struct JlImGuiTestGenericVars: public Wrapper {

  JlImGuiTestGenericVars(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ImGuiTestGenericVars (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:175:18
    jlcxx::TypeWrapper<ImGuiTestGenericVars>  t = jlModule.add_type<ImGuiTestGenericVars>("ImGuiTestGenericVars");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ImGuiTestGenericVars>>(new jlcxx::TypeWrapper<ImGuiTestGenericVars>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void ImGuiTestGenericVars::Clear() (" __HERE__ ")");
    // signature to use in the veto list: void ImGuiTestGenericVars::Clear()
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:204:10
    t.method("Clear", static_cast<void (ImGuiTestGenericVars::*)() >(&ImGuiTestGenericVars::Clear));

    DEBUG_MSG("Adding Step methods  to provide read access to the field Step (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:178:29
    // signature to use in the veto list: ImGuiTestGenericVars::Step
    t.method("Step", [](const ImGuiTestGenericVars& a) -> int { return a.Step; });
    t.method("Step", [](ImGuiTestGenericVars& a) -> int { return a.Step; });
    t.method("Step", [](const ImGuiTestGenericVars* a) -> int { return a->Step; });
    t.method("Step", [](ImGuiTestGenericVars* a) -> int { return a->Step; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:178:29
    // signature to use in the veto list: ImGuiTestGenericVars::Step
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Step! methods to provide write access to the field Step (" __HERE__ ")");
    t.method("Step!", [](ImGuiTestGenericVars& a, int val) -> int { return a.Step = val; });

    DEBUG_MSG("Adding Step! methods to provide write access to the field Step (" __HERE__ ")");
    t.method("Step!", [](ImGuiTestGenericVars* a, int val) -> int { return a->Step = val; });

    DEBUG_MSG("Adding Count methods  to provide read access to the field Count (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:179:29
    // signature to use in the veto list: ImGuiTestGenericVars::Count
    t.method("Count", [](const ImGuiTestGenericVars& a) -> int { return a.Count; });
    t.method("Count", [](ImGuiTestGenericVars& a) -> int { return a.Count; });
    t.method("Count", [](const ImGuiTestGenericVars* a) -> int { return a->Count; });
    t.method("Count", [](ImGuiTestGenericVars* a) -> int { return a->Count; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:179:29
    // signature to use in the veto list: ImGuiTestGenericVars::Count
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Count! methods to provide write access to the field Count (" __HERE__ ")");
    t.method("Count!", [](ImGuiTestGenericVars& a, int val) -> int { return a.Count = val; });

    DEBUG_MSG("Adding Count! methods to provide write access to the field Count (" __HERE__ ")");
    t.method("Count!", [](ImGuiTestGenericVars* a, int val) -> int { return a->Count = val; });

    DEBUG_MSG("Adding DockId methods  to provide read access to the field DockId (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:180:29
    // signature to use in the veto list: ImGuiTestGenericVars::DockId
    t.method("DockId", [](const ImGuiTestGenericVars& a) -> ImGuiID { return a.DockId; });
    t.method("DockId", [](ImGuiTestGenericVars& a) -> ImGuiID { return a.DockId; });
    t.method("DockId", [](const ImGuiTestGenericVars* a) -> ImGuiID { return a->DockId; });
    t.method("DockId", [](ImGuiTestGenericVars* a) -> ImGuiID { return a->DockId; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:180:29
    // signature to use in the veto list: ImGuiTestGenericVars::DockId
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding DockId! methods to provide write access to the field DockId (" __HERE__ ")");
    t.method("DockId!", [](ImGuiTestGenericVars& a, ImGuiID val) -> ImGuiID { return a.DockId = val; });

    DEBUG_MSG("Adding DockId! methods to provide write access to the field DockId (" __HERE__ ")");
    t.method("DockId!", [](ImGuiTestGenericVars* a, ImGuiID val) -> ImGuiID { return a->DockId = val; });

    DEBUG_MSG("Adding OwnerId methods  to provide read access to the field OwnerId (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:181:29
    // signature to use in the veto list: ImGuiTestGenericVars::OwnerId
    t.method("OwnerId", [](const ImGuiTestGenericVars& a) -> ImGuiID { return a.OwnerId; });
    t.method("OwnerId", [](ImGuiTestGenericVars& a) -> ImGuiID { return a.OwnerId; });
    t.method("OwnerId", [](const ImGuiTestGenericVars* a) -> ImGuiID { return a->OwnerId; });
    t.method("OwnerId", [](ImGuiTestGenericVars* a) -> ImGuiID { return a->OwnerId; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:181:29
    // signature to use in the veto list: ImGuiTestGenericVars::OwnerId
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding OwnerId! methods to provide write access to the field OwnerId (" __HERE__ ")");
    t.method("OwnerId!", [](ImGuiTestGenericVars& a, ImGuiID val) -> ImGuiID { return a.OwnerId = val; });

    DEBUG_MSG("Adding OwnerId! methods to provide write access to the field OwnerId (" __HERE__ ")");
    t.method("OwnerId!", [](ImGuiTestGenericVars* a, ImGuiID val) -> ImGuiID { return a->OwnerId = val; });

    DEBUG_MSG("Adding WindowSize methods  to provide read access to the field WindowSize (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:182:29
    // signature to use in the veto list: ImGuiTestGenericVars::WindowSize
    t.method("WindowSize", [](const ImGuiTestGenericVars& a) -> const ImVec2& { return a.WindowSize; });
    t.method("WindowSize", [](ImGuiTestGenericVars& a) -> ImVec2& { return a.WindowSize; });
    t.method("WindowSize", [](const ImGuiTestGenericVars* a) -> const ImVec2& { return a->WindowSize; });
    t.method("WindowSize", [](ImGuiTestGenericVars* a) -> ImVec2& { return a->WindowSize; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:182:29
    // signature to use in the veto list: ImGuiTestGenericVars::WindowSize
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding WindowSize! methods to provide write access to the field WindowSize (" __HERE__ ")");
    t.method("WindowSize!", [](ImGuiTestGenericVars& a, const ImVec2& val) -> ImVec2& { return a.WindowSize = val; });

    DEBUG_MSG("Adding WindowSize! methods to provide write access to the field WindowSize (" __HERE__ ")");
    t.method("WindowSize!", [](ImGuiTestGenericVars* a, const ImVec2& val) -> ImVec2& { return a->WindowSize = val; });

    DEBUG_MSG("Adding TableFlags methods  to provide read access to the field TableFlags (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:184:29
    // signature to use in the veto list: ImGuiTestGenericVars::TableFlags
    t.method("TableFlags", [](const ImGuiTestGenericVars& a) -> ImGuiTableFlags { return a.TableFlags; });
    t.method("TableFlags", [](ImGuiTestGenericVars& a) -> ImGuiTableFlags { return a.TableFlags; });
    t.method("TableFlags", [](const ImGuiTestGenericVars* a) -> ImGuiTableFlags { return a->TableFlags; });
    t.method("TableFlags", [](ImGuiTestGenericVars* a) -> ImGuiTableFlags { return a->TableFlags; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:184:29
    // signature to use in the veto list: ImGuiTestGenericVars::TableFlags
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding TableFlags! methods to provide write access to the field TableFlags (" __HERE__ ")");
    t.method("TableFlags!", [](ImGuiTestGenericVars& a, ImGuiTableFlags val) -> ImGuiTableFlags { return a.TableFlags = val; });

    DEBUG_MSG("Adding TableFlags! methods to provide write access to the field TableFlags (" __HERE__ ")");
    t.method("TableFlags!", [](ImGuiTestGenericVars* a, ImGuiTableFlags val) -> ImGuiTableFlags { return a->TableFlags = val; });

    DEBUG_MSG("Adding PopupFlags methods  to provide read access to the field PopupFlags (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:185:29
    // signature to use in the veto list: ImGuiTestGenericVars::PopupFlags
    t.method("PopupFlags", [](const ImGuiTestGenericVars& a) -> ImGuiPopupFlags { return a.PopupFlags; });
    t.method("PopupFlags", [](ImGuiTestGenericVars& a) -> ImGuiPopupFlags { return a.PopupFlags; });
    t.method("PopupFlags", [](const ImGuiTestGenericVars* a) -> ImGuiPopupFlags { return a->PopupFlags; });
    t.method("PopupFlags", [](ImGuiTestGenericVars* a) -> ImGuiPopupFlags { return a->PopupFlags; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:185:29
    // signature to use in the veto list: ImGuiTestGenericVars::PopupFlags
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding PopupFlags! methods to provide write access to the field PopupFlags (" __HERE__ ")");
    t.method("PopupFlags!", [](ImGuiTestGenericVars& a, ImGuiPopupFlags val) -> ImGuiPopupFlags { return a.PopupFlags = val; });

    DEBUG_MSG("Adding PopupFlags! methods to provide write access to the field PopupFlags (" __HERE__ ")");
    t.method("PopupFlags!", [](ImGuiTestGenericVars* a, ImGuiPopupFlags val) -> ImGuiPopupFlags { return a->PopupFlags = val; });

    DEBUG_MSG("Adding Status methods  to provide read access to the field Status (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:186:33
    // signature to use in the veto list: ImGuiTestGenericVars::Status
    t.method("Status", [](const ImGuiTestGenericVars& a) -> const ImGuiTestGenericItemStatus& { return a.Status; });
    t.method("Status", [](ImGuiTestGenericVars& a) -> ImGuiTestGenericItemStatus& { return a.Status; });
    t.method("Status", [](const ImGuiTestGenericVars* a) -> const ImGuiTestGenericItemStatus& { return a->Status; });
    t.method("Status", [](ImGuiTestGenericVars* a) -> ImGuiTestGenericItemStatus& { return a->Status; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:186:33
    // signature to use in the veto list: ImGuiTestGenericVars::Status
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Status! methods to provide write access to the field Status (" __HERE__ ")");
    t.method("Status!", [](ImGuiTestGenericVars& a, const ImGuiTestGenericItemStatus& val) -> ImGuiTestGenericItemStatus& { return a.Status = val; });

    DEBUG_MSG("Adding Status! methods to provide write access to the field Status (" __HERE__ ")");
    t.method("Status!", [](ImGuiTestGenericVars* a, const ImGuiTestGenericItemStatus& val) -> ImGuiTestGenericItemStatus& { return a->Status = val; });

    DEBUG_MSG("Adding ShowWindow1 methods  to provide read access to the field ShowWindow1 (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:187:29
    // signature to use in the veto list: ImGuiTestGenericVars::ShowWindow1
    t.method("ShowWindow1", [](const ImGuiTestGenericVars& a) -> bool { return a.ShowWindow1; });
    t.method("ShowWindow1", [](ImGuiTestGenericVars& a) -> bool { return a.ShowWindow1; });
    t.method("ShowWindow1", [](const ImGuiTestGenericVars* a) -> bool { return a->ShowWindow1; });
    t.method("ShowWindow1", [](ImGuiTestGenericVars* a) -> bool { return a->ShowWindow1; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:187:29
    // signature to use in the veto list: ImGuiTestGenericVars::ShowWindow1
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ShowWindow1! methods to provide write access to the field ShowWindow1 (" __HERE__ ")");
    t.method("ShowWindow1!", [](ImGuiTestGenericVars& a, bool val) -> bool { return a.ShowWindow1 = val; });

    DEBUG_MSG("Adding ShowWindow1! methods to provide write access to the field ShowWindow1 (" __HERE__ ")");
    t.method("ShowWindow1!", [](ImGuiTestGenericVars* a, bool val) -> bool { return a->ShowWindow1 = val; });

    DEBUG_MSG("Adding ShowWindow2 methods  to provide read access to the field ShowWindow2 (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:187:42
    // signature to use in the veto list: ImGuiTestGenericVars::ShowWindow2
    t.method("ShowWindow2", [](const ImGuiTestGenericVars& a) -> bool { return a.ShowWindow2; });
    t.method("ShowWindow2", [](ImGuiTestGenericVars& a) -> bool { return a.ShowWindow2; });
    t.method("ShowWindow2", [](const ImGuiTestGenericVars* a) -> bool { return a->ShowWindow2; });
    t.method("ShowWindow2", [](ImGuiTestGenericVars* a) -> bool { return a->ShowWindow2; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:187:42
    // signature to use in the veto list: ImGuiTestGenericVars::ShowWindow2
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ShowWindow2! methods to provide write access to the field ShowWindow2 (" __HERE__ ")");
    t.method("ShowWindow2!", [](ImGuiTestGenericVars& a, bool val) -> bool { return a.ShowWindow2 = val; });

    DEBUG_MSG("Adding ShowWindow2! methods to provide write access to the field ShowWindow2 (" __HERE__ ")");
    t.method("ShowWindow2!", [](ImGuiTestGenericVars* a, bool val) -> bool { return a->ShowWindow2 = val; });

    DEBUG_MSG("Adding UseClipper methods  to provide read access to the field UseClipper (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:188:29
    // signature to use in the veto list: ImGuiTestGenericVars::UseClipper
    t.method("UseClipper", [](const ImGuiTestGenericVars& a) -> bool { return a.UseClipper; });
    t.method("UseClipper", [](ImGuiTestGenericVars& a) -> bool { return a.UseClipper; });
    t.method("UseClipper", [](const ImGuiTestGenericVars* a) -> bool { return a->UseClipper; });
    t.method("UseClipper", [](ImGuiTestGenericVars* a) -> bool { return a->UseClipper; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:188:29
    // signature to use in the veto list: ImGuiTestGenericVars::UseClipper
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding UseClipper! methods to provide write access to the field UseClipper (" __HERE__ ")");
    t.method("UseClipper!", [](ImGuiTestGenericVars& a, bool val) -> bool { return a.UseClipper = val; });

    DEBUG_MSG("Adding UseClipper! methods to provide write access to the field UseClipper (" __HERE__ ")");
    t.method("UseClipper!", [](ImGuiTestGenericVars* a, bool val) -> bool { return a->UseClipper = val; });

    DEBUG_MSG("Adding UseViewports methods  to provide read access to the field UseViewports (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:189:29
    // signature to use in the veto list: ImGuiTestGenericVars::UseViewports
    t.method("UseViewports", [](const ImGuiTestGenericVars& a) -> bool { return a.UseViewports; });
    t.method("UseViewports", [](ImGuiTestGenericVars& a) -> bool { return a.UseViewports; });
    t.method("UseViewports", [](const ImGuiTestGenericVars* a) -> bool { return a->UseViewports; });
    t.method("UseViewports", [](ImGuiTestGenericVars* a) -> bool { return a->UseViewports; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:189:29
    // signature to use in the veto list: ImGuiTestGenericVars::UseViewports
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding UseViewports! methods to provide write access to the field UseViewports (" __HERE__ ")");
    t.method("UseViewports!", [](ImGuiTestGenericVars& a, bool val) -> bool { return a.UseViewports = val; });

    DEBUG_MSG("Adding UseViewports! methods to provide write access to the field UseViewports (" __HERE__ ")");
    t.method("UseViewports!", [](ImGuiTestGenericVars* a, bool val) -> bool { return a->UseViewports = val; });

    DEBUG_MSG("Adding Width methods  to provide read access to the field Width (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:190:29
    // signature to use in the veto list: ImGuiTestGenericVars::Width
    t.method("Width", [](const ImGuiTestGenericVars& a) -> float { return a.Width; });
    t.method("Width", [](ImGuiTestGenericVars& a) -> float { return a.Width; });
    t.method("Width", [](const ImGuiTestGenericVars* a) -> float { return a->Width; });
    t.method("Width", [](ImGuiTestGenericVars* a) -> float { return a->Width; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:190:29
    // signature to use in the veto list: ImGuiTestGenericVars::Width
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Width! methods to provide write access to the field Width (" __HERE__ ")");
    t.method("Width!", [](ImGuiTestGenericVars& a, float val) -> float { return a.Width = val; });

    DEBUG_MSG("Adding Width! methods to provide write access to the field Width (" __HERE__ ")");
    t.method("Width!", [](ImGuiTestGenericVars* a, float val) -> float { return a->Width = val; });

    DEBUG_MSG("Adding Pos methods  to provide read access to the field Pos (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:191:29
    // signature to use in the veto list: ImGuiTestGenericVars::Pos
    t.method("Pos", [](const ImGuiTestGenericVars& a) -> const ImVec2& { return a.Pos; });
    t.method("Pos", [](ImGuiTestGenericVars& a) -> ImVec2& { return a.Pos; });
    t.method("Pos", [](const ImGuiTestGenericVars* a) -> const ImVec2& { return a->Pos; });
    t.method("Pos", [](ImGuiTestGenericVars* a) -> ImVec2& { return a->Pos; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:191:29
    // signature to use in the veto list: ImGuiTestGenericVars::Pos
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Pos! methods to provide write access to the field Pos (" __HERE__ ")");
    t.method("Pos!", [](ImGuiTestGenericVars& a, const ImVec2& val) -> ImVec2& { return a.Pos = val; });

    DEBUG_MSG("Adding Pos! methods to provide write access to the field Pos (" __HERE__ ")");
    t.method("Pos!", [](ImGuiTestGenericVars* a, const ImVec2& val) -> ImVec2& { return a->Pos = val; });

    DEBUG_MSG("Adding Pivot methods  to provide read access to the field Pivot (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:192:29
    // signature to use in the veto list: ImGuiTestGenericVars::Pivot
    t.method("Pivot", [](const ImGuiTestGenericVars& a) -> const ImVec2& { return a.Pivot; });
    t.method("Pivot", [](ImGuiTestGenericVars& a) -> ImVec2& { return a.Pivot; });
    t.method("Pivot", [](const ImGuiTestGenericVars* a) -> const ImVec2& { return a->Pivot; });
    t.method("Pivot", [](ImGuiTestGenericVars* a) -> ImVec2& { return a->Pivot; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:192:29
    // signature to use in the veto list: ImGuiTestGenericVars::Pivot
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Pivot! methods to provide write access to the field Pivot (" __HERE__ ")");
    t.method("Pivot!", [](ImGuiTestGenericVars& a, const ImVec2& val) -> ImVec2& { return a.Pivot = val; });

    DEBUG_MSG("Adding Pivot! methods to provide write access to the field Pivot (" __HERE__ ")");
    t.method("Pivot!", [](ImGuiTestGenericVars* a, const ImVec2& val) -> ImVec2& { return a->Pivot = val; });

    DEBUG_MSG("Adding ItemSize methods  to provide read access to the field ItemSize (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:193:29
    // signature to use in the veto list: ImGuiTestGenericVars::ItemSize
    t.method("ItemSize", [](const ImGuiTestGenericVars& a) -> const ImVec2& { return a.ItemSize; });
    t.method("ItemSize", [](ImGuiTestGenericVars& a) -> ImVec2& { return a.ItemSize; });
    t.method("ItemSize", [](const ImGuiTestGenericVars* a) -> const ImVec2& { return a->ItemSize; });
    t.method("ItemSize", [](ImGuiTestGenericVars* a) -> ImVec2& { return a->ItemSize; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:193:29
    // signature to use in the veto list: ImGuiTestGenericVars::ItemSize
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ItemSize! methods to provide write access to the field ItemSize (" __HERE__ ")");
    t.method("ItemSize!", [](ImGuiTestGenericVars& a, const ImVec2& val) -> ImVec2& { return a.ItemSize = val; });

    DEBUG_MSG("Adding ItemSize! methods to provide write access to the field ItemSize (" __HERE__ ")");
    t.method("ItemSize!", [](ImGuiTestGenericVars* a, const ImVec2& val) -> ImVec2& { return a->ItemSize = val; });

    DEBUG_MSG("Adding Color1 methods  to provide read access to the field Color1 (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:194:29
    // signature to use in the veto list: ImGuiTestGenericVars::Color1
    t.method("Color1", [](const ImGuiTestGenericVars& a) -> const ImVec4& { return a.Color1; });
    t.method("Color1", [](ImGuiTestGenericVars& a) -> ImVec4& { return a.Color1; });
    t.method("Color1", [](const ImGuiTestGenericVars* a) -> const ImVec4& { return a->Color1; });
    t.method("Color1", [](ImGuiTestGenericVars* a) -> ImVec4& { return a->Color1; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:194:29
    // signature to use in the veto list: ImGuiTestGenericVars::Color1
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Color1! methods to provide write access to the field Color1 (" __HERE__ ")");
    t.method("Color1!", [](ImGuiTestGenericVars& a, const ImVec4& val) -> ImVec4& { return a.Color1 = val; });

    DEBUG_MSG("Adding Color1! methods to provide write access to the field Color1 (" __HERE__ ")");
    t.method("Color1!", [](ImGuiTestGenericVars* a, const ImVec4& val) -> ImVec4& { return a->Color1 = val; });

    DEBUG_MSG("Adding Color2 methods  to provide read access to the field Color2 (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:194:37
    // signature to use in the veto list: ImGuiTestGenericVars::Color2
    t.method("Color2", [](const ImGuiTestGenericVars& a) -> const ImVec4& { return a.Color2; });
    t.method("Color2", [](ImGuiTestGenericVars& a) -> ImVec4& { return a.Color2; });
    t.method("Color2", [](const ImGuiTestGenericVars* a) -> const ImVec4& { return a->Color2; });
    t.method("Color2", [](ImGuiTestGenericVars* a) -> ImVec4& { return a->Color2; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:194:37
    // signature to use in the veto list: ImGuiTestGenericVars::Color2
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Color2! methods to provide write access to the field Color2 (" __HERE__ ")");
    t.method("Color2!", [](ImGuiTestGenericVars& a, const ImVec4& val) -> ImVec4& { return a.Color2 = val; });

    DEBUG_MSG("Adding Color2! methods to provide write access to the field Color2 (" __HERE__ ")");
    t.method("Color2!", [](ImGuiTestGenericVars* a, const ImVec4& val) -> ImVec4& { return a->Color2 = val; });

    DEBUG_MSG("Adding Int1 methods  to provide read access to the field Int1 (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:197:29
    // signature to use in the veto list: ImGuiTestGenericVars::Int1
    t.method("Int1", [](const ImGuiTestGenericVars& a) -> int { return a.Int1; });
    t.method("Int1", [](ImGuiTestGenericVars& a) -> int { return a.Int1; });
    t.method("Int1", [](const ImGuiTestGenericVars* a) -> int { return a->Int1; });
    t.method("Int1", [](ImGuiTestGenericVars* a) -> int { return a->Int1; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:197:29
    // signature to use in the veto list: ImGuiTestGenericVars::Int1
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Int1! methods to provide write access to the field Int1 (" __HERE__ ")");
    t.method("Int1!", [](ImGuiTestGenericVars& a, int val) -> int { return a.Int1 = val; });

    DEBUG_MSG("Adding Int1! methods to provide write access to the field Int1 (" __HERE__ ")");
    t.method("Int1!", [](ImGuiTestGenericVars* a, int val) -> int { return a->Int1 = val; });

    DEBUG_MSG("Adding Int2 methods  to provide read access to the field Int2 (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:197:35
    // signature to use in the veto list: ImGuiTestGenericVars::Int2
    t.method("Int2", [](const ImGuiTestGenericVars& a) -> int { return a.Int2; });
    t.method("Int2", [](ImGuiTestGenericVars& a) -> int { return a.Int2; });
    t.method("Int2", [](const ImGuiTestGenericVars* a) -> int { return a->Int2; });
    t.method("Int2", [](ImGuiTestGenericVars* a) -> int { return a->Int2; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:197:35
    // signature to use in the veto list: ImGuiTestGenericVars::Int2
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Int2! methods to provide write access to the field Int2 (" __HERE__ ")");
    t.method("Int2!", [](ImGuiTestGenericVars& a, int val) -> int { return a.Int2 = val; });

    DEBUG_MSG("Adding Int2! methods to provide write access to the field Int2 (" __HERE__ ")");
    t.method("Int2!", [](ImGuiTestGenericVars* a, int val) -> int { return a->Int2 = val; });

    DEBUG_MSG("Adding Float1 methods  to provide read access to the field Float1 (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:198:29
    // signature to use in the veto list: ImGuiTestGenericVars::Float1
    t.method("Float1", [](const ImGuiTestGenericVars& a) -> float { return a.Float1; });
    t.method("Float1", [](ImGuiTestGenericVars& a) -> float { return a.Float1; });
    t.method("Float1", [](const ImGuiTestGenericVars* a) -> float { return a->Float1; });
    t.method("Float1", [](ImGuiTestGenericVars* a) -> float { return a->Float1; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:198:29
    // signature to use in the veto list: ImGuiTestGenericVars::Float1
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Float1! methods to provide write access to the field Float1 (" __HERE__ ")");
    t.method("Float1!", [](ImGuiTestGenericVars& a, float val) -> float { return a.Float1 = val; });

    DEBUG_MSG("Adding Float1! methods to provide write access to the field Float1 (" __HERE__ ")");
    t.method("Float1!", [](ImGuiTestGenericVars* a, float val) -> float { return a->Float1 = val; });

    DEBUG_MSG("Adding Float2 methods  to provide read access to the field Float2 (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:198:37
    // signature to use in the veto list: ImGuiTestGenericVars::Float2
    t.method("Float2", [](const ImGuiTestGenericVars& a) -> float { return a.Float2; });
    t.method("Float2", [](ImGuiTestGenericVars& a) -> float { return a.Float2; });
    t.method("Float2", [](const ImGuiTestGenericVars* a) -> float { return a->Float2; });
    t.method("Float2", [](ImGuiTestGenericVars* a) -> float { return a->Float2; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:198:37
    // signature to use in the veto list: ImGuiTestGenericVars::Float2
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Float2! methods to provide write access to the field Float2 (" __HERE__ ")");
    t.method("Float2!", [](ImGuiTestGenericVars& a, float val) -> float { return a.Float2 = val; });

    DEBUG_MSG("Adding Float2! methods to provide write access to the field Float2 (" __HERE__ ")");
    t.method("Float2!", [](ImGuiTestGenericVars* a, float val) -> float { return a->Float2 = val; });

    DEBUG_MSG("Adding Bool1 methods  to provide read access to the field Bool1 (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:199:29
    // signature to use in the veto list: ImGuiTestGenericVars::Bool1
    t.method("Bool1", [](const ImGuiTestGenericVars& a) -> bool { return a.Bool1; });
    t.method("Bool1", [](ImGuiTestGenericVars& a) -> bool { return a.Bool1; });
    t.method("Bool1", [](const ImGuiTestGenericVars* a) -> bool { return a->Bool1; });
    t.method("Bool1", [](ImGuiTestGenericVars* a) -> bool { return a->Bool1; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:199:29
    // signature to use in the veto list: ImGuiTestGenericVars::Bool1
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Bool1! methods to provide write access to the field Bool1 (" __HERE__ ")");
    t.method("Bool1!", [](ImGuiTestGenericVars& a, bool val) -> bool { return a.Bool1 = val; });

    DEBUG_MSG("Adding Bool1! methods to provide write access to the field Bool1 (" __HERE__ ")");
    t.method("Bool1!", [](ImGuiTestGenericVars* a, bool val) -> bool { return a->Bool1 = val; });

    DEBUG_MSG("Adding Bool2 methods  to provide read access to the field Bool2 (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:199:36
    // signature to use in the veto list: ImGuiTestGenericVars::Bool2
    t.method("Bool2", [](const ImGuiTestGenericVars& a) -> bool { return a.Bool2; });
    t.method("Bool2", [](ImGuiTestGenericVars& a) -> bool { return a.Bool2; });
    t.method("Bool2", [](const ImGuiTestGenericVars* a) -> bool { return a->Bool2; });
    t.method("Bool2", [](ImGuiTestGenericVars* a) -> bool { return a->Bool2; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:199:36
    // signature to use in the veto list: ImGuiTestGenericVars::Bool2
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Bool2! methods to provide write access to the field Bool2 (" __HERE__ ")");
    t.method("Bool2!", [](ImGuiTestGenericVars& a, bool val) -> bool { return a.Bool2 = val; });

    DEBUG_MSG("Adding Bool2! methods to provide write access to the field Bool2 (" __HERE__ ")");
    t.method("Bool2!", [](ImGuiTestGenericVars* a, bool val) -> bool { return a->Bool2 = val; });

    DEBUG_MSG("Adding Id methods  to provide read access to the field Id (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:200:29
    // signature to use in the veto list: ImGuiTestGenericVars::Id
    t.method("Id", [](const ImGuiTestGenericVars& a) -> ImGuiID { return a.Id; });
    t.method("Id", [](ImGuiTestGenericVars& a) -> ImGuiID { return a.Id; });
    t.method("Id", [](const ImGuiTestGenericVars* a) -> ImGuiID { return a->Id; });
    t.method("Id", [](ImGuiTestGenericVars* a) -> ImGuiID { return a->Id; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:200:29
    // signature to use in the veto list: ImGuiTestGenericVars::Id
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Id! methods to provide write access to the field Id (" __HERE__ ")");
    t.method("Id!", [](ImGuiTestGenericVars& a, ImGuiID val) -> ImGuiID { return a.Id = val; });

    DEBUG_MSG("Adding Id! methods to provide write access to the field Id (" __HERE__ ")");
    t.method("Id!", [](ImGuiTestGenericVars* a, ImGuiID val) -> ImGuiID { return a->Id = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ImGuiTestGenericVars>> type_;
};
std::shared_ptr<Wrapper> newJlImGuiTestGenericVars(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlImGuiTestGenericVars(module));
}
