// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlImGuiTestEngine.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<ImGuiTestOutput> : std::false_type { };
  template<> struct DefaultConstructible<ImGuiTestOutput> : std::false_type { };
}

// Class generating the wrapper for type ImGuiTestOutput
// signature to use in the veto file: ImGuiTestOutput
struct JlImGuiTestOutput: public Wrapper {

  JlImGuiTestOutput(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ImGuiTestOutput (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:383:18
    jlcxx::TypeWrapper<ImGuiTestOutput>  t = jlModule.add_type<ImGuiTestOutput>("ImGuiTestOutput");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ImGuiTestOutput>>(new jlcxx::TypeWrapper<ImGuiTestOutput>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding Status methods  to provide read access to the field Status (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:385:37
    // signature to use in the veto list: ImGuiTestOutput::Status
    t.method("Status", [](const ImGuiTestOutput& a) -> ImGuiTestStatus { return a.Status; });
    t.method("Status", [](ImGuiTestOutput& a) -> ImGuiTestStatus { return a.Status; });
    t.method("Status", [](const ImGuiTestOutput* a) -> ImGuiTestStatus { return a->Status; });
    t.method("Status", [](ImGuiTestOutput* a) -> ImGuiTestStatus { return a->Status; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:385:37
    // signature to use in the veto list: ImGuiTestOutput::Status
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Status! methods to provide write access to the field Status (" __HERE__ ")");
    t.method("Status!", [](ImGuiTestOutput& a, ImGuiTestStatus val) -> ImGuiTestStatus { return a.Status = val; });

    DEBUG_MSG("Adding Status! methods to provide write access to the field Status (" __HERE__ ")");
    t.method("Status!", [](ImGuiTestOutput* a, ImGuiTestStatus val) -> ImGuiTestStatus { return a->Status = val; });

    DEBUG_MSG("Adding Log methods  to provide read access to the field Log (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:386:37
    // signature to use in the veto list: ImGuiTestOutput::Log
    t.method("Log", [](const ImGuiTestOutput& a) -> const ImGuiTestLog& { return a.Log; });
    t.method("Log", [](ImGuiTestOutput& a) -> ImGuiTestLog& { return a.Log; });
    t.method("Log", [](const ImGuiTestOutput* a) -> const ImGuiTestLog& { return a->Log; });
    t.method("Log", [](ImGuiTestOutput* a) -> ImGuiTestLog& { return a->Log; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:386:37
    // signature to use in the veto list: ImGuiTestOutput::Log
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Log! methods to provide write access to the field Log (" __HERE__ ")");
    t.method("Log!", [](ImGuiTestOutput& a, const ImGuiTestLog& val) -> ImGuiTestLog& { return a.Log = val; });

    DEBUG_MSG("Adding Log! methods to provide write access to the field Log (" __HERE__ ")");
    t.method("Log!", [](ImGuiTestOutput* a, const ImGuiTestLog& val) -> ImGuiTestLog& { return a->Log = val; });

    DEBUG_MSG("Adding StartTime methods  to provide read access to the field StartTime (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:387:37
    // signature to use in the veto list: ImGuiTestOutput::StartTime
    t.method("StartTime", [](const ImGuiTestOutput& a) -> ImU64 { return a.StartTime; });
    t.method("StartTime", [](ImGuiTestOutput& a) -> ImU64 { return a.StartTime; });
    t.method("StartTime", [](const ImGuiTestOutput* a) -> ImU64 { return a->StartTime; });
    t.method("StartTime", [](ImGuiTestOutput* a) -> ImU64 { return a->StartTime; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:387:37
    // signature to use in the veto list: ImGuiTestOutput::StartTime
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding StartTime! methods to provide write access to the field StartTime (" __HERE__ ")");
    t.method("StartTime!", [](ImGuiTestOutput& a, ImU64 val) -> ImU64 { return a.StartTime = val; });

    DEBUG_MSG("Adding StartTime! methods to provide write access to the field StartTime (" __HERE__ ")");
    t.method("StartTime!", [](ImGuiTestOutput* a, ImU64 val) -> ImU64 { return a->StartTime = val; });

    DEBUG_MSG("Adding EndTime methods  to provide read access to the field EndTime (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:388:37
    // signature to use in the veto list: ImGuiTestOutput::EndTime
    t.method("EndTime", [](const ImGuiTestOutput& a) -> ImU64 { return a.EndTime; });
    t.method("EndTime", [](ImGuiTestOutput& a) -> ImU64 { return a.EndTime; });
    t.method("EndTime", [](const ImGuiTestOutput* a) -> ImU64 { return a->EndTime; });
    t.method("EndTime", [](ImGuiTestOutput* a) -> ImU64 { return a->EndTime; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:388:37
    // signature to use in the veto list: ImGuiTestOutput::EndTime
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding EndTime! methods to provide write access to the field EndTime (" __HERE__ ")");
    t.method("EndTime!", [](ImGuiTestOutput& a, ImU64 val) -> ImU64 { return a.EndTime = val; });

    DEBUG_MSG("Adding EndTime! methods to provide write access to the field EndTime (" __HERE__ ")");
    t.method("EndTime!", [](ImGuiTestOutput* a, ImU64 val) -> ImU64 { return a->EndTime = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ImGuiTestOutput>> type_;
};
std::shared_ptr<Wrapper> newJlImGuiTestOutput(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlImGuiTestOutput(module));
}
