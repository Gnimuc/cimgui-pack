// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlImGuiTestEngine.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<ImGuiTestLog> : std::false_type { };
  template<> struct DefaultConstructible<ImGuiTestLog> : std::false_type { };
}

// Class generating the wrapper for type ImGuiTestLog
// signature to use in the veto file: ImGuiTestLog
struct JlImGuiTestLog: public Wrapper {

  JlImGuiTestLog(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ImGuiTestLog (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:345:18
    jlcxx::TypeWrapper<ImGuiTestLog>  t = jlModule.add_type<ImGuiTestLog>("ImGuiTestLog");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ImGuiTestLog>>(new jlcxx::TypeWrapper<ImGuiTestLog>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for bool ImGuiTestLog::IsEmpty() (" __HERE__ ")");
    // signature to use in the veto list: bool ImGuiTestLog::IsEmpty()
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:353:13
    t.method("IsEmpty", static_cast<bool (ImGuiTestLog::*)()  const>(&ImGuiTestLog::IsEmpty));

    DEBUG_MSG("Adding wrapper for void ImGuiTestLog::Clear() (" __HERE__ ")");
    // signature to use in the veto list: void ImGuiTestLog::Clear()
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:354:13
    t.method("Clear", static_cast<void (ImGuiTestLog::*)() >(&ImGuiTestLog::Clear));

    DEBUG_MSG("Adding wrapper for void ImGuiTestLog::UpdateLineOffsets(ImGuiTestEngineIO *, ImGuiTestVerboseLevel, const char *) (" __HERE__ ")");
    // signature to use in the veto list: void ImGuiTestLog::UpdateLineOffsets(ImGuiTestEngineIO *, ImGuiTestVerboseLevel, const char *)
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:368:13
    t.method("UpdateLineOffsets", static_cast<void (ImGuiTestLog::*)(ImGuiTestEngineIO *, ImGuiTestVerboseLevel, const char *) >(&ImGuiTestLog::UpdateLineOffsets));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ImGuiTestLog>> type_;
};
std::shared_ptr<Wrapper> newJlImGuiTestLog(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlImGuiTestLog(module));
}
