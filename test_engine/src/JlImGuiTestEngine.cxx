// this file was auto-generated by wrapit v1.3.3
#include "Wrapper.h"

#include "jlImGuiTestEngine.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<ImGuiTestEngine> : std::false_type { };
  template<> struct DefaultConstructible<ImGuiTestEngine> : std::false_type { };
}

// Class generating the wrapper for type ImGuiTestEngine
// signature to use in the veto file: ImGuiTestEngine
struct JlImGuiTestEngine: public Wrapper {

  JlImGuiTestEngine(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ImGuiTestEngine (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:128:8
    jlcxx::TypeWrapper<ImGuiTestEngine>  t = jlModule.add_type<ImGuiTestEngine>("ImGuiTestEngine");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ImGuiTestEngine>>(new jlcxx::TypeWrapper<ImGuiTestEngine>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding IO methods  to provide read access to the field IO (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:130:33
    // signature to use in the veto list: ImGuiTestEngine::IO
    t.method("IO", [](const ImGuiTestEngine& a) -> const ImGuiTestEngineIO& { return a.IO; });
    t.method("IO", [](ImGuiTestEngine& a) -> ImGuiTestEngineIO& { return a.IO; });
    t.method("IO", [](const ImGuiTestEngine* a) -> const ImGuiTestEngineIO& { return a->IO; });
    t.method("IO", [](ImGuiTestEngine* a) -> ImGuiTestEngineIO& { return a->IO; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:130:33
    // signature to use in the veto list: ImGuiTestEngine::IO
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding IO! methods to provide write access to the field IO (" __HERE__ ")");
    t.method("IO!", [](ImGuiTestEngine& a, const ImGuiTestEngineIO& val) -> ImGuiTestEngineIO& { return a.IO = val; });

    DEBUG_MSG("Adding IO! methods to provide write access to the field IO (" __HERE__ ")");
    t.method("IO!", [](ImGuiTestEngine* a, const ImGuiTestEngineIO& val) -> ImGuiTestEngineIO& { return a->IO = val; });

    DEBUG_MSG("Adding Started methods  to provide read access to the field Started (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:134:33
    // signature to use in the veto list: ImGuiTestEngine::Started
    t.method("Started", [](const ImGuiTestEngine& a) -> bool { return a.Started; });
    t.method("Started", [](ImGuiTestEngine& a) -> bool { return a.Started; });
    t.method("Started", [](const ImGuiTestEngine* a) -> bool { return a->Started; });
    t.method("Started", [](ImGuiTestEngine* a) -> bool { return a->Started; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:134:33
    // signature to use in the veto list: ImGuiTestEngine::Started
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Started! methods to provide write access to the field Started (" __HERE__ ")");
    t.method("Started!", [](ImGuiTestEngine& a, bool val) -> bool { return a.Started = val; });

    DEBUG_MSG("Adding Started! methods to provide write access to the field Started (" __HERE__ ")");
    t.method("Started!", [](ImGuiTestEngine* a, bool val) -> bool { return a->Started = val; });

    DEBUG_MSG("Adding BatchStartTime methods  to provide read access to the field BatchStartTime (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:135:33
    // signature to use in the veto list: ImGuiTestEngine::BatchStartTime
    t.method("BatchStartTime", [](const ImGuiTestEngine& a) -> ImU64 { return a.BatchStartTime; });
    t.method("BatchStartTime", [](ImGuiTestEngine& a) -> ImU64 { return a.BatchStartTime; });
    t.method("BatchStartTime", [](const ImGuiTestEngine* a) -> ImU64 { return a->BatchStartTime; });
    t.method("BatchStartTime", [](ImGuiTestEngine* a) -> ImU64 { return a->BatchStartTime; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:135:33
    // signature to use in the veto list: ImGuiTestEngine::BatchStartTime
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding BatchStartTime! methods to provide write access to the field BatchStartTime (" __HERE__ ")");
    t.method("BatchStartTime!", [](ImGuiTestEngine& a, ImU64 val) -> ImU64 { return a.BatchStartTime = val; });

    DEBUG_MSG("Adding BatchStartTime! methods to provide write access to the field BatchStartTime (" __HERE__ ")");
    t.method("BatchStartTime!", [](ImGuiTestEngine* a, ImU64 val) -> ImU64 { return a->BatchStartTime = val; });

    DEBUG_MSG("Adding BatchEndTime methods  to provide read access to the field BatchEndTime (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:136:33
    // signature to use in the veto list: ImGuiTestEngine::BatchEndTime
    t.method("BatchEndTime", [](const ImGuiTestEngine& a) -> ImU64 { return a.BatchEndTime; });
    t.method("BatchEndTime", [](ImGuiTestEngine& a) -> ImU64 { return a.BatchEndTime; });
    t.method("BatchEndTime", [](const ImGuiTestEngine* a) -> ImU64 { return a->BatchEndTime; });
    t.method("BatchEndTime", [](ImGuiTestEngine* a) -> ImU64 { return a->BatchEndTime; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:136:33
    // signature to use in the veto list: ImGuiTestEngine::BatchEndTime
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding BatchEndTime! methods to provide write access to the field BatchEndTime (" __HERE__ ")");
    t.method("BatchEndTime!", [](ImGuiTestEngine& a, ImU64 val) -> ImU64 { return a.BatchEndTime = val; });

    DEBUG_MSG("Adding BatchEndTime! methods to provide write access to the field BatchEndTime (" __HERE__ ")");
    t.method("BatchEndTime!", [](ImGuiTestEngine* a, ImU64 val) -> ImU64 { return a->BatchEndTime = val; });

    DEBUG_MSG("Adding FrameCount methods  to provide read access to the field FrameCount (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:137:33
    // signature to use in the veto list: ImGuiTestEngine::FrameCount
    t.method("FrameCount", [](const ImGuiTestEngine& a) -> int { return a.FrameCount; });
    t.method("FrameCount", [](ImGuiTestEngine& a) -> int { return a.FrameCount; });
    t.method("FrameCount", [](const ImGuiTestEngine* a) -> int { return a->FrameCount; });
    t.method("FrameCount", [](ImGuiTestEngine* a) -> int { return a->FrameCount; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:137:33
    // signature to use in the veto list: ImGuiTestEngine::FrameCount
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding FrameCount! methods to provide write access to the field FrameCount (" __HERE__ ")");
    t.method("FrameCount!", [](ImGuiTestEngine& a, int val) -> int { return a.FrameCount = val; });

    DEBUG_MSG("Adding FrameCount! methods to provide write access to the field FrameCount (" __HERE__ ")");
    t.method("FrameCount!", [](ImGuiTestEngine* a, int val) -> int { return a->FrameCount = val; });

    DEBUG_MSG("Adding OverrideDeltaTime methods  to provide read access to the field OverrideDeltaTime (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:138:33
    // signature to use in the veto list: ImGuiTestEngine::OverrideDeltaTime
    t.method("OverrideDeltaTime", [](const ImGuiTestEngine& a) -> float { return a.OverrideDeltaTime; });
    t.method("OverrideDeltaTime", [](ImGuiTestEngine& a) -> float { return a.OverrideDeltaTime; });
    t.method("OverrideDeltaTime", [](const ImGuiTestEngine* a) -> float { return a->OverrideDeltaTime; });
    t.method("OverrideDeltaTime", [](ImGuiTestEngine* a) -> float { return a->OverrideDeltaTime; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:138:33
    // signature to use in the veto list: ImGuiTestEngine::OverrideDeltaTime
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding OverrideDeltaTime! methods to provide write access to the field OverrideDeltaTime (" __HERE__ ")");
    t.method("OverrideDeltaTime!", [](ImGuiTestEngine& a, float val) -> float { return a.OverrideDeltaTime = val; });

    DEBUG_MSG("Adding OverrideDeltaTime! methods to provide write access to the field OverrideDeltaTime (" __HERE__ ")");
    t.method("OverrideDeltaTime!", [](ImGuiTestEngine* a, float val) -> float { return a->OverrideDeltaTime = val; });

    DEBUG_MSG("Adding TestContext methods  to provide read access to the field TestContext (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:141:33
    // signature to use in the veto list: ImGuiTestEngine::TestContext
    t.method("TestContext", [](const ImGuiTestEngine& a) -> ImGuiTestContext * { return a.TestContext; });
    t.method("TestContext", [](ImGuiTestEngine& a) -> ImGuiTestContext * { return a.TestContext; });
    t.method("TestContext", [](const ImGuiTestEngine* a) -> ImGuiTestContext * { return a->TestContext; });
    t.method("TestContext", [](ImGuiTestEngine* a) -> ImGuiTestContext * { return a->TestContext; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:141:33
    // signature to use in the veto list: ImGuiTestEngine::TestContext
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding TestContext! methods to provide write access to the field TestContext (" __HERE__ ")");
    t.method("TestContext!", [](ImGuiTestEngine& a, ImGuiTestContext * val) -> ImGuiTestContext * { return a.TestContext = val; });

    DEBUG_MSG("Adding TestContext! methods to provide write access to the field TestContext (" __HERE__ ")");
    t.method("TestContext!", [](ImGuiTestEngine* a, ImGuiTestContext * val) -> ImGuiTestContext * { return a->TestContext = val; });

    DEBUG_MSG("Adding GatherTask methods  to provide read access to the field GatherTask (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:143:33
    // signature to use in the veto list: ImGuiTestEngine::GatherTask
    t.method("GatherTask", [](const ImGuiTestEngine& a) -> const ImGuiTestGatherTask& { return a.GatherTask; });
    t.method("GatherTask", [](ImGuiTestEngine& a) -> ImGuiTestGatherTask& { return a.GatherTask; });
    t.method("GatherTask", [](const ImGuiTestEngine* a) -> const ImGuiTestGatherTask& { return a->GatherTask; });
    t.method("GatherTask", [](ImGuiTestEngine* a) -> ImGuiTestGatherTask& { return a->GatherTask; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:143:33
    // signature to use in the veto list: ImGuiTestEngine::GatherTask
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding GatherTask! methods to provide write access to the field GatherTask (" __HERE__ ")");
    t.method("GatherTask!", [](ImGuiTestEngine& a, const ImGuiTestGatherTask& val) -> ImGuiTestGatherTask& { return a.GatherTask = val; });

    DEBUG_MSG("Adding GatherTask! methods to provide write access to the field GatherTask (" __HERE__ ")");
    t.method("GatherTask!", [](ImGuiTestEngine* a, const ImGuiTestGatherTask& val) -> ImGuiTestGatherTask& { return a->GatherTask = val; });

    DEBUG_MSG("Adding FindByLabelTask methods  to provide read access to the field FindByLabelTask (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:144:33
    // signature to use in the veto list: ImGuiTestEngine::FindByLabelTask
    t.method("FindByLabelTask", [](const ImGuiTestEngine& a) -> const ImGuiTestFindByLabelTask& { return a.FindByLabelTask; });
    t.method("FindByLabelTask", [](ImGuiTestEngine& a) -> ImGuiTestFindByLabelTask& { return a.FindByLabelTask; });
    t.method("FindByLabelTask", [](const ImGuiTestEngine* a) -> const ImGuiTestFindByLabelTask& { return a->FindByLabelTask; });
    t.method("FindByLabelTask", [](ImGuiTestEngine* a) -> ImGuiTestFindByLabelTask& { return a->FindByLabelTask; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:144:33
    // signature to use in the veto list: ImGuiTestEngine::FindByLabelTask
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding FindByLabelTask! methods to provide write access to the field FindByLabelTask (" __HERE__ ")");
    t.method("FindByLabelTask!", [](ImGuiTestEngine& a, const ImGuiTestFindByLabelTask& val) -> ImGuiTestFindByLabelTask& { return a.FindByLabelTask = val; });

    DEBUG_MSG("Adding FindByLabelTask! methods to provide write access to the field FindByLabelTask (" __HERE__ ")");
    t.method("FindByLabelTask!", [](ImGuiTestEngine* a, const ImGuiTestFindByLabelTask& val) -> ImGuiTestFindByLabelTask& { return a->FindByLabelTask = val; });

    DEBUG_MSG("Adding TestQueueCoroutine methods  to provide read access to the field TestQueueCoroutine (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:145:33
    // signature to use in the veto list: ImGuiTestEngine::TestQueueCoroutine
    t.method("TestQueueCoroutine", [](const ImGuiTestEngine& a) -> ImGuiTestCoroutineHandle { return a.TestQueueCoroutine; });
    t.method("TestQueueCoroutine", [](ImGuiTestEngine& a) -> ImGuiTestCoroutineHandle { return a.TestQueueCoroutine; });
    t.method("TestQueueCoroutine", [](const ImGuiTestEngine* a) -> ImGuiTestCoroutineHandle { return a->TestQueueCoroutine; });
    t.method("TestQueueCoroutine", [](ImGuiTestEngine* a) -> ImGuiTestCoroutineHandle { return a->TestQueueCoroutine; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:145:33
    // signature to use in the veto list: ImGuiTestEngine::TestQueueCoroutine
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding TestQueueCoroutine! methods to provide write access to the field TestQueueCoroutine (" __HERE__ ")");
    t.method("TestQueueCoroutine!", [](ImGuiTestEngine& a, ImGuiTestCoroutineHandle val) -> ImGuiTestCoroutineHandle { return a.TestQueueCoroutine = val; });

    DEBUG_MSG("Adding TestQueueCoroutine! methods to provide write access to the field TestQueueCoroutine (" __HERE__ ")");
    t.method("TestQueueCoroutine!", [](ImGuiTestEngine* a, ImGuiTestCoroutineHandle val) -> ImGuiTestCoroutineHandle { return a->TestQueueCoroutine = val; });

    DEBUG_MSG("Adding TestQueueCoroutineShouldExit methods  to provide read access to the field TestQueueCoroutineShouldExit (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:146:33
    // signature to use in the veto list: ImGuiTestEngine::TestQueueCoroutineShouldExit
    t.method("TestQueueCoroutineShouldExit", [](const ImGuiTestEngine& a) -> bool { return a.TestQueueCoroutineShouldExit; });
    t.method("TestQueueCoroutineShouldExit", [](ImGuiTestEngine& a) -> bool { return a.TestQueueCoroutineShouldExit; });
    t.method("TestQueueCoroutineShouldExit", [](const ImGuiTestEngine* a) -> bool { return a->TestQueueCoroutineShouldExit; });
    t.method("TestQueueCoroutineShouldExit", [](ImGuiTestEngine* a) -> bool { return a->TestQueueCoroutineShouldExit; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:146:33
    // signature to use in the veto list: ImGuiTestEngine::TestQueueCoroutineShouldExit
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding TestQueueCoroutineShouldExit! methods to provide write access to the field TestQueueCoroutineShouldExit (" __HERE__ ")");
    t.method("TestQueueCoroutineShouldExit!", [](ImGuiTestEngine& a, bool val) -> bool { return a.TestQueueCoroutineShouldExit = val; });

    DEBUG_MSG("Adding TestQueueCoroutineShouldExit! methods to provide write access to the field TestQueueCoroutineShouldExit (" __HERE__ ")");
    t.method("TestQueueCoroutineShouldExit!", [](ImGuiTestEngine* a, bool val) -> bool { return a->TestQueueCoroutineShouldExit = val; });

    DEBUG_MSG("Adding Inputs methods  to provide read access to the field Inputs (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:149:33
    // signature to use in the veto list: ImGuiTestEngine::Inputs
    t.method("Inputs", [](const ImGuiTestEngine& a) -> const ImGuiTestInputs& { return a.Inputs; });
    t.method("Inputs", [](ImGuiTestEngine& a) -> ImGuiTestInputs& { return a.Inputs; });
    t.method("Inputs", [](const ImGuiTestEngine* a) -> const ImGuiTestInputs& { return a->Inputs; });
    t.method("Inputs", [](ImGuiTestEngine* a) -> ImGuiTestInputs& { return a->Inputs; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:149:33
    // signature to use in the veto list: ImGuiTestEngine::Inputs
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Inputs! methods to provide write access to the field Inputs (" __HERE__ ")");
    t.method("Inputs!", [](ImGuiTestEngine& a, const ImGuiTestInputs& val) -> ImGuiTestInputs& { return a.Inputs = val; });

    DEBUG_MSG("Adding Inputs! methods to provide write access to the field Inputs (" __HERE__ ")");
    t.method("Inputs!", [](ImGuiTestEngine* a, const ImGuiTestInputs& val) -> ImGuiTestInputs& { return a->Inputs = val; });

    DEBUG_MSG("Adding Abort methods  to provide read access to the field Abort (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:152:33
    // signature to use in the veto list: ImGuiTestEngine::Abort
    t.method("Abort", [](const ImGuiTestEngine& a) -> bool { return a.Abort; });
    t.method("Abort", [](ImGuiTestEngine& a) -> bool { return a.Abort; });
    t.method("Abort", [](const ImGuiTestEngine* a) -> bool { return a->Abort; });
    t.method("Abort", [](ImGuiTestEngine* a) -> bool { return a->Abort; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:152:33
    // signature to use in the veto list: ImGuiTestEngine::Abort
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Abort! methods to provide write access to the field Abort (" __HERE__ ")");
    t.method("Abort!", [](ImGuiTestEngine& a, bool val) -> bool { return a.Abort = val; });

    DEBUG_MSG("Adding Abort! methods to provide write access to the field Abort (" __HERE__ ")");
    t.method("Abort!", [](ImGuiTestEngine* a, bool val) -> bool { return a->Abort = val; });

    DEBUG_MSG("Adding UiSelectAndScrollToTest methods  to provide read access to the field UiSelectAndScrollToTest (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:153:33
    // signature to use in the veto list: ImGuiTestEngine::UiSelectAndScrollToTest
    t.method("UiSelectAndScrollToTest", [](const ImGuiTestEngine& a) -> ImGuiTest * { return a.UiSelectAndScrollToTest; });
    t.method("UiSelectAndScrollToTest", [](ImGuiTestEngine& a) -> ImGuiTest * { return a.UiSelectAndScrollToTest; });
    t.method("UiSelectAndScrollToTest", [](const ImGuiTestEngine* a) -> ImGuiTest * { return a->UiSelectAndScrollToTest; });
    t.method("UiSelectAndScrollToTest", [](ImGuiTestEngine* a) -> ImGuiTest * { return a->UiSelectAndScrollToTest; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:153:33
    // signature to use in the veto list: ImGuiTestEngine::UiSelectAndScrollToTest
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding UiSelectAndScrollToTest! methods to provide write access to the field UiSelectAndScrollToTest (" __HERE__ ")");
    t.method("UiSelectAndScrollToTest!", [](ImGuiTestEngine& a, ImGuiTest * val) -> ImGuiTest * { return a.UiSelectAndScrollToTest = val; });

    DEBUG_MSG("Adding UiSelectAndScrollToTest! methods to provide write access to the field UiSelectAndScrollToTest (" __HERE__ ")");
    t.method("UiSelectAndScrollToTest!", [](ImGuiTestEngine* a, ImGuiTest * val) -> ImGuiTest * { return a->UiSelectAndScrollToTest = val; });

    DEBUG_MSG("Adding UiSelectedTest methods  to provide read access to the field UiSelectedTest (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:154:33
    // signature to use in the veto list: ImGuiTestEngine::UiSelectedTest
    t.method("UiSelectedTest", [](const ImGuiTestEngine& a) -> ImGuiTest * { return a.UiSelectedTest; });
    t.method("UiSelectedTest", [](ImGuiTestEngine& a) -> ImGuiTest * { return a.UiSelectedTest; });
    t.method("UiSelectedTest", [](const ImGuiTestEngine* a) -> ImGuiTest * { return a->UiSelectedTest; });
    t.method("UiSelectedTest", [](ImGuiTestEngine* a) -> ImGuiTest * { return a->UiSelectedTest; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:154:33
    // signature to use in the veto list: ImGuiTestEngine::UiSelectedTest
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding UiSelectedTest! methods to provide write access to the field UiSelectedTest (" __HERE__ ")");
    t.method("UiSelectedTest!", [](ImGuiTestEngine& a, ImGuiTest * val) -> ImGuiTest * { return a.UiSelectedTest = val; });

    DEBUG_MSG("Adding UiSelectedTest! methods to provide write access to the field UiSelectedTest (" __HERE__ ")");
    t.method("UiSelectedTest!", [](ImGuiTestEngine* a, ImGuiTest * val) -> ImGuiTest * { return a->UiSelectedTest = val; });

    DEBUG_MSG("Adding UiFilterTests methods  to provide read access to the field UiFilterTests (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:155:33
    // signature to use in the veto list: ImGuiTestEngine::UiFilterTests
    t.method("UiFilterTests", [](const ImGuiTestEngine& a) -> Str * { return a.UiFilterTests; });
    t.method("UiFilterTests", [](ImGuiTestEngine& a) -> Str * { return a.UiFilterTests; });
    t.method("UiFilterTests", [](const ImGuiTestEngine* a) -> Str * { return a->UiFilterTests; });
    t.method("UiFilterTests", [](ImGuiTestEngine* a) -> Str * { return a->UiFilterTests; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:155:33
    // signature to use in the veto list: ImGuiTestEngine::UiFilterTests
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding UiFilterTests! methods to provide write access to the field UiFilterTests (" __HERE__ ")");
    t.method("UiFilterTests!", [](ImGuiTestEngine& a, Str * val) -> Str * { return a.UiFilterTests = val; });

    DEBUG_MSG("Adding UiFilterTests! methods to provide write access to the field UiFilterTests (" __HERE__ ")");
    t.method("UiFilterTests!", [](ImGuiTestEngine* a, Str * val) -> Str * { return a->UiFilterTests = val; });

    DEBUG_MSG("Adding UiFilterPerfs methods  to provide read access to the field UiFilterPerfs (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:156:33
    // signature to use in the veto list: ImGuiTestEngine::UiFilterPerfs
    t.method("UiFilterPerfs", [](const ImGuiTestEngine& a) -> Str * { return a.UiFilterPerfs; });
    t.method("UiFilterPerfs", [](ImGuiTestEngine& a) -> Str * { return a.UiFilterPerfs; });
    t.method("UiFilterPerfs", [](const ImGuiTestEngine* a) -> Str * { return a->UiFilterPerfs; });
    t.method("UiFilterPerfs", [](ImGuiTestEngine* a) -> Str * { return a->UiFilterPerfs; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:156:33
    // signature to use in the veto list: ImGuiTestEngine::UiFilterPerfs
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding UiFilterPerfs! methods to provide write access to the field UiFilterPerfs (" __HERE__ ")");
    t.method("UiFilterPerfs!", [](ImGuiTestEngine& a, Str * val) -> Str * { return a.UiFilterPerfs = val; });

    DEBUG_MSG("Adding UiFilterPerfs! methods to provide write access to the field UiFilterPerfs (" __HERE__ ")");
    t.method("UiFilterPerfs!", [](ImGuiTestEngine* a, Str * val) -> Str * { return a->UiFilterPerfs = val; });

    DEBUG_MSG("Adding UiFilterByStatusMask methods  to provide read access to the field UiFilterByStatusMask (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:157:33
    // signature to use in the veto list: ImGuiTestEngine::UiFilterByStatusMask
    t.method("UiFilterByStatusMask", [](const ImGuiTestEngine& a) -> ImU32 { return a.UiFilterByStatusMask; });
    t.method("UiFilterByStatusMask", [](ImGuiTestEngine& a) -> ImU32 { return a.UiFilterByStatusMask; });
    t.method("UiFilterByStatusMask", [](const ImGuiTestEngine* a) -> ImU32 { return a->UiFilterByStatusMask; });
    t.method("UiFilterByStatusMask", [](ImGuiTestEngine* a) -> ImU32 { return a->UiFilterByStatusMask; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:157:33
    // signature to use in the veto list: ImGuiTestEngine::UiFilterByStatusMask
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding UiFilterByStatusMask! methods to provide write access to the field UiFilterByStatusMask (" __HERE__ ")");
    t.method("UiFilterByStatusMask!", [](ImGuiTestEngine& a, ImU32 val) -> ImU32 { return a.UiFilterByStatusMask = val; });

    DEBUG_MSG("Adding UiFilterByStatusMask! methods to provide write access to the field UiFilterByStatusMask (" __HERE__ ")");
    t.method("UiFilterByStatusMask!", [](ImGuiTestEngine* a, ImU32 val) -> ImU32 { return a->UiFilterByStatusMask = val; });

    DEBUG_MSG("Adding UiMetricsOpen methods  to provide read access to the field UiMetricsOpen (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:158:33
    // signature to use in the veto list: ImGuiTestEngine::UiMetricsOpen
    t.method("UiMetricsOpen", [](const ImGuiTestEngine& a) -> bool { return a.UiMetricsOpen; });
    t.method("UiMetricsOpen", [](ImGuiTestEngine& a) -> bool { return a.UiMetricsOpen; });
    t.method("UiMetricsOpen", [](const ImGuiTestEngine* a) -> bool { return a->UiMetricsOpen; });
    t.method("UiMetricsOpen", [](ImGuiTestEngine* a) -> bool { return a->UiMetricsOpen; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:158:33
    // signature to use in the veto list: ImGuiTestEngine::UiMetricsOpen
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding UiMetricsOpen! methods to provide write access to the field UiMetricsOpen (" __HERE__ ")");
    t.method("UiMetricsOpen!", [](ImGuiTestEngine& a, bool val) -> bool { return a.UiMetricsOpen = val; });

    DEBUG_MSG("Adding UiMetricsOpen! methods to provide write access to the field UiMetricsOpen (" __HERE__ ")");
    t.method("UiMetricsOpen!", [](ImGuiTestEngine* a, bool val) -> bool { return a->UiMetricsOpen = val; });

    DEBUG_MSG("Adding UiDebugLogOpen methods  to provide read access to the field UiDebugLogOpen (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:159:33
    // signature to use in the veto list: ImGuiTestEngine::UiDebugLogOpen
    t.method("UiDebugLogOpen", [](const ImGuiTestEngine& a) -> bool { return a.UiDebugLogOpen; });
    t.method("UiDebugLogOpen", [](ImGuiTestEngine& a) -> bool { return a.UiDebugLogOpen; });
    t.method("UiDebugLogOpen", [](const ImGuiTestEngine* a) -> bool { return a->UiDebugLogOpen; });
    t.method("UiDebugLogOpen", [](ImGuiTestEngine* a) -> bool { return a->UiDebugLogOpen; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:159:33
    // signature to use in the veto list: ImGuiTestEngine::UiDebugLogOpen
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding UiDebugLogOpen! methods to provide write access to the field UiDebugLogOpen (" __HERE__ ")");
    t.method("UiDebugLogOpen!", [](ImGuiTestEngine& a, bool val) -> bool { return a.UiDebugLogOpen = val; });

    DEBUG_MSG("Adding UiDebugLogOpen! methods to provide write access to the field UiDebugLogOpen (" __HERE__ ")");
    t.method("UiDebugLogOpen!", [](ImGuiTestEngine* a, bool val) -> bool { return a->UiDebugLogOpen = val; });

    DEBUG_MSG("Adding UiCaptureToolOpen methods  to provide read access to the field UiCaptureToolOpen (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:160:33
    // signature to use in the veto list: ImGuiTestEngine::UiCaptureToolOpen
    t.method("UiCaptureToolOpen", [](const ImGuiTestEngine& a) -> bool { return a.UiCaptureToolOpen; });
    t.method("UiCaptureToolOpen", [](ImGuiTestEngine& a) -> bool { return a.UiCaptureToolOpen; });
    t.method("UiCaptureToolOpen", [](const ImGuiTestEngine* a) -> bool { return a->UiCaptureToolOpen; });
    t.method("UiCaptureToolOpen", [](ImGuiTestEngine* a) -> bool { return a->UiCaptureToolOpen; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:160:33
    // signature to use in the veto list: ImGuiTestEngine::UiCaptureToolOpen
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding UiCaptureToolOpen! methods to provide write access to the field UiCaptureToolOpen (" __HERE__ ")");
    t.method("UiCaptureToolOpen!", [](ImGuiTestEngine& a, bool val) -> bool { return a.UiCaptureToolOpen = val; });

    DEBUG_MSG("Adding UiCaptureToolOpen! methods to provide write access to the field UiCaptureToolOpen (" __HERE__ ")");
    t.method("UiCaptureToolOpen!", [](ImGuiTestEngine* a, bool val) -> bool { return a->UiCaptureToolOpen = val; });

    DEBUG_MSG("Adding UiStackToolOpen methods  to provide read access to the field UiStackToolOpen (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:161:33
    // signature to use in the veto list: ImGuiTestEngine::UiStackToolOpen
    t.method("UiStackToolOpen", [](const ImGuiTestEngine& a) -> bool { return a.UiStackToolOpen; });
    t.method("UiStackToolOpen", [](ImGuiTestEngine& a) -> bool { return a.UiStackToolOpen; });
    t.method("UiStackToolOpen", [](const ImGuiTestEngine* a) -> bool { return a->UiStackToolOpen; });
    t.method("UiStackToolOpen", [](ImGuiTestEngine* a) -> bool { return a->UiStackToolOpen; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:161:33
    // signature to use in the veto list: ImGuiTestEngine::UiStackToolOpen
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding UiStackToolOpen! methods to provide write access to the field UiStackToolOpen (" __HERE__ ")");
    t.method("UiStackToolOpen!", [](ImGuiTestEngine& a, bool val) -> bool { return a.UiStackToolOpen = val; });

    DEBUG_MSG("Adding UiStackToolOpen! methods to provide write access to the field UiStackToolOpen (" __HERE__ ")");
    t.method("UiStackToolOpen!", [](ImGuiTestEngine* a, bool val) -> bool { return a->UiStackToolOpen = val; });

    DEBUG_MSG("Adding UiPerfToolOpen methods  to provide read access to the field UiPerfToolOpen (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:162:33
    // signature to use in the veto list: ImGuiTestEngine::UiPerfToolOpen
    t.method("UiPerfToolOpen", [](const ImGuiTestEngine& a) -> bool { return a.UiPerfToolOpen; });
    t.method("UiPerfToolOpen", [](ImGuiTestEngine& a) -> bool { return a.UiPerfToolOpen; });
    t.method("UiPerfToolOpen", [](const ImGuiTestEngine* a) -> bool { return a->UiPerfToolOpen; });
    t.method("UiPerfToolOpen", [](ImGuiTestEngine* a) -> bool { return a->UiPerfToolOpen; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:162:33
    // signature to use in the veto list: ImGuiTestEngine::UiPerfToolOpen
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding UiPerfToolOpen! methods to provide write access to the field UiPerfToolOpen (" __HERE__ ")");
    t.method("UiPerfToolOpen!", [](ImGuiTestEngine& a, bool val) -> bool { return a.UiPerfToolOpen = val; });

    DEBUG_MSG("Adding UiPerfToolOpen! methods to provide write access to the field UiPerfToolOpen (" __HERE__ ")");
    t.method("UiPerfToolOpen!", [](ImGuiTestEngine* a, bool val) -> bool { return a->UiPerfToolOpen = val; });

    DEBUG_MSG("Adding UiLogHeight methods  to provide read access to the field UiLogHeight (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:163:33
    // signature to use in the veto list: ImGuiTestEngine::UiLogHeight
    t.method("UiLogHeight", [](const ImGuiTestEngine& a) -> float { return a.UiLogHeight; });
    t.method("UiLogHeight", [](ImGuiTestEngine& a) -> float { return a.UiLogHeight; });
    t.method("UiLogHeight", [](const ImGuiTestEngine* a) -> float { return a->UiLogHeight; });
    t.method("UiLogHeight", [](ImGuiTestEngine* a) -> float { return a->UiLogHeight; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:163:33
    // signature to use in the veto list: ImGuiTestEngine::UiLogHeight
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding UiLogHeight! methods to provide write access to the field UiLogHeight (" __HERE__ ")");
    t.method("UiLogHeight!", [](ImGuiTestEngine& a, float val) -> float { return a.UiLogHeight = val; });

    DEBUG_MSG("Adding UiLogHeight! methods to provide write access to the field UiLogHeight (" __HERE__ ")");
    t.method("UiLogHeight!", [](ImGuiTestEngine* a, float val) -> float { return a->UiLogHeight = val; });

    DEBUG_MSG("Adding PerfRefDeltaTime methods  to provide read access to the field PerfRefDeltaTime (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:166:33
    // signature to use in the veto list: ImGuiTestEngine::PerfRefDeltaTime
    t.method("PerfRefDeltaTime", [](const ImGuiTestEngine& a) -> double { return a.PerfRefDeltaTime; });
    t.method("PerfRefDeltaTime", [](ImGuiTestEngine& a) -> double { return a.PerfRefDeltaTime; });
    t.method("PerfRefDeltaTime", [](const ImGuiTestEngine* a) -> double { return a->PerfRefDeltaTime; });
    t.method("PerfRefDeltaTime", [](ImGuiTestEngine* a) -> double { return a->PerfRefDeltaTime; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:166:33
    // signature to use in the veto list: ImGuiTestEngine::PerfRefDeltaTime
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding PerfRefDeltaTime! methods to provide write access to the field PerfRefDeltaTime (" __HERE__ ")");
    t.method("PerfRefDeltaTime!", [](ImGuiTestEngine& a, double val) -> double { return a.PerfRefDeltaTime = val; });

    DEBUG_MSG("Adding PerfRefDeltaTime! methods to provide write access to the field PerfRefDeltaTime (" __HERE__ ")");
    t.method("PerfRefDeltaTime!", [](ImGuiTestEngine* a, double val) -> double { return a->PerfRefDeltaTime = val; });

    DEBUG_MSG("Adding PerfDeltaTime100 methods  to provide read access to the field PerfDeltaTime100 (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:167:33
    // signature to use in the veto list: ImGuiTestEngine::PerfDeltaTime100
    t.method("PerfDeltaTime100", [](const ImGuiTestEngine& a) -> const ImMovingAverage<double>& { return a.PerfDeltaTime100; });
    t.method("PerfDeltaTime100", [](ImGuiTestEngine& a) -> ImMovingAverage<double>& { return a.PerfDeltaTime100; });
    t.method("PerfDeltaTime100", [](const ImGuiTestEngine* a) -> const ImMovingAverage<double>& { return a->PerfDeltaTime100; });
    t.method("PerfDeltaTime100", [](ImGuiTestEngine* a) -> ImMovingAverage<double>& { return a->PerfDeltaTime100; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:167:33
    // signature to use in the veto list: ImGuiTestEngine::PerfDeltaTime100
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding PerfDeltaTime100! methods to provide write access to the field PerfDeltaTime100 (" __HERE__ ")");
    t.method("PerfDeltaTime100!", [](ImGuiTestEngine& a, const ImMovingAverage<double>& val) -> ImMovingAverage<double>& { return a.PerfDeltaTime100 = val; });

    DEBUG_MSG("Adding PerfDeltaTime100! methods to provide write access to the field PerfDeltaTime100 (" __HERE__ ")");
    t.method("PerfDeltaTime100!", [](ImGuiTestEngine* a, const ImMovingAverage<double>& val) -> ImMovingAverage<double>& { return a->PerfDeltaTime100 = val; });

    DEBUG_MSG("Adding PerfDeltaTime500 methods  to provide read access to the field PerfDeltaTime500 (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:168:33
    // signature to use in the veto list: ImGuiTestEngine::PerfDeltaTime500
    t.method("PerfDeltaTime500", [](const ImGuiTestEngine& a) -> const ImMovingAverage<double>& { return a.PerfDeltaTime500; });
    t.method("PerfDeltaTime500", [](ImGuiTestEngine& a) -> ImMovingAverage<double>& { return a.PerfDeltaTime500; });
    t.method("PerfDeltaTime500", [](const ImGuiTestEngine* a) -> const ImMovingAverage<double>& { return a->PerfDeltaTime500; });
    t.method("PerfDeltaTime500", [](ImGuiTestEngine* a) -> ImMovingAverage<double>& { return a->PerfDeltaTime500; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:168:33
    // signature to use in the veto list: ImGuiTestEngine::PerfDeltaTime500
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding PerfDeltaTime500! methods to provide write access to the field PerfDeltaTime500 (" __HERE__ ")");
    t.method("PerfDeltaTime500!", [](ImGuiTestEngine& a, const ImMovingAverage<double>& val) -> ImMovingAverage<double>& { return a.PerfDeltaTime500 = val; });

    DEBUG_MSG("Adding PerfDeltaTime500! methods to provide write access to the field PerfDeltaTime500 (" __HERE__ ")");
    t.method("PerfDeltaTime500!", [](ImGuiTestEngine* a, const ImMovingAverage<double>& val) -> ImMovingAverage<double>& { return a->PerfDeltaTime500 = val; });

    DEBUG_MSG("Adding PerfTool methods  to provide read access to the field PerfTool (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:169:33
    // signature to use in the veto list: ImGuiTestEngine::PerfTool
    t.method("PerfTool", [](const ImGuiTestEngine& a) -> ImGuiPerfTool * { return a.PerfTool; });
    t.method("PerfTool", [](ImGuiTestEngine& a) -> ImGuiPerfTool * { return a.PerfTool; });
    t.method("PerfTool", [](const ImGuiTestEngine* a) -> ImGuiPerfTool * { return a->PerfTool; });
    t.method("PerfTool", [](ImGuiTestEngine* a) -> ImGuiPerfTool * { return a->PerfTool; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:169:33
    // signature to use in the veto list: ImGuiTestEngine::PerfTool
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding PerfTool! methods to provide write access to the field PerfTool (" __HERE__ ")");
    t.method("PerfTool!", [](ImGuiTestEngine& a, ImGuiPerfTool * val) -> ImGuiPerfTool * { return a.PerfTool = val; });

    DEBUG_MSG("Adding PerfTool! methods to provide write access to the field PerfTool (" __HERE__ ")");
    t.method("PerfTool!", [](ImGuiTestEngine* a, ImGuiPerfTool * val) -> ImGuiPerfTool * { return a->PerfTool = val; });

    DEBUG_MSG("Adding CaptureTool methods  to provide read access to the field CaptureTool (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:172:33
    // signature to use in the veto list: ImGuiTestEngine::CaptureTool
    t.method("CaptureTool", [](const ImGuiTestEngine& a) -> const ImGuiCaptureToolUI& { return a.CaptureTool; });
    t.method("CaptureTool", [](ImGuiTestEngine& a) -> ImGuiCaptureToolUI& { return a.CaptureTool; });
    t.method("CaptureTool", [](const ImGuiTestEngine* a) -> const ImGuiCaptureToolUI& { return a->CaptureTool; });
    t.method("CaptureTool", [](ImGuiTestEngine* a) -> ImGuiCaptureToolUI& { return a->CaptureTool; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:172:33
    // signature to use in the veto list: ImGuiTestEngine::CaptureTool
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding CaptureTool! methods to provide write access to the field CaptureTool (" __HERE__ ")");
    t.method("CaptureTool!", [](ImGuiTestEngine& a, const ImGuiCaptureToolUI& val) -> ImGuiCaptureToolUI& { return a.CaptureTool = val; });

    DEBUG_MSG("Adding CaptureTool! methods to provide write access to the field CaptureTool (" __HERE__ ")");
    t.method("CaptureTool!", [](ImGuiTestEngine* a, const ImGuiCaptureToolUI& val) -> ImGuiCaptureToolUI& { return a->CaptureTool = val; });

    DEBUG_MSG("Adding CaptureContext methods  to provide read access to the field CaptureContext (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:173:33
    // signature to use in the veto list: ImGuiTestEngine::CaptureContext
    t.method("CaptureContext", [](const ImGuiTestEngine& a) -> const ImGuiCaptureContext& { return a.CaptureContext; });
    t.method("CaptureContext", [](ImGuiTestEngine& a) -> ImGuiCaptureContext& { return a.CaptureContext; });
    t.method("CaptureContext", [](const ImGuiTestEngine* a) -> const ImGuiCaptureContext& { return a->CaptureContext; });
    t.method("CaptureContext", [](ImGuiTestEngine* a) -> ImGuiCaptureContext& { return a->CaptureContext; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:173:33
    // signature to use in the veto list: ImGuiTestEngine::CaptureContext
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding CaptureContext! methods to provide write access to the field CaptureContext (" __HERE__ ")");
    t.method("CaptureContext!", [](ImGuiTestEngine& a, const ImGuiCaptureContext& val) -> ImGuiCaptureContext& { return a.CaptureContext = val; });

    DEBUG_MSG("Adding CaptureContext! methods to provide write access to the field CaptureContext (" __HERE__ ")");
    t.method("CaptureContext!", [](ImGuiTestEngine* a, const ImGuiCaptureContext& val) -> ImGuiCaptureContext& { return a->CaptureContext = val; });

    DEBUG_MSG("Adding CaptureCurrentArgs methods  to provide read access to the field CaptureCurrentArgs (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:174:33
    // signature to use in the veto list: ImGuiTestEngine::CaptureCurrentArgs
    t.method("CaptureCurrentArgs", [](const ImGuiTestEngine& a) -> ImGuiCaptureArgs * { return a.CaptureCurrentArgs; });
    t.method("CaptureCurrentArgs", [](ImGuiTestEngine& a) -> ImGuiCaptureArgs * { return a.CaptureCurrentArgs; });
    t.method("CaptureCurrentArgs", [](const ImGuiTestEngine* a) -> ImGuiCaptureArgs * { return a->CaptureCurrentArgs; });
    t.method("CaptureCurrentArgs", [](ImGuiTestEngine* a) -> ImGuiCaptureArgs * { return a->CaptureCurrentArgs; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:174:33
    // signature to use in the veto list: ImGuiTestEngine::CaptureCurrentArgs
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding CaptureCurrentArgs! methods to provide write access to the field CaptureCurrentArgs (" __HERE__ ")");
    t.method("CaptureCurrentArgs!", [](ImGuiTestEngine& a, ImGuiCaptureArgs * val) -> ImGuiCaptureArgs * { return a.CaptureCurrentArgs = val; });

    DEBUG_MSG("Adding CaptureCurrentArgs! methods to provide write access to the field CaptureCurrentArgs (" __HERE__ ")");
    t.method("CaptureCurrentArgs!", [](ImGuiTestEngine* a, ImGuiCaptureArgs * val) -> ImGuiCaptureArgs * { return a->CaptureCurrentArgs = val; });

    DEBUG_MSG("Adding PostSwapCalled methods  to provide read access to the field PostSwapCalled (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:177:33
    // signature to use in the veto list: ImGuiTestEngine::PostSwapCalled
    t.method("PostSwapCalled", [](const ImGuiTestEngine& a) -> bool { return a.PostSwapCalled; });
    t.method("PostSwapCalled", [](ImGuiTestEngine& a) -> bool { return a.PostSwapCalled; });
    t.method("PostSwapCalled", [](const ImGuiTestEngine* a) -> bool { return a->PostSwapCalled; });
    t.method("PostSwapCalled", [](ImGuiTestEngine* a) -> bool { return a->PostSwapCalled; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:177:33
    // signature to use in the veto list: ImGuiTestEngine::PostSwapCalled
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding PostSwapCalled! methods to provide write access to the field PostSwapCalled (" __HERE__ ")");
    t.method("PostSwapCalled!", [](ImGuiTestEngine& a, bool val) -> bool { return a.PostSwapCalled = val; });

    DEBUG_MSG("Adding PostSwapCalled! methods to provide write access to the field PostSwapCalled (" __HERE__ ")");
    t.method("PostSwapCalled!", [](ImGuiTestEngine* a, bool val) -> bool { return a->PostSwapCalled = val; });

    DEBUG_MSG("Adding ToolDebugRebootUiContext methods  to provide read access to the field ToolDebugRebootUiContext (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:178:33
    // signature to use in the veto list: ImGuiTestEngine::ToolDebugRebootUiContext
    t.method("ToolDebugRebootUiContext", [](const ImGuiTestEngine& a) -> bool { return a.ToolDebugRebootUiContext; });
    t.method("ToolDebugRebootUiContext", [](ImGuiTestEngine& a) -> bool { return a.ToolDebugRebootUiContext; });
    t.method("ToolDebugRebootUiContext", [](const ImGuiTestEngine* a) -> bool { return a->ToolDebugRebootUiContext; });
    t.method("ToolDebugRebootUiContext", [](ImGuiTestEngine* a) -> bool { return a->ToolDebugRebootUiContext; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:178:33
    // signature to use in the veto list: ImGuiTestEngine::ToolDebugRebootUiContext
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ToolDebugRebootUiContext! methods to provide write access to the field ToolDebugRebootUiContext (" __HERE__ ")");
    t.method("ToolDebugRebootUiContext!", [](ImGuiTestEngine& a, bool val) -> bool { return a.ToolDebugRebootUiContext = val; });

    DEBUG_MSG("Adding ToolDebugRebootUiContext! methods to provide write access to the field ToolDebugRebootUiContext (" __HERE__ ")");
    t.method("ToolDebugRebootUiContext!", [](ImGuiTestEngine* a, bool val) -> bool { return a->ToolDebugRebootUiContext = val; });

    DEBUG_MSG("Adding ToolSlowDown methods  to provide read access to the field ToolSlowDown (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:179:33
    // signature to use in the veto list: ImGuiTestEngine::ToolSlowDown
    t.method("ToolSlowDown", [](const ImGuiTestEngine& a) -> bool { return a.ToolSlowDown; });
    t.method("ToolSlowDown", [](ImGuiTestEngine& a) -> bool { return a.ToolSlowDown; });
    t.method("ToolSlowDown", [](const ImGuiTestEngine* a) -> bool { return a->ToolSlowDown; });
    t.method("ToolSlowDown", [](ImGuiTestEngine* a) -> bool { return a->ToolSlowDown; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:179:33
    // signature to use in the veto list: ImGuiTestEngine::ToolSlowDown
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ToolSlowDown! methods to provide write access to the field ToolSlowDown (" __HERE__ ")");
    t.method("ToolSlowDown!", [](ImGuiTestEngine& a, bool val) -> bool { return a.ToolSlowDown = val; });

    DEBUG_MSG("Adding ToolSlowDown! methods to provide write access to the field ToolSlowDown (" __HERE__ ")");
    t.method("ToolSlowDown!", [](ImGuiTestEngine* a, bool val) -> bool { return a->ToolSlowDown = val; });

    DEBUG_MSG("Adding ToolSlowDownMs methods  to provide read access to the field ToolSlowDownMs (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:180:33
    // signature to use in the veto list: ImGuiTestEngine::ToolSlowDownMs
    t.method("ToolSlowDownMs", [](const ImGuiTestEngine& a) -> int { return a.ToolSlowDownMs; });
    t.method("ToolSlowDownMs", [](ImGuiTestEngine& a) -> int { return a.ToolSlowDownMs; });
    t.method("ToolSlowDownMs", [](const ImGuiTestEngine* a) -> int { return a->ToolSlowDownMs; });
    t.method("ToolSlowDownMs", [](ImGuiTestEngine* a) -> int { return a->ToolSlowDownMs; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:180:33
    // signature to use in the veto list: ImGuiTestEngine::ToolSlowDownMs
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ToolSlowDownMs! methods to provide write access to the field ToolSlowDownMs (" __HERE__ ")");
    t.method("ToolSlowDownMs!", [](ImGuiTestEngine& a, int val) -> int { return a.ToolSlowDownMs = val; });

    DEBUG_MSG("Adding ToolSlowDownMs! methods to provide write access to the field ToolSlowDownMs (" __HERE__ ")");
    t.method("ToolSlowDownMs!", [](ImGuiTestEngine* a, int val) -> int { return a->ToolSlowDownMs = val; });

    DEBUG_MSG("Adding BackupConfigRunSpeed methods  to provide read access to the field BackupConfigRunSpeed (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:181:33
    // signature to use in the veto list: ImGuiTestEngine::BackupConfigRunSpeed
    t.method("BackupConfigRunSpeed", [](const ImGuiTestEngine& a) -> ImGuiTestRunSpeed { return a.BackupConfigRunSpeed; });
    t.method("BackupConfigRunSpeed", [](ImGuiTestEngine& a) -> ImGuiTestRunSpeed { return a.BackupConfigRunSpeed; });
    t.method("BackupConfigRunSpeed", [](const ImGuiTestEngine* a) -> ImGuiTestRunSpeed { return a->BackupConfigRunSpeed; });
    t.method("BackupConfigRunSpeed", [](ImGuiTestEngine* a) -> ImGuiTestRunSpeed { return a->BackupConfigRunSpeed; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:181:33
    // signature to use in the veto list: ImGuiTestEngine::BackupConfigRunSpeed
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding BackupConfigRunSpeed! methods to provide write access to the field BackupConfigRunSpeed (" __HERE__ ")");
    t.method("BackupConfigRunSpeed!", [](ImGuiTestEngine& a, ImGuiTestRunSpeed val) -> ImGuiTestRunSpeed { return a.BackupConfigRunSpeed = val; });

    DEBUG_MSG("Adding BackupConfigRunSpeed! methods to provide write access to the field BackupConfigRunSpeed (" __HERE__ ")");
    t.method("BackupConfigRunSpeed!", [](ImGuiTestEngine* a, ImGuiTestRunSpeed val) -> ImGuiTestRunSpeed { return a->BackupConfigRunSpeed = val; });

    DEBUG_MSG("Adding BackupConfigNoThrottle methods  to provide read access to the field BackupConfigNoThrottle (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:182:33
    // signature to use in the veto list: ImGuiTestEngine::BackupConfigNoThrottle
    t.method("BackupConfigNoThrottle", [](const ImGuiTestEngine& a) -> bool { return a.BackupConfigNoThrottle; });
    t.method("BackupConfigNoThrottle", [](ImGuiTestEngine& a) -> bool { return a.BackupConfigNoThrottle; });
    t.method("BackupConfigNoThrottle", [](const ImGuiTestEngine* a) -> bool { return a->BackupConfigNoThrottle; });
    t.method("BackupConfigNoThrottle", [](ImGuiTestEngine* a) -> bool { return a->BackupConfigNoThrottle; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:182:33
    // signature to use in the veto list: ImGuiTestEngine::BackupConfigNoThrottle
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding BackupConfigNoThrottle! methods to provide write access to the field BackupConfigNoThrottle (" __HERE__ ")");
    t.method("BackupConfigNoThrottle!", [](ImGuiTestEngine& a, bool val) -> bool { return a.BackupConfigNoThrottle = val; });

    DEBUG_MSG("Adding BackupConfigNoThrottle! methods to provide write access to the field BackupConfigNoThrottle (" __HERE__ ")");
    t.method("BackupConfigNoThrottle!", [](ImGuiTestEngine* a, bool val) -> bool { return a->BackupConfigNoThrottle = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ImGuiTestEngine>> type_;
};
std::shared_ptr<Wrapper> newJlImGuiTestEngine(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlImGuiTestEngine(module));
}
