// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlImGuiTestEngine.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<ImGuiTestInfoTask> : std::false_type { };
  template<> struct DefaultConstructible<ImGuiTestInfoTask> : std::false_type { };
}

// Class generating the wrapper for type ImGuiTestInfoTask
// signature to use in the veto file: ImGuiTestInfoTask
struct JlImGuiTestInfoTask: public Wrapper {

  JlImGuiTestInfoTask(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ImGuiTestInfoTask (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:22:8
    jlcxx::TypeWrapper<ImGuiTestInfoTask>  t = jlModule.add_type<ImGuiTestInfoTask>("ImGuiTestInfoTask");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ImGuiTestInfoTask>>(new jlcxx::TypeWrapper<ImGuiTestInfoTask>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding ID methods  to provide read access to the field ID (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:25:29
    // signature to use in the veto list: ImGuiTestInfoTask::ID
    t.method("ID", [](const ImGuiTestInfoTask& a) -> ImGuiID { return a.ID; });
    t.method("ID", [](ImGuiTestInfoTask& a) -> ImGuiID { return a.ID; });
    t.method("ID", [](const ImGuiTestInfoTask* a) -> ImGuiID { return a->ID; });
    t.method("ID", [](ImGuiTestInfoTask* a) -> ImGuiID { return a->ID; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:25:29
    // signature to use in the veto list: ImGuiTestInfoTask::ID
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ID! methods to provide write access to the field ID (" __HERE__ ")");
    t.method("ID!", [](ImGuiTestInfoTask& a, ImGuiID val) -> ImGuiID { return a.ID = val; });

    DEBUG_MSG("Adding ID! methods to provide write access to the field ID (" __HERE__ ")");
    t.method("ID!", [](ImGuiTestInfoTask* a, ImGuiID val) -> ImGuiID { return a->ID = val; });

    DEBUG_MSG("Adding FrameCount methods  to provide read access to the field FrameCount (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:26:29
    // signature to use in the veto list: ImGuiTestInfoTask::FrameCount
    t.method("FrameCount", [](const ImGuiTestInfoTask& a) -> int { return a.FrameCount; });
    t.method("FrameCount", [](ImGuiTestInfoTask& a) -> int { return a.FrameCount; });
    t.method("FrameCount", [](const ImGuiTestInfoTask* a) -> int { return a->FrameCount; });
    t.method("FrameCount", [](ImGuiTestInfoTask* a) -> int { return a->FrameCount; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:26:29
    // signature to use in the veto list: ImGuiTestInfoTask::FrameCount
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding FrameCount! methods to provide write access to the field FrameCount (" __HERE__ ")");
    t.method("FrameCount!", [](ImGuiTestInfoTask& a, int val) -> int { return a.FrameCount = val; });

    DEBUG_MSG("Adding FrameCount! methods to provide write access to the field FrameCount (" __HERE__ ")");
    t.method("FrameCount!", [](ImGuiTestInfoTask* a, int val) -> int { return a->FrameCount = val; });

    DEBUG_MSG("Adding Result methods  to provide read access to the field Result (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:30:29
    // signature to use in the veto list: ImGuiTestInfoTask::Result
    t.method("Result", [](const ImGuiTestInfoTask& a) -> const ImGuiTestItemInfo& { return a.Result; });
    t.method("Result", [](ImGuiTestInfoTask& a) -> ImGuiTestItemInfo& { return a.Result; });
    t.method("Result", [](const ImGuiTestInfoTask* a) -> const ImGuiTestItemInfo& { return a->Result; });
    t.method("Result", [](ImGuiTestInfoTask* a) -> ImGuiTestItemInfo& { return a->Result; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:30:29
    // signature to use in the veto list: ImGuiTestInfoTask::Result
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Result! methods to provide write access to the field Result (" __HERE__ ")");
    t.method("Result!", [](ImGuiTestInfoTask& a, const ImGuiTestItemInfo& val) -> ImGuiTestItemInfo& { return a.Result = val; });

    DEBUG_MSG("Adding Result! methods to provide write access to the field Result (" __HERE__ ")");
    t.method("Result!", [](ImGuiTestInfoTask* a, const ImGuiTestItemInfo& val) -> ImGuiTestItemInfo& { return a->Result = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ImGuiTestInfoTask>> type_;
};
std::shared_ptr<Wrapper> newJlImGuiTestInfoTask(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlImGuiTestInfoTask(module));
}
