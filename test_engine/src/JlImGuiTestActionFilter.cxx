// this file was auto-generated by wrapit v1.3.3
#include "Wrapper.h"

#include "jlImGuiTestEngine.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<ImGuiTestActionFilter> : std::false_type { };
  template<> struct DefaultConstructible<ImGuiTestActionFilter> : std::false_type { };
}

// Class generating the wrapper for type ImGuiTestActionFilter
// signature to use in the veto file: ImGuiTestActionFilter
struct JlImGuiTestActionFilter: public Wrapper {

  JlImGuiTestActionFilter(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ImGuiTestActionFilter (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:136:18
    jlcxx::TypeWrapper<ImGuiTestActionFilter>  t = jlModule.add_type<ImGuiTestActionFilter>("ImGuiTestActionFilter");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ImGuiTestActionFilter>>(new jlcxx::TypeWrapper<ImGuiTestActionFilter>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding MaxDepth methods  to provide read access to the field MaxDepth (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:138:29
    // signature to use in the veto list: ImGuiTestActionFilter::MaxDepth
    t.method("MaxDepth", [](const ImGuiTestActionFilter& a) -> int { return a.MaxDepth; });
    t.method("MaxDepth", [](ImGuiTestActionFilter& a) -> int { return a.MaxDepth; });
    t.method("MaxDepth", [](const ImGuiTestActionFilter* a) -> int { return a->MaxDepth; });
    t.method("MaxDepth", [](ImGuiTestActionFilter* a) -> int { return a->MaxDepth; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:138:29
    // signature to use in the veto list: ImGuiTestActionFilter::MaxDepth
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding MaxDepth! methods to provide write access to the field MaxDepth (" __HERE__ ")");
    t.method("MaxDepth!", [](ImGuiTestActionFilter& a, int val) -> int { return a.MaxDepth = val; });

    DEBUG_MSG("Adding MaxDepth! methods to provide write access to the field MaxDepth (" __HERE__ ")");
    t.method("MaxDepth!", [](ImGuiTestActionFilter* a, int val) -> int { return a->MaxDepth = val; });

    DEBUG_MSG("Adding MaxPasses methods  to provide read access to the field MaxPasses (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:139:29
    // signature to use in the veto list: ImGuiTestActionFilter::MaxPasses
    t.method("MaxPasses", [](const ImGuiTestActionFilter& a) -> int { return a.MaxPasses; });
    t.method("MaxPasses", [](ImGuiTestActionFilter& a) -> int { return a.MaxPasses; });
    t.method("MaxPasses", [](const ImGuiTestActionFilter* a) -> int { return a->MaxPasses; });
    t.method("MaxPasses", [](ImGuiTestActionFilter* a) -> int { return a->MaxPasses; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:139:29
    // signature to use in the veto list: ImGuiTestActionFilter::MaxPasses
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding MaxPasses! methods to provide write access to the field MaxPasses (" __HERE__ ")");
    t.method("MaxPasses!", [](ImGuiTestActionFilter& a, int val) -> int { return a.MaxPasses = val; });

    DEBUG_MSG("Adding MaxPasses! methods to provide write access to the field MaxPasses (" __HERE__ ")");
    t.method("MaxPasses!", [](ImGuiTestActionFilter* a, int val) -> int { return a->MaxPasses = val; });

    DEBUG_MSG("Adding MaxItemCountPerDepth methods  to provide read access to the field MaxItemCountPerDepth (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:140:29
    // signature to use in the veto list: ImGuiTestActionFilter::MaxItemCountPerDepth
    t.method("MaxItemCountPerDepth", [](const ImGuiTestActionFilter& a) -> const int * { return a.MaxItemCountPerDepth; });
    t.method("MaxItemCountPerDepth", [](const ImGuiTestActionFilter* a) -> const int * { return a->MaxItemCountPerDepth; });

    DEBUG_MSG("Adding RequireAllStatusFlags methods  to provide read access to the field RequireAllStatusFlags (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:141:29
    // signature to use in the veto list: ImGuiTestActionFilter::RequireAllStatusFlags
    t.method("RequireAllStatusFlags", [](const ImGuiTestActionFilter& a) -> ImGuiItemStatusFlags { return a.RequireAllStatusFlags; });
    t.method("RequireAllStatusFlags", [](ImGuiTestActionFilter& a) -> ImGuiItemStatusFlags { return a.RequireAllStatusFlags; });
    t.method("RequireAllStatusFlags", [](const ImGuiTestActionFilter* a) -> ImGuiItemStatusFlags { return a->RequireAllStatusFlags; });
    t.method("RequireAllStatusFlags", [](ImGuiTestActionFilter* a) -> ImGuiItemStatusFlags { return a->RequireAllStatusFlags; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:141:29
    // signature to use in the veto list: ImGuiTestActionFilter::RequireAllStatusFlags
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding RequireAllStatusFlags! methods to provide write access to the field RequireAllStatusFlags (" __HERE__ ")");
    t.method("RequireAllStatusFlags!", [](ImGuiTestActionFilter& a, ImGuiItemStatusFlags val) -> ImGuiItemStatusFlags { return a.RequireAllStatusFlags = val; });

    DEBUG_MSG("Adding RequireAllStatusFlags! methods to provide write access to the field RequireAllStatusFlags (" __HERE__ ")");
    t.method("RequireAllStatusFlags!", [](ImGuiTestActionFilter* a, ImGuiItemStatusFlags val) -> ImGuiItemStatusFlags { return a->RequireAllStatusFlags = val; });

    DEBUG_MSG("Adding RequireAnyStatusFlags methods  to provide read access to the field RequireAnyStatusFlags (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:142:29
    // signature to use in the veto list: ImGuiTestActionFilter::RequireAnyStatusFlags
    t.method("RequireAnyStatusFlags", [](const ImGuiTestActionFilter& a) -> ImGuiItemStatusFlags { return a.RequireAnyStatusFlags; });
    t.method("RequireAnyStatusFlags", [](ImGuiTestActionFilter& a) -> ImGuiItemStatusFlags { return a.RequireAnyStatusFlags; });
    t.method("RequireAnyStatusFlags", [](const ImGuiTestActionFilter* a) -> ImGuiItemStatusFlags { return a->RequireAnyStatusFlags; });
    t.method("RequireAnyStatusFlags", [](ImGuiTestActionFilter* a) -> ImGuiItemStatusFlags { return a->RequireAnyStatusFlags; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:142:29
    // signature to use in the veto list: ImGuiTestActionFilter::RequireAnyStatusFlags
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding RequireAnyStatusFlags! methods to provide write access to the field RequireAnyStatusFlags (" __HERE__ ")");
    t.method("RequireAnyStatusFlags!", [](ImGuiTestActionFilter& a, ImGuiItemStatusFlags val) -> ImGuiItemStatusFlags { return a.RequireAnyStatusFlags = val; });

    DEBUG_MSG("Adding RequireAnyStatusFlags! methods to provide write access to the field RequireAnyStatusFlags (" __HERE__ ")");
    t.method("RequireAnyStatusFlags!", [](ImGuiTestActionFilter* a, ImGuiItemStatusFlags val) -> ImGuiItemStatusFlags { return a->RequireAnyStatusFlags = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ImGuiTestActionFilter>> type_;
};
std::shared_ptr<Wrapper> newJlImGuiTestActionFilter(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlImGuiTestActionFilter(module));
}
