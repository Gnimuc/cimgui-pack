// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlImGuiTestEngine.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<ImGuiPerfTool> : std::false_type { };
  template<> struct DefaultConstructible<ImGuiPerfTool> : std::false_type { };
}

// Class generating the wrapper for type ImGuiPerfTool
// signature to use in the veto file: ImGuiPerfTool
struct JlImGuiPerfTool: public Wrapper {

  JlImGuiPerfTool(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ImGuiPerfTool (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:68:18
    jlcxx::TypeWrapper<ImGuiPerfTool>  t = jlModule.add_type<ImGuiPerfTool>("ImGuiPerfTool");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ImGuiPerfTool>>(new jlcxx::TypeWrapper<ImGuiPerfTool>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void ImGuiPerfTool::Clear() (" __HERE__ ")");
    // signature to use in the veto list: void ImGuiPerfTool::Clear()
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:108:17
    t.method("Clear", static_cast<void (ImGuiPerfTool::*)() >(&ImGuiPerfTool::Clear));

    DEBUG_MSG("Adding wrapper for bool ImGuiPerfTool::LoadCSV(const char *) (" __HERE__ ")");
    // signature to use in the veto list: bool ImGuiPerfTool::LoadCSV(const char *)
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:109:17
    t.method("LoadCSV", static_cast<bool (ImGuiPerfTool::*)(const char *) >(&ImGuiPerfTool::LoadCSV));
    t.method("LoadCSV", [](ImGuiPerfTool& a)->bool { return a.LoadCSV(); });
    t.method("LoadCSV", [](ImGuiPerfTool* a)->bool { return a->LoadCSV(); });

    DEBUG_MSG("Adding wrapper for void ImGuiPerfTool::AddEntry(ImGuiPerfToolEntry *) (" __HERE__ ")");
    // signature to use in the veto list: void ImGuiPerfTool::AddEntry(ImGuiPerfToolEntry *)
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:110:17
    t.method("AddEntry", static_cast<void (ImGuiPerfTool::*)(ImGuiPerfToolEntry *) >(&ImGuiPerfTool::AddEntry));

    DEBUG_MSG("Adding wrapper for void ImGuiPerfTool::ShowPerfToolWindow(ImGuiTestEngine *, bool *) (" __HERE__ ")");
    // signature to use in the veto list: void ImGuiPerfTool::ShowPerfToolWindow(ImGuiTestEngine *, bool *)
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:112:17
    t.method("ShowPerfToolWindow", static_cast<void (ImGuiPerfTool::*)(ImGuiTestEngine *, bool *) >(&ImGuiPerfTool::ShowPerfToolWindow));

    DEBUG_MSG("Adding wrapper for void ImGuiPerfTool::ViewOnly(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void ImGuiPerfTool::ViewOnly(const char *)
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:113:17
    t.method("ViewOnly", static_cast<void (ImGuiPerfTool::*)(const char *) >(&ImGuiPerfTool::ViewOnly));

    DEBUG_MSG("Adding wrapper for void ImGuiPerfTool::ViewOnly(const char **) (" __HERE__ ")");
    // signature to use in the veto list: void ImGuiPerfTool::ViewOnly(const char **)
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:114:17
    t.method("ViewOnly", static_cast<void (ImGuiPerfTool::*)(const char **) >(&ImGuiPerfTool::ViewOnly));

    DEBUG_MSG("Adding wrapper for ImGuiPerfToolEntry * ImGuiPerfTool::GetEntryByBatchIdx(int, const char *) (" __HERE__ ")");
    // signature to use in the veto list: ImGuiPerfToolEntry * ImGuiPerfTool::GetEntryByBatchIdx(int, const char *)
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:115:25
    t.method("GetEntryByBatchIdx", static_cast<ImGuiPerfToolEntry * (ImGuiPerfTool::*)(int, const char *) >(&ImGuiPerfTool::GetEntryByBatchIdx));
    t.method("GetEntryByBatchIdx", [](ImGuiPerfTool& a, int arg0)->ImGuiPerfToolEntry * { return a.GetEntryByBatchIdx(arg0); });
    t.method("GetEntryByBatchIdx", [](ImGuiPerfTool* a, int arg0)->ImGuiPerfToolEntry * { return a->GetEntryByBatchIdx(arg0); });

    DEBUG_MSG("Adding wrapper for bool ImGuiPerfTool::SaveHtmlReport(const char *, const char *) (" __HERE__ ")");
    // signature to use in the veto list: bool ImGuiPerfTool::SaveHtmlReport(const char *, const char *)
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:116:17
    t.method("SaveHtmlReport", static_cast<bool (ImGuiPerfTool::*)(const char *, const char *) >(&ImGuiPerfTool::SaveHtmlReport));
    t.method("SaveHtmlReport", [](ImGuiPerfTool& a, const char * arg0)->bool { return a.SaveHtmlReport(arg0); });
    t.method("SaveHtmlReport", [](ImGuiPerfTool* a, const char * arg0)->bool { return a->SaveHtmlReport(arg0); });

    DEBUG_MSG("Adding wrapper for bool ImGuiPerfTool::Empty() (" __HERE__ ")");
    // signature to use in the veto list: bool ImGuiPerfTool::Empty()
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:117:17
    t.method("Empty", static_cast<bool (ImGuiPerfTool::*)() >(&ImGuiPerfTool::Empty));

    DEBUG_MSG("Adding wrapper for void ImGuiPerfTool::_Rebuild() (" __HERE__ ")");
    // signature to use in the veto list: void ImGuiPerfTool::_Rebuild()
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:119:17
    t.method("_Rebuild", static_cast<void (ImGuiPerfTool::*)() >(&ImGuiPerfTool::_Rebuild));

    DEBUG_MSG("Adding wrapper for bool ImGuiPerfTool::_IsVisibleBuild(ImGuiPerfToolBatch *) (" __HERE__ ")");
    // signature to use in the veto list: bool ImGuiPerfTool::_IsVisibleBuild(ImGuiPerfToolBatch *)
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:120:17
    t.method("_IsVisibleBuild", static_cast<bool (ImGuiPerfTool::*)(ImGuiPerfToolBatch *) >(&ImGuiPerfTool::_IsVisibleBuild));

    DEBUG_MSG("Adding wrapper for bool ImGuiPerfTool::_IsVisibleBuild(ImGuiPerfToolEntry *) (" __HERE__ ")");
    // signature to use in the veto list: bool ImGuiPerfTool::_IsVisibleBuild(ImGuiPerfToolEntry *)
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:121:17
    t.method("_IsVisibleBuild", static_cast<bool (ImGuiPerfTool::*)(ImGuiPerfToolEntry *) >(&ImGuiPerfTool::_IsVisibleBuild));

    DEBUG_MSG("Adding wrapper for bool ImGuiPerfTool::_IsVisibleTest(const char *) (" __HERE__ ")");
    // signature to use in the veto list: bool ImGuiPerfTool::_IsVisibleTest(const char *)
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:122:17
    t.method("_IsVisibleTest", static_cast<bool (ImGuiPerfTool::*)(const char *) >(&ImGuiPerfTool::_IsVisibleTest));

    DEBUG_MSG("Adding wrapper for void ImGuiPerfTool::_CalculateLegendAlignment() (" __HERE__ ")");
    // signature to use in the veto list: void ImGuiPerfTool::_CalculateLegendAlignment()
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:123:17
    t.method("_CalculateLegendAlignment", static_cast<void (ImGuiPerfTool::*)() >(&ImGuiPerfTool::_CalculateLegendAlignment));

    DEBUG_MSG("Adding wrapper for void ImGuiPerfTool::_ShowEntriesPlot() (" __HERE__ ")");
    // signature to use in the veto list: void ImGuiPerfTool::_ShowEntriesPlot()
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:124:17
    t.method("_ShowEntriesPlot", static_cast<void (ImGuiPerfTool::*)() >(&ImGuiPerfTool::_ShowEntriesPlot));

    DEBUG_MSG("Adding wrapper for void ImGuiPerfTool::_ShowEntriesTable() (" __HERE__ ")");
    // signature to use in the veto list: void ImGuiPerfTool::_ShowEntriesTable()
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:125:17
    t.method("_ShowEntriesTable", static_cast<void (ImGuiPerfTool::*)() >(&ImGuiPerfTool::_ShowEntriesTable));

    DEBUG_MSG("Adding wrapper for void ImGuiPerfTool::_SetBaseline(int) (" __HERE__ ")");
    // signature to use in the veto list: void ImGuiPerfTool::_SetBaseline(int)
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:126:17
    t.method("_SetBaseline", static_cast<void (ImGuiPerfTool::*)(int) >(&ImGuiPerfTool::_SetBaseline));

    DEBUG_MSG("Adding wrapper for void ImGuiPerfTool::_AddSettingsHandler() (" __HERE__ ")");
    // signature to use in the veto list: void ImGuiPerfTool::_AddSettingsHandler()
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:127:17
    t.method("_AddSettingsHandler", static_cast<void (ImGuiPerfTool::*)() >(&ImGuiPerfTool::_AddSettingsHandler));

    DEBUG_MSG("Adding wrapper for void ImGuiPerfTool::_UnpackSortedKey(ImU64, int *, int *, int *) (" __HERE__ ")");
    // signature to use in the veto list: void ImGuiPerfTool::_UnpackSortedKey(ImU64, int *, int *, int *)
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:128:17
    t.method("_UnpackSortedKey", static_cast<void (ImGuiPerfTool::*)(ImU64, int *, int *, int *) >(&ImGuiPerfTool::_UnpackSortedKey));
    t.method("_UnpackSortedKey", [](ImGuiPerfTool& a, ImU64 arg0, int * arg1, int * arg2)->void { a._UnpackSortedKey(arg0, arg1, arg2); });
    t.method("_UnpackSortedKey", [](ImGuiPerfTool* a, ImU64 arg0, int * arg1, int * arg2)->void { a->_UnpackSortedKey(arg0, arg1, arg2); });

    DEBUG_MSG("Adding _NumVisibleBuilds methods  to provide read access to the field _NumVisibleBuilds (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:75:33
    // signature to use in the veto list: ImGuiPerfTool::_NumVisibleBuilds
    t.method("_NumVisibleBuilds", [](const ImGuiPerfTool& a) -> int { return a._NumVisibleBuilds; });
    t.method("_NumVisibleBuilds", [](ImGuiPerfTool& a) -> int { return a._NumVisibleBuilds; });
    t.method("_NumVisibleBuilds", [](const ImGuiPerfTool* a) -> int { return a->_NumVisibleBuilds; });
    t.method("_NumVisibleBuilds", [](ImGuiPerfTool* a) -> int { return a->_NumVisibleBuilds; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:75:33
    // signature to use in the veto list: ImGuiPerfTool::_NumVisibleBuilds
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding _NumVisibleBuilds! methods to provide write access to the field _NumVisibleBuilds (" __HERE__ ")");
    t.method("_NumVisibleBuilds!", [](ImGuiPerfTool& a, int val) -> int { return a._NumVisibleBuilds = val; });

    DEBUG_MSG("Adding _NumVisibleBuilds! methods to provide write access to the field _NumVisibleBuilds (" __HERE__ ")");
    t.method("_NumVisibleBuilds!", [](ImGuiPerfTool* a, int val) -> int { return a->_NumVisibleBuilds = val; });

    DEBUG_MSG("Adding _NumUniqueBuilds methods  to provide read access to the field _NumUniqueBuilds (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:76:33
    // signature to use in the veto list: ImGuiPerfTool::_NumUniqueBuilds
    t.method("_NumUniqueBuilds", [](const ImGuiPerfTool& a) -> int { return a._NumUniqueBuilds; });
    t.method("_NumUniqueBuilds", [](ImGuiPerfTool& a) -> int { return a._NumUniqueBuilds; });
    t.method("_NumUniqueBuilds", [](const ImGuiPerfTool* a) -> int { return a->_NumUniqueBuilds; });
    t.method("_NumUniqueBuilds", [](ImGuiPerfTool* a) -> int { return a->_NumUniqueBuilds; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:76:33
    // signature to use in the veto list: ImGuiPerfTool::_NumUniqueBuilds
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding _NumUniqueBuilds! methods to provide write access to the field _NumUniqueBuilds (" __HERE__ ")");
    t.method("_NumUniqueBuilds!", [](ImGuiPerfTool& a, int val) -> int { return a._NumUniqueBuilds = val; });

    DEBUG_MSG("Adding _NumUniqueBuilds! methods to provide write access to the field _NumUniqueBuilds (" __HERE__ ")");
    t.method("_NumUniqueBuilds!", [](ImGuiPerfTool* a, int val) -> int { return a->_NumUniqueBuilds = val; });

    DEBUG_MSG("Adding _DisplayType methods  to provide read access to the field _DisplayType (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:77:33
    // signature to use in the veto list: ImGuiPerfTool::_DisplayType
    t.method("_DisplayType", [](const ImGuiPerfTool& a) -> ImGuiPerfToolDisplayType { return a._DisplayType; });
    t.method("_DisplayType", [](ImGuiPerfTool& a) -> ImGuiPerfToolDisplayType { return a._DisplayType; });
    t.method("_DisplayType", [](const ImGuiPerfTool* a) -> ImGuiPerfToolDisplayType { return a->_DisplayType; });
    t.method("_DisplayType", [](ImGuiPerfTool* a) -> ImGuiPerfToolDisplayType { return a->_DisplayType; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:77:33
    // signature to use in the veto list: ImGuiPerfTool::_DisplayType
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding _DisplayType! methods to provide write access to the field _DisplayType (" __HERE__ ")");
    t.method("_DisplayType!", [](ImGuiPerfTool& a, ImGuiPerfToolDisplayType val) -> ImGuiPerfToolDisplayType { return a._DisplayType = val; });

    DEBUG_MSG("Adding _DisplayType! methods to provide write access to the field _DisplayType (" __HERE__ ")");
    t.method("_DisplayType!", [](ImGuiPerfTool* a, ImGuiPerfToolDisplayType val) -> ImGuiPerfToolDisplayType { return a->_DisplayType = val; });

    DEBUG_MSG("Adding _BaselineBatchIndex methods  to provide read access to the field _BaselineBatchIndex (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:78:33
    // signature to use in the veto list: ImGuiPerfTool::_BaselineBatchIndex
    t.method("_BaselineBatchIndex", [](const ImGuiPerfTool& a) -> int { return a._BaselineBatchIndex; });
    t.method("_BaselineBatchIndex", [](ImGuiPerfTool& a) -> int { return a._BaselineBatchIndex; });
    t.method("_BaselineBatchIndex", [](const ImGuiPerfTool* a) -> int { return a->_BaselineBatchIndex; });
    t.method("_BaselineBatchIndex", [](ImGuiPerfTool* a) -> int { return a->_BaselineBatchIndex; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:78:33
    // signature to use in the veto list: ImGuiPerfTool::_BaselineBatchIndex
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding _BaselineBatchIndex! methods to provide write access to the field _BaselineBatchIndex (" __HERE__ ")");
    t.method("_BaselineBatchIndex!", [](ImGuiPerfTool& a, int val) -> int { return a._BaselineBatchIndex = val; });

    DEBUG_MSG("Adding _BaselineBatchIndex! methods to provide write access to the field _BaselineBatchIndex (" __HERE__ ")");
    t.method("_BaselineBatchIndex!", [](ImGuiPerfTool* a, int val) -> int { return a->_BaselineBatchIndex = val; });

    DEBUG_MSG("Adding _BaselineTimestamp methods  to provide read access to the field _BaselineTimestamp (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:79:33
    // signature to use in the veto list: ImGuiPerfTool::_BaselineTimestamp
    t.method("_BaselineTimestamp", [](const ImGuiPerfTool& a) -> ImU64 { return a._BaselineTimestamp; });
    t.method("_BaselineTimestamp", [](ImGuiPerfTool& a) -> ImU64 { return a._BaselineTimestamp; });
    t.method("_BaselineTimestamp", [](const ImGuiPerfTool* a) -> ImU64 { return a->_BaselineTimestamp; });
    t.method("_BaselineTimestamp", [](ImGuiPerfTool* a) -> ImU64 { return a->_BaselineTimestamp; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:79:33
    // signature to use in the veto list: ImGuiPerfTool::_BaselineTimestamp
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding _BaselineTimestamp! methods to provide write access to the field _BaselineTimestamp (" __HERE__ ")");
    t.method("_BaselineTimestamp!", [](ImGuiPerfTool& a, ImU64 val) -> ImU64 { return a._BaselineTimestamp = val; });

    DEBUG_MSG("Adding _BaselineTimestamp! methods to provide write access to the field _BaselineTimestamp (" __HERE__ ")");
    t.method("_BaselineTimestamp!", [](ImGuiPerfTool* a, ImU64 val) -> ImU64 { return a->_BaselineTimestamp = val; });

    DEBUG_MSG("Adding _BaselineBuildId methods  to provide read access to the field _BaselineBuildId (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:80:33
    // signature to use in the veto list: ImGuiPerfTool::_BaselineBuildId
    t.method("_BaselineBuildId", [](const ImGuiPerfTool& a) -> ImU64 { return a._BaselineBuildId; });
    t.method("_BaselineBuildId", [](ImGuiPerfTool& a) -> ImU64 { return a._BaselineBuildId; });
    t.method("_BaselineBuildId", [](const ImGuiPerfTool* a) -> ImU64 { return a->_BaselineBuildId; });
    t.method("_BaselineBuildId", [](ImGuiPerfTool* a) -> ImU64 { return a->_BaselineBuildId; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:80:33
    // signature to use in the veto list: ImGuiPerfTool::_BaselineBuildId
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding _BaselineBuildId! methods to provide write access to the field _BaselineBuildId (" __HERE__ ")");
    t.method("_BaselineBuildId!", [](ImGuiPerfTool& a, ImU64 val) -> ImU64 { return a._BaselineBuildId = val; });

    DEBUG_MSG("Adding _BaselineBuildId! methods to provide write access to the field _BaselineBuildId (" __HERE__ ")");
    t.method("_BaselineBuildId!", [](ImGuiPerfTool* a, ImU64 val) -> ImU64 { return a->_BaselineBuildId = val; });

    DEBUG_MSG("Adding _InfoTableHeight methods  to provide read access to the field _InfoTableHeight (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:84:33
    // signature to use in the veto list: ImGuiPerfTool::_InfoTableHeight
    t.method("_InfoTableHeight", [](const ImGuiPerfTool& a) -> float { return a._InfoTableHeight; });
    t.method("_InfoTableHeight", [](ImGuiPerfTool& a) -> float { return a._InfoTableHeight; });
    t.method("_InfoTableHeight", [](const ImGuiPerfTool* a) -> float { return a->_InfoTableHeight; });
    t.method("_InfoTableHeight", [](ImGuiPerfTool* a) -> float { return a->_InfoTableHeight; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:84:33
    // signature to use in the veto list: ImGuiPerfTool::_InfoTableHeight
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding _InfoTableHeight! methods to provide write access to the field _InfoTableHeight (" __HERE__ ")");
    t.method("_InfoTableHeight!", [](ImGuiPerfTool& a, float val) -> float { return a._InfoTableHeight = val; });

    DEBUG_MSG("Adding _InfoTableHeight! methods to provide write access to the field _InfoTableHeight (" __HERE__ ")");
    t.method("_InfoTableHeight!", [](ImGuiPerfTool* a, float val) -> float { return a->_InfoTableHeight = val; });

    DEBUG_MSG("Adding _AlignStress methods  to provide read access to the field _AlignStress (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:85:33
    // signature to use in the veto list: ImGuiPerfTool::_AlignStress
    t.method("_AlignStress", [](const ImGuiPerfTool& a) -> int { return a._AlignStress; });
    t.method("_AlignStress", [](ImGuiPerfTool& a) -> int { return a._AlignStress; });
    t.method("_AlignStress", [](const ImGuiPerfTool* a) -> int { return a->_AlignStress; });
    t.method("_AlignStress", [](ImGuiPerfTool* a) -> int { return a->_AlignStress; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:85:33
    // signature to use in the veto list: ImGuiPerfTool::_AlignStress
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding _AlignStress! methods to provide write access to the field _AlignStress (" __HERE__ ")");
    t.method("_AlignStress!", [](ImGuiPerfTool& a, int val) -> int { return a._AlignStress = val; });

    DEBUG_MSG("Adding _AlignStress! methods to provide write access to the field _AlignStress (" __HERE__ ")");
    t.method("_AlignStress!", [](ImGuiPerfTool* a, int val) -> int { return a->_AlignStress = val; });

    DEBUG_MSG("Adding _AlignType methods  to provide read access to the field _AlignType (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:86:33
    // signature to use in the veto list: ImGuiPerfTool::_AlignType
    t.method("_AlignType", [](const ImGuiPerfTool& a) -> int { return a._AlignType; });
    t.method("_AlignType", [](ImGuiPerfTool& a) -> int { return a._AlignType; });
    t.method("_AlignType", [](const ImGuiPerfTool* a) -> int { return a->_AlignType; });
    t.method("_AlignType", [](ImGuiPerfTool* a) -> int { return a->_AlignType; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:86:33
    // signature to use in the veto list: ImGuiPerfTool::_AlignType
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding _AlignType! methods to provide write access to the field _AlignType (" __HERE__ ")");
    t.method("_AlignType!", [](ImGuiPerfTool& a, int val) -> int { return a._AlignType = val; });

    DEBUG_MSG("Adding _AlignType! methods to provide write access to the field _AlignType (" __HERE__ ")");
    t.method("_AlignType!", [](ImGuiPerfTool* a, int val) -> int { return a->_AlignType = val; });

    DEBUG_MSG("Adding _AlignOs methods  to provide read access to the field _AlignOs (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:87:33
    // signature to use in the veto list: ImGuiPerfTool::_AlignOs
    t.method("_AlignOs", [](const ImGuiPerfTool& a) -> int { return a._AlignOs; });
    t.method("_AlignOs", [](ImGuiPerfTool& a) -> int { return a._AlignOs; });
    t.method("_AlignOs", [](const ImGuiPerfTool* a) -> int { return a->_AlignOs; });
    t.method("_AlignOs", [](ImGuiPerfTool* a) -> int { return a->_AlignOs; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:87:33
    // signature to use in the veto list: ImGuiPerfTool::_AlignOs
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding _AlignOs! methods to provide write access to the field _AlignOs (" __HERE__ ")");
    t.method("_AlignOs!", [](ImGuiPerfTool& a, int val) -> int { return a._AlignOs = val; });

    DEBUG_MSG("Adding _AlignOs! methods to provide write access to the field _AlignOs (" __HERE__ ")");
    t.method("_AlignOs!", [](ImGuiPerfTool* a, int val) -> int { return a->_AlignOs = val; });

    DEBUG_MSG("Adding _AlignCpu methods  to provide read access to the field _AlignCpu (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:88:33
    // signature to use in the veto list: ImGuiPerfTool::_AlignCpu
    t.method("_AlignCpu", [](const ImGuiPerfTool& a) -> int { return a._AlignCpu; });
    t.method("_AlignCpu", [](ImGuiPerfTool& a) -> int { return a._AlignCpu; });
    t.method("_AlignCpu", [](const ImGuiPerfTool* a) -> int { return a->_AlignCpu; });
    t.method("_AlignCpu", [](ImGuiPerfTool* a) -> int { return a->_AlignCpu; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:88:33
    // signature to use in the veto list: ImGuiPerfTool::_AlignCpu
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding _AlignCpu! methods to provide write access to the field _AlignCpu (" __HERE__ ")");
    t.method("_AlignCpu!", [](ImGuiPerfTool& a, int val) -> int { return a._AlignCpu = val; });

    DEBUG_MSG("Adding _AlignCpu! methods to provide write access to the field _AlignCpu (" __HERE__ ")");
    t.method("_AlignCpu!", [](ImGuiPerfTool* a, int val) -> int { return a->_AlignCpu = val; });

    DEBUG_MSG("Adding _AlignCompiler methods  to provide read access to the field _AlignCompiler (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:89:33
    // signature to use in the veto list: ImGuiPerfTool::_AlignCompiler
    t.method("_AlignCompiler", [](const ImGuiPerfTool& a) -> int { return a._AlignCompiler; });
    t.method("_AlignCompiler", [](ImGuiPerfTool& a) -> int { return a._AlignCompiler; });
    t.method("_AlignCompiler", [](const ImGuiPerfTool* a) -> int { return a->_AlignCompiler; });
    t.method("_AlignCompiler", [](ImGuiPerfTool* a) -> int { return a->_AlignCompiler; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:89:33
    // signature to use in the veto list: ImGuiPerfTool::_AlignCompiler
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding _AlignCompiler! methods to provide write access to the field _AlignCompiler (" __HERE__ ")");
    t.method("_AlignCompiler!", [](ImGuiPerfTool& a, int val) -> int { return a._AlignCompiler = val; });

    DEBUG_MSG("Adding _AlignCompiler! methods to provide write access to the field _AlignCompiler (" __HERE__ ")");
    t.method("_AlignCompiler!", [](ImGuiPerfTool* a, int val) -> int { return a->_AlignCompiler = val; });

    DEBUG_MSG("Adding _AlignBranch methods  to provide read access to the field _AlignBranch (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:90:33
    // signature to use in the veto list: ImGuiPerfTool::_AlignBranch
    t.method("_AlignBranch", [](const ImGuiPerfTool& a) -> int { return a._AlignBranch; });
    t.method("_AlignBranch", [](ImGuiPerfTool& a) -> int { return a._AlignBranch; });
    t.method("_AlignBranch", [](const ImGuiPerfTool* a) -> int { return a->_AlignBranch; });
    t.method("_AlignBranch", [](ImGuiPerfTool* a) -> int { return a->_AlignBranch; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:90:33
    // signature to use in the veto list: ImGuiPerfTool::_AlignBranch
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding _AlignBranch! methods to provide write access to the field _AlignBranch (" __HERE__ ")");
    t.method("_AlignBranch!", [](ImGuiPerfTool& a, int val) -> int { return a._AlignBranch = val; });

    DEBUG_MSG("Adding _AlignBranch! methods to provide write access to the field _AlignBranch (" __HERE__ ")");
    t.method("_AlignBranch!", [](ImGuiPerfTool* a, int val) -> int { return a->_AlignBranch = val; });

    DEBUG_MSG("Adding _AlignSamples methods  to provide read access to the field _AlignSamples (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:91:33
    // signature to use in the veto list: ImGuiPerfTool::_AlignSamples
    t.method("_AlignSamples", [](const ImGuiPerfTool& a) -> int { return a._AlignSamples; });
    t.method("_AlignSamples", [](ImGuiPerfTool& a) -> int { return a._AlignSamples; });
    t.method("_AlignSamples", [](const ImGuiPerfTool* a) -> int { return a->_AlignSamples; });
    t.method("_AlignSamples", [](ImGuiPerfTool* a) -> int { return a->_AlignSamples; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:91:33
    // signature to use in the veto list: ImGuiPerfTool::_AlignSamples
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding _AlignSamples! methods to provide write access to the field _AlignSamples (" __HERE__ ")");
    t.method("_AlignSamples!", [](ImGuiPerfTool& a, int val) -> int { return a._AlignSamples = val; });

    DEBUG_MSG("Adding _AlignSamples! methods to provide write access to the field _AlignSamples (" __HERE__ ")");
    t.method("_AlignSamples!", [](ImGuiPerfTool* a, int val) -> int { return a->_AlignSamples = val; });

    DEBUG_MSG("Adding _InfoTableSortDirty methods  to provide read access to the field _InfoTableSortDirty (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:92:33
    // signature to use in the veto list: ImGuiPerfTool::_InfoTableSortDirty
    t.method("_InfoTableSortDirty", [](const ImGuiPerfTool& a) -> bool { return a._InfoTableSortDirty; });
    t.method("_InfoTableSortDirty", [](ImGuiPerfTool& a) -> bool { return a._InfoTableSortDirty; });
    t.method("_InfoTableSortDirty", [](const ImGuiPerfTool* a) -> bool { return a->_InfoTableSortDirty; });
    t.method("_InfoTableSortDirty", [](ImGuiPerfTool* a) -> bool { return a->_InfoTableSortDirty; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:92:33
    // signature to use in the veto list: ImGuiPerfTool::_InfoTableSortDirty
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding _InfoTableSortDirty! methods to provide write access to the field _InfoTableSortDirty (" __HERE__ ")");
    t.method("_InfoTableSortDirty!", [](ImGuiPerfTool& a, bool val) -> bool { return a._InfoTableSortDirty = val; });

    DEBUG_MSG("Adding _InfoTableSortDirty! methods to provide write access to the field _InfoTableSortDirty (" __HERE__ ")");
    t.method("_InfoTableSortDirty!", [](ImGuiPerfTool* a, bool val) -> bool { return a->_InfoTableSortDirty = val; });

    DEBUG_MSG("Adding _TableHoveredTest methods  to provide read access to the field _TableHoveredTest (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:96:33
    // signature to use in the veto list: ImGuiPerfTool::_TableHoveredTest
    t.method("_TableHoveredTest", [](const ImGuiPerfTool& a) -> int { return a._TableHoveredTest; });
    t.method("_TableHoveredTest", [](ImGuiPerfTool& a) -> int { return a._TableHoveredTest; });
    t.method("_TableHoveredTest", [](const ImGuiPerfTool* a) -> int { return a->_TableHoveredTest; });
    t.method("_TableHoveredTest", [](ImGuiPerfTool* a) -> int { return a->_TableHoveredTest; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:96:33
    // signature to use in the veto list: ImGuiPerfTool::_TableHoveredTest
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding _TableHoveredTest! methods to provide write access to the field _TableHoveredTest (" __HERE__ ")");
    t.method("_TableHoveredTest!", [](ImGuiPerfTool& a, int val) -> int { return a._TableHoveredTest = val; });

    DEBUG_MSG("Adding _TableHoveredTest! methods to provide write access to the field _TableHoveredTest (" __HERE__ ")");
    t.method("_TableHoveredTest!", [](ImGuiPerfTool* a, int val) -> int { return a->_TableHoveredTest = val; });

    DEBUG_MSG("Adding _TableHoveredBatch methods  to provide read access to the field _TableHoveredBatch (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:97:33
    // signature to use in the veto list: ImGuiPerfTool::_TableHoveredBatch
    t.method("_TableHoveredBatch", [](const ImGuiPerfTool& a) -> int { return a._TableHoveredBatch; });
    t.method("_TableHoveredBatch", [](ImGuiPerfTool& a) -> int { return a._TableHoveredBatch; });
    t.method("_TableHoveredBatch", [](const ImGuiPerfTool* a) -> int { return a->_TableHoveredBatch; });
    t.method("_TableHoveredBatch", [](ImGuiPerfTool* a) -> int { return a->_TableHoveredBatch; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:97:33
    // signature to use in the veto list: ImGuiPerfTool::_TableHoveredBatch
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding _TableHoveredBatch! methods to provide write access to the field _TableHoveredBatch (" __HERE__ ")");
    t.method("_TableHoveredBatch!", [](ImGuiPerfTool& a, int val) -> int { return a._TableHoveredBatch = val; });

    DEBUG_MSG("Adding _TableHoveredBatch! methods to provide write access to the field _TableHoveredBatch (" __HERE__ ")");
    t.method("_TableHoveredBatch!", [](ImGuiPerfTool* a, int val) -> int { return a->_TableHoveredBatch = val; });

    DEBUG_MSG("Adding _PlotHoverTest methods  to provide read access to the field _PlotHoverTest (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:98:33
    // signature to use in the veto list: ImGuiPerfTool::_PlotHoverTest
    t.method("_PlotHoverTest", [](const ImGuiPerfTool& a) -> int { return a._PlotHoverTest; });
    t.method("_PlotHoverTest", [](ImGuiPerfTool& a) -> int { return a._PlotHoverTest; });
    t.method("_PlotHoverTest", [](const ImGuiPerfTool* a) -> int { return a->_PlotHoverTest; });
    t.method("_PlotHoverTest", [](ImGuiPerfTool* a) -> int { return a->_PlotHoverTest; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:98:33
    // signature to use in the veto list: ImGuiPerfTool::_PlotHoverTest
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding _PlotHoverTest! methods to provide write access to the field _PlotHoverTest (" __HERE__ ")");
    t.method("_PlotHoverTest!", [](ImGuiPerfTool& a, int val) -> int { return a._PlotHoverTest = val; });

    DEBUG_MSG("Adding _PlotHoverTest! methods to provide write access to the field _PlotHoverTest (" __HERE__ ")");
    t.method("_PlotHoverTest!", [](ImGuiPerfTool* a, int val) -> int { return a->_PlotHoverTest = val; });

    DEBUG_MSG("Adding _PlotHoverBatch methods  to provide read access to the field _PlotHoverBatch (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:99:33
    // signature to use in the veto list: ImGuiPerfTool::_PlotHoverBatch
    t.method("_PlotHoverBatch", [](const ImGuiPerfTool& a) -> int { return a._PlotHoverBatch; });
    t.method("_PlotHoverBatch", [](ImGuiPerfTool& a) -> int { return a._PlotHoverBatch; });
    t.method("_PlotHoverBatch", [](const ImGuiPerfTool* a) -> int { return a->_PlotHoverBatch; });
    t.method("_PlotHoverBatch", [](ImGuiPerfTool* a) -> int { return a->_PlotHoverBatch; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:99:33
    // signature to use in the veto list: ImGuiPerfTool::_PlotHoverBatch
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding _PlotHoverBatch! methods to provide write access to the field _PlotHoverBatch (" __HERE__ ")");
    t.method("_PlotHoverBatch!", [](ImGuiPerfTool& a, int val) -> int { return a._PlotHoverBatch = val; });

    DEBUG_MSG("Adding _PlotHoverBatch! methods to provide write access to the field _PlotHoverBatch (" __HERE__ ")");
    t.method("_PlotHoverBatch!", [](ImGuiPerfTool* a, int val) -> int { return a->_PlotHoverBatch = val; });

    DEBUG_MSG("Adding _PlotHoverTestLabel methods  to provide read access to the field _PlotHoverTestLabel (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:100:33
    // signature to use in the veto list: ImGuiPerfTool::_PlotHoverTestLabel
    t.method("_PlotHoverTestLabel", [](const ImGuiPerfTool& a) -> bool { return a._PlotHoverTestLabel; });
    t.method("_PlotHoverTestLabel", [](ImGuiPerfTool& a) -> bool { return a._PlotHoverTestLabel; });
    t.method("_PlotHoverTestLabel", [](const ImGuiPerfTool* a) -> bool { return a->_PlotHoverTestLabel; });
    t.method("_PlotHoverTestLabel", [](ImGuiPerfTool* a) -> bool { return a->_PlotHoverTestLabel; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:100:33
    // signature to use in the veto list: ImGuiPerfTool::_PlotHoverTestLabel
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding _PlotHoverTestLabel! methods to provide write access to the field _PlotHoverTestLabel (" __HERE__ ")");
    t.method("_PlotHoverTestLabel!", [](ImGuiPerfTool& a, bool val) -> bool { return a._PlotHoverTestLabel = val; });

    DEBUG_MSG("Adding _PlotHoverTestLabel! methods to provide write access to the field _PlotHoverTestLabel (" __HERE__ ")");
    t.method("_PlotHoverTestLabel!", [](ImGuiPerfTool* a, bool val) -> bool { return a->_PlotHoverTestLabel = val; });

    DEBUG_MSG("Adding _ReportGenerating methods  to provide read access to the field _ReportGenerating (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:101:33
    // signature to use in the veto list: ImGuiPerfTool::_ReportGenerating
    t.method("_ReportGenerating", [](const ImGuiPerfTool& a) -> bool { return a._ReportGenerating; });
    t.method("_ReportGenerating", [](ImGuiPerfTool& a) -> bool { return a._ReportGenerating; });
    t.method("_ReportGenerating", [](const ImGuiPerfTool* a) -> bool { return a->_ReportGenerating; });
    t.method("_ReportGenerating", [](ImGuiPerfTool* a) -> bool { return a->_ReportGenerating; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:101:33
    // signature to use in the veto list: ImGuiPerfTool::_ReportGenerating
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding _ReportGenerating! methods to provide write access to the field _ReportGenerating (" __HERE__ ")");
    t.method("_ReportGenerating!", [](ImGuiPerfTool& a, bool val) -> bool { return a._ReportGenerating = val; });

    DEBUG_MSG("Adding _ReportGenerating! methods to provide write access to the field _ReportGenerating (" __HERE__ ")");
    t.method("_ReportGenerating!", [](ImGuiPerfTool* a, bool val) -> bool { return a->_ReportGenerating = val; });

    DEBUG_MSG("Adding _CsvParser methods  to provide read access to the field _CsvParser (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:103:33
    // signature to use in the veto list: ImGuiPerfTool::_CsvParser
    t.method("_CsvParser", [](const ImGuiPerfTool& a) -> ImGuiCsvParser * { return a._CsvParser; });
    t.method("_CsvParser", [](ImGuiPerfTool& a) -> ImGuiCsvParser * { return a._CsvParser; });
    t.method("_CsvParser", [](const ImGuiPerfTool* a) -> ImGuiCsvParser * { return a->_CsvParser; });
    t.method("_CsvParser", [](ImGuiPerfTool* a) -> ImGuiCsvParser * { return a->_CsvParser; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:103:33
    // signature to use in the veto list: ImGuiPerfTool::_CsvParser
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding _CsvParser! methods to provide write access to the field _CsvParser (" __HERE__ ")");
    t.method("_CsvParser!", [](ImGuiPerfTool& a, ImGuiCsvParser * val) -> ImGuiCsvParser * { return a._CsvParser = val; });

    DEBUG_MSG("Adding _CsvParser! methods to provide write access to the field _CsvParser (" __HERE__ ")");
    t.method("_CsvParser!", [](ImGuiPerfTool* a, ImGuiCsvParser * val) -> ImGuiCsvParser * { return a->_CsvParser = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ImGuiPerfTool>> type_;
};
std::shared_ptr<Wrapper> newJlImGuiPerfTool(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlImGuiPerfTool(module));
}
