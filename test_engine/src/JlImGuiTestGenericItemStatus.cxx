// this file was auto-generated by wrapit v1.3.3
#include "Wrapper.h"

#include "jlImGuiTestEngine.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<ImGuiTestGenericItemStatus> : std::false_type { };
  template<> struct DefaultConstructible<ImGuiTestGenericItemStatus> : std::false_type { };
}

// Class generating the wrapper for type ImGuiTestGenericItemStatus
// signature to use in the veto file: ImGuiTestGenericItemStatus
struct JlImGuiTestGenericItemStatus: public Wrapper {

  JlImGuiTestGenericItemStatus(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ImGuiTestGenericItemStatus (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:153:18
    jlcxx::TypeWrapper<ImGuiTestGenericItemStatus>  t = jlModule.add_type<ImGuiTestGenericItemStatus>("ImGuiTestGenericItemStatus");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ImGuiTestGenericItemStatus>>(new jlcxx::TypeWrapper<ImGuiTestGenericItemStatus>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void ImGuiTestGenericItemStatus::Clear() (" __HERE__ ")");
    // signature to use in the veto list: void ImGuiTestGenericItemStatus::Clear()
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:167:10
    t.method("Clear", static_cast<void (ImGuiTestGenericItemStatus::*)() >(&ImGuiTestGenericItemStatus::Clear));

    DEBUG_MSG("Adding wrapper for void ImGuiTestGenericItemStatus::QuerySet(bool) (" __HERE__ ")");
    // signature to use in the veto list: void ImGuiTestGenericItemStatus::QuerySet(bool)
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:168:10
    t.method("QuerySet", static_cast<void (ImGuiTestGenericItemStatus::*)(bool) >(&ImGuiTestGenericItemStatus::QuerySet));
    t.method("QuerySet", [](ImGuiTestGenericItemStatus& a)->void { a.QuerySet(); });
    t.method("QuerySet", [](ImGuiTestGenericItemStatus* a)->void { a->QuerySet(); });

    DEBUG_MSG("Adding wrapper for void ImGuiTestGenericItemStatus::QueryInc(bool) (" __HERE__ ")");
    // signature to use in the veto list: void ImGuiTestGenericItemStatus::QueryInc(bool)
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:169:10
    t.method("QueryInc", static_cast<void (ImGuiTestGenericItemStatus::*)(bool) >(&ImGuiTestGenericItemStatus::QueryInc));
    t.method("QueryInc", [](ImGuiTestGenericItemStatus& a)->void { a.QueryInc(); });
    t.method("QueryInc", [](ImGuiTestGenericItemStatus* a)->void { a->QueryInc(); });

    DEBUG_MSG("Adding RetValue methods  to provide read access to the field RetValue (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:155:13
    // signature to use in the veto list: ImGuiTestGenericItemStatus::RetValue
    t.method("RetValue", [](const ImGuiTestGenericItemStatus& a) -> int { return a.RetValue; });
    t.method("RetValue", [](ImGuiTestGenericItemStatus& a) -> int { return a.RetValue; });
    t.method("RetValue", [](const ImGuiTestGenericItemStatus* a) -> int { return a->RetValue; });
    t.method("RetValue", [](ImGuiTestGenericItemStatus* a) -> int { return a->RetValue; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:155:13
    // signature to use in the veto list: ImGuiTestGenericItemStatus::RetValue
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding RetValue! methods to provide write access to the field RetValue (" __HERE__ ")");
    t.method("RetValue!", [](ImGuiTestGenericItemStatus& a, int val) -> int { return a.RetValue = val; });

    DEBUG_MSG("Adding RetValue! methods to provide write access to the field RetValue (" __HERE__ ")");
    t.method("RetValue!", [](ImGuiTestGenericItemStatus* a, int val) -> int { return a->RetValue = val; });

    DEBUG_MSG("Adding Hovered methods  to provide read access to the field Hovered (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:156:13
    // signature to use in the veto list: ImGuiTestGenericItemStatus::Hovered
    t.method("Hovered", [](const ImGuiTestGenericItemStatus& a) -> int { return a.Hovered; });
    t.method("Hovered", [](ImGuiTestGenericItemStatus& a) -> int { return a.Hovered; });
    t.method("Hovered", [](const ImGuiTestGenericItemStatus* a) -> int { return a->Hovered; });
    t.method("Hovered", [](ImGuiTestGenericItemStatus* a) -> int { return a->Hovered; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:156:13
    // signature to use in the veto list: ImGuiTestGenericItemStatus::Hovered
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Hovered! methods to provide write access to the field Hovered (" __HERE__ ")");
    t.method("Hovered!", [](ImGuiTestGenericItemStatus& a, int val) -> int { return a.Hovered = val; });

    DEBUG_MSG("Adding Hovered! methods to provide write access to the field Hovered (" __HERE__ ")");
    t.method("Hovered!", [](ImGuiTestGenericItemStatus* a, int val) -> int { return a->Hovered = val; });

    DEBUG_MSG("Adding Active methods  to provide read access to the field Active (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:157:13
    // signature to use in the veto list: ImGuiTestGenericItemStatus::Active
    t.method("Active", [](const ImGuiTestGenericItemStatus& a) -> int { return a.Active; });
    t.method("Active", [](ImGuiTestGenericItemStatus& a) -> int { return a.Active; });
    t.method("Active", [](const ImGuiTestGenericItemStatus* a) -> int { return a->Active; });
    t.method("Active", [](ImGuiTestGenericItemStatus* a) -> int { return a->Active; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:157:13
    // signature to use in the veto list: ImGuiTestGenericItemStatus::Active
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Active! methods to provide write access to the field Active (" __HERE__ ")");
    t.method("Active!", [](ImGuiTestGenericItemStatus& a, int val) -> int { return a.Active = val; });

    DEBUG_MSG("Adding Active! methods to provide write access to the field Active (" __HERE__ ")");
    t.method("Active!", [](ImGuiTestGenericItemStatus* a, int val) -> int { return a->Active = val; });

    DEBUG_MSG("Adding Focused methods  to provide read access to the field Focused (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:158:13
    // signature to use in the veto list: ImGuiTestGenericItemStatus::Focused
    t.method("Focused", [](const ImGuiTestGenericItemStatus& a) -> int { return a.Focused; });
    t.method("Focused", [](ImGuiTestGenericItemStatus& a) -> int { return a.Focused; });
    t.method("Focused", [](const ImGuiTestGenericItemStatus* a) -> int { return a->Focused; });
    t.method("Focused", [](ImGuiTestGenericItemStatus* a) -> int { return a->Focused; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:158:13
    // signature to use in the veto list: ImGuiTestGenericItemStatus::Focused
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Focused! methods to provide write access to the field Focused (" __HERE__ ")");
    t.method("Focused!", [](ImGuiTestGenericItemStatus& a, int val) -> int { return a.Focused = val; });

    DEBUG_MSG("Adding Focused! methods to provide write access to the field Focused (" __HERE__ ")");
    t.method("Focused!", [](ImGuiTestGenericItemStatus* a, int val) -> int { return a->Focused = val; });

    DEBUG_MSG("Adding Clicked methods  to provide read access to the field Clicked (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:159:13
    // signature to use in the veto list: ImGuiTestGenericItemStatus::Clicked
    t.method("Clicked", [](const ImGuiTestGenericItemStatus& a) -> int { return a.Clicked; });
    t.method("Clicked", [](ImGuiTestGenericItemStatus& a) -> int { return a.Clicked; });
    t.method("Clicked", [](const ImGuiTestGenericItemStatus* a) -> int { return a->Clicked; });
    t.method("Clicked", [](ImGuiTestGenericItemStatus* a) -> int { return a->Clicked; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:159:13
    // signature to use in the veto list: ImGuiTestGenericItemStatus::Clicked
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Clicked! methods to provide write access to the field Clicked (" __HERE__ ")");
    t.method("Clicked!", [](ImGuiTestGenericItemStatus& a, int val) -> int { return a.Clicked = val; });

    DEBUG_MSG("Adding Clicked! methods to provide write access to the field Clicked (" __HERE__ ")");
    t.method("Clicked!", [](ImGuiTestGenericItemStatus* a, int val) -> int { return a->Clicked = val; });

    DEBUG_MSG("Adding Visible methods  to provide read access to the field Visible (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:160:13
    // signature to use in the veto list: ImGuiTestGenericItemStatus::Visible
    t.method("Visible", [](const ImGuiTestGenericItemStatus& a) -> int { return a.Visible; });
    t.method("Visible", [](ImGuiTestGenericItemStatus& a) -> int { return a.Visible; });
    t.method("Visible", [](const ImGuiTestGenericItemStatus* a) -> int { return a->Visible; });
    t.method("Visible", [](ImGuiTestGenericItemStatus* a) -> int { return a->Visible; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:160:13
    // signature to use in the veto list: ImGuiTestGenericItemStatus::Visible
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Visible! methods to provide write access to the field Visible (" __HERE__ ")");
    t.method("Visible!", [](ImGuiTestGenericItemStatus& a, int val) -> int { return a.Visible = val; });

    DEBUG_MSG("Adding Visible! methods to provide write access to the field Visible (" __HERE__ ")");
    t.method("Visible!", [](ImGuiTestGenericItemStatus* a, int val) -> int { return a->Visible = val; });

    DEBUG_MSG("Adding Edited methods  to provide read access to the field Edited (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:161:13
    // signature to use in the veto list: ImGuiTestGenericItemStatus::Edited
    t.method("Edited", [](const ImGuiTestGenericItemStatus& a) -> int { return a.Edited; });
    t.method("Edited", [](ImGuiTestGenericItemStatus& a) -> int { return a.Edited; });
    t.method("Edited", [](const ImGuiTestGenericItemStatus* a) -> int { return a->Edited; });
    t.method("Edited", [](ImGuiTestGenericItemStatus* a) -> int { return a->Edited; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:161:13
    // signature to use in the veto list: ImGuiTestGenericItemStatus::Edited
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Edited! methods to provide write access to the field Edited (" __HERE__ ")");
    t.method("Edited!", [](ImGuiTestGenericItemStatus& a, int val) -> int { return a.Edited = val; });

    DEBUG_MSG("Adding Edited! methods to provide write access to the field Edited (" __HERE__ ")");
    t.method("Edited!", [](ImGuiTestGenericItemStatus* a, int val) -> int { return a->Edited = val; });

    DEBUG_MSG("Adding Activated methods  to provide read access to the field Activated (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:162:13
    // signature to use in the veto list: ImGuiTestGenericItemStatus::Activated
    t.method("Activated", [](const ImGuiTestGenericItemStatus& a) -> int { return a.Activated; });
    t.method("Activated", [](ImGuiTestGenericItemStatus& a) -> int { return a.Activated; });
    t.method("Activated", [](const ImGuiTestGenericItemStatus* a) -> int { return a->Activated; });
    t.method("Activated", [](ImGuiTestGenericItemStatus* a) -> int { return a->Activated; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:162:13
    // signature to use in the veto list: ImGuiTestGenericItemStatus::Activated
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Activated! methods to provide write access to the field Activated (" __HERE__ ")");
    t.method("Activated!", [](ImGuiTestGenericItemStatus& a, int val) -> int { return a.Activated = val; });

    DEBUG_MSG("Adding Activated! methods to provide write access to the field Activated (" __HERE__ ")");
    t.method("Activated!", [](ImGuiTestGenericItemStatus* a, int val) -> int { return a->Activated = val; });

    DEBUG_MSG("Adding Deactivated methods  to provide read access to the field Deactivated (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:163:13
    // signature to use in the veto list: ImGuiTestGenericItemStatus::Deactivated
    t.method("Deactivated", [](const ImGuiTestGenericItemStatus& a) -> int { return a.Deactivated; });
    t.method("Deactivated", [](ImGuiTestGenericItemStatus& a) -> int { return a.Deactivated; });
    t.method("Deactivated", [](const ImGuiTestGenericItemStatus* a) -> int { return a->Deactivated; });
    t.method("Deactivated", [](ImGuiTestGenericItemStatus* a) -> int { return a->Deactivated; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:163:13
    // signature to use in the veto list: ImGuiTestGenericItemStatus::Deactivated
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Deactivated! methods to provide write access to the field Deactivated (" __HERE__ ")");
    t.method("Deactivated!", [](ImGuiTestGenericItemStatus& a, int val) -> int { return a.Deactivated = val; });

    DEBUG_MSG("Adding Deactivated! methods to provide write access to the field Deactivated (" __HERE__ ")");
    t.method("Deactivated!", [](ImGuiTestGenericItemStatus* a, int val) -> int { return a->Deactivated = val; });

    DEBUG_MSG("Adding DeactivatedAfterEdit methods  to provide read access to the field DeactivatedAfterEdit (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:164:13
    // signature to use in the veto list: ImGuiTestGenericItemStatus::DeactivatedAfterEdit
    t.method("DeactivatedAfterEdit", [](const ImGuiTestGenericItemStatus& a) -> int { return a.DeactivatedAfterEdit; });
    t.method("DeactivatedAfterEdit", [](ImGuiTestGenericItemStatus& a) -> int { return a.DeactivatedAfterEdit; });
    t.method("DeactivatedAfterEdit", [](const ImGuiTestGenericItemStatus* a) -> int { return a->DeactivatedAfterEdit; });
    t.method("DeactivatedAfterEdit", [](ImGuiTestGenericItemStatus* a) -> int { return a->DeactivatedAfterEdit; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:164:13
    // signature to use in the veto list: ImGuiTestGenericItemStatus::DeactivatedAfterEdit
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding DeactivatedAfterEdit! methods to provide write access to the field DeactivatedAfterEdit (" __HERE__ ")");
    t.method("DeactivatedAfterEdit!", [](ImGuiTestGenericItemStatus& a, int val) -> int { return a.DeactivatedAfterEdit = val; });

    DEBUG_MSG("Adding DeactivatedAfterEdit! methods to provide write access to the field DeactivatedAfterEdit (" __HERE__ ")");
    t.method("DeactivatedAfterEdit!", [](ImGuiTestGenericItemStatus* a, int val) -> int { return a->DeactivatedAfterEdit = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ImGuiTestGenericItemStatus>> type_;
};
std::shared_ptr<Wrapper> newJlImGuiTestGenericItemStatus(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlImGuiTestGenericItemStatus(module));
}
