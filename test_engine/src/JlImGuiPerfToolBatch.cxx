// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlImGuiTestEngine.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<ImGuiPerfToolBatch> : std::false_type { };
  template<> struct DefaultConstructible<ImGuiPerfToolBatch> : std::false_type { };
}

// Class generating the wrapper for type ImGuiPerfToolBatch
// signature to use in the veto file: ImGuiPerfToolBatch
struct JlImGuiPerfToolBatch: public Wrapper {

  JlImGuiPerfToolBatch(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ImGuiPerfToolBatch (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:51:8
    jlcxx::TypeWrapper<ImGuiPerfToolBatch>  t = jlModule.add_type<ImGuiPerfToolBatch>("ImGuiPerfToolBatch");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ImGuiPerfToolBatch>>(new jlcxx::TypeWrapper<ImGuiPerfToolBatch>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding BatchID methods  to provide read access to the field BatchID (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:53:33
    // signature to use in the veto list: ImGuiPerfToolBatch::BatchID
    t.method("BatchID", [](const ImGuiPerfToolBatch& a) -> ImU64 { return a.BatchID; });
    t.method("BatchID", [](ImGuiPerfToolBatch& a) -> ImU64 { return a.BatchID; });
    t.method("BatchID", [](const ImGuiPerfToolBatch* a) -> ImU64 { return a->BatchID; });
    t.method("BatchID", [](ImGuiPerfToolBatch* a) -> ImU64 { return a->BatchID; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:53:33
    // signature to use in the veto list: ImGuiPerfToolBatch::BatchID
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding BatchID! methods to provide write access to the field BatchID (" __HERE__ ")");
    t.method("BatchID!", [](ImGuiPerfToolBatch& a, ImU64 val) -> ImU64 { return a.BatchID = val; });

    DEBUG_MSG("Adding BatchID! methods to provide write access to the field BatchID (" __HERE__ ")");
    t.method("BatchID!", [](ImGuiPerfToolBatch* a, ImU64 val) -> ImU64 { return a->BatchID = val; });

    DEBUG_MSG("Adding NumSamples methods  to provide read access to the field NumSamples (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:54:33
    // signature to use in the veto list: ImGuiPerfToolBatch::NumSamples
    t.method("NumSamples", [](const ImGuiPerfToolBatch& a) -> int { return a.NumSamples; });
    t.method("NumSamples", [](ImGuiPerfToolBatch& a) -> int { return a.NumSamples; });
    t.method("NumSamples", [](const ImGuiPerfToolBatch* a) -> int { return a->NumSamples; });
    t.method("NumSamples", [](ImGuiPerfToolBatch* a) -> int { return a->NumSamples; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:54:33
    // signature to use in the veto list: ImGuiPerfToolBatch::NumSamples
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding NumSamples! methods to provide write access to the field NumSamples (" __HERE__ ")");
    t.method("NumSamples!", [](ImGuiPerfToolBatch& a, int val) -> int { return a.NumSamples = val; });

    DEBUG_MSG("Adding NumSamples! methods to provide write access to the field NumSamples (" __HERE__ ")");
    t.method("NumSamples!", [](ImGuiPerfToolBatch* a, int val) -> int { return a->NumSamples = val; });

    DEBUG_MSG("Adding BranchIndex methods  to provide read access to the field BranchIndex (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:55:33
    // signature to use in the veto list: ImGuiPerfToolBatch::BranchIndex
    t.method("BranchIndex", [](const ImGuiPerfToolBatch& a) -> int { return a.BranchIndex; });
    t.method("BranchIndex", [](ImGuiPerfToolBatch& a) -> int { return a.BranchIndex; });
    t.method("BranchIndex", [](const ImGuiPerfToolBatch* a) -> int { return a->BranchIndex; });
    t.method("BranchIndex", [](ImGuiPerfToolBatch* a) -> int { return a->BranchIndex; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_perftool.h:55:33
    // signature to use in the veto list: ImGuiPerfToolBatch::BranchIndex
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding BranchIndex! methods to provide write access to the field BranchIndex (" __HERE__ ")");
    t.method("BranchIndex!", [](ImGuiPerfToolBatch& a, int val) -> int { return a.BranchIndex = val; });

    DEBUG_MSG("Adding BranchIndex! methods to provide write access to the field BranchIndex (" __HERE__ ")");
    t.method("BranchIndex!", [](ImGuiPerfToolBatch* a, int val) -> int { return a->BranchIndex = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ImGuiPerfToolBatch>> type_;
};
std::shared_ptr<Wrapper> newJlImGuiPerfToolBatch(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlImGuiPerfToolBatch(module));
}
