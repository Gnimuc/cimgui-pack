// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlImGuiTestEngine.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<ImGuiTestItemInfo> : std::false_type { };
  template<> struct DefaultConstructible<ImGuiTestItemInfo> : std::false_type { };
}

// Class generating the wrapper for type ImGuiTestItemInfo
// signature to use in the veto file: ImGuiTestItemInfo
struct JlImGuiTestItemInfo: public Wrapper {

  JlImGuiTestItemInfo(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ImGuiTestItemInfo (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:298:8
    jlcxx::TypeWrapper<ImGuiTestItemInfo>  t = jlModule.add_type<ImGuiTestItemInfo>("ImGuiTestItemInfo");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ImGuiTestItemInfo>>(new jlcxx::TypeWrapper<ImGuiTestItemInfo>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding ID methods  to provide read access to the field ID (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:300:33
    // signature to use in the veto list: ImGuiTestItemInfo::ID
    t.method("ID", [](const ImGuiTestItemInfo& a) -> ImGuiID { return a.ID; });
    t.method("ID", [](ImGuiTestItemInfo& a) -> ImGuiID { return a.ID; });
    t.method("ID", [](const ImGuiTestItemInfo* a) -> ImGuiID { return a->ID; });
    t.method("ID", [](ImGuiTestItemInfo* a) -> ImGuiID { return a->ID; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:300:33
    // signature to use in the veto list: ImGuiTestItemInfo::ID
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ID! methods to provide write access to the field ID (" __HERE__ ")");
    t.method("ID!", [](ImGuiTestItemInfo& a, ImGuiID val) -> ImGuiID { return a.ID = val; });

    DEBUG_MSG("Adding ID! methods to provide write access to the field ID (" __HERE__ ")");
    t.method("ID!", [](ImGuiTestItemInfo* a, ImGuiID val) -> ImGuiID { return a->ID = val; });

    DEBUG_MSG("Adding NavLayer methods  to provide read access to the field NavLayer (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:303:33
    // signature to use in the veto list: ImGuiTestItemInfo::NavLayer
    t.method("NavLayer", [](const ImGuiTestItemInfo& a) -> unsigned int { return a.NavLayer; });
    t.method("NavLayer", [](ImGuiTestItemInfo& a) -> unsigned int { return a.NavLayer; });
    t.method("NavLayer", [](const ImGuiTestItemInfo* a) -> unsigned int { return a->NavLayer; });
    t.method("NavLayer", [](ImGuiTestItemInfo* a) -> unsigned int { return a->NavLayer; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:303:33
    // signature to use in the veto list: ImGuiTestItemInfo::NavLayer
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding NavLayer! methods to provide write access to the field NavLayer (" __HERE__ ")");
    t.method("NavLayer!", [](ImGuiTestItemInfo& a, unsigned int val) -> unsigned int { return a.NavLayer = val; });

    DEBUG_MSG("Adding NavLayer! methods to provide write access to the field NavLayer (" __HERE__ ")");
    t.method("NavLayer!", [](ImGuiTestItemInfo* a, unsigned int val) -> unsigned int { return a->NavLayer = val; });

    DEBUG_MSG("Adding Depth methods  to provide read access to the field Depth (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:304:33
    // signature to use in the veto list: ImGuiTestItemInfo::Depth
    t.method("Depth", [](const ImGuiTestItemInfo& a) -> int { return a.Depth; });
    t.method("Depth", [](ImGuiTestItemInfo& a) -> int { return a.Depth; });
    t.method("Depth", [](const ImGuiTestItemInfo* a) -> int { return a->Depth; });
    t.method("Depth", [](ImGuiTestItemInfo* a) -> int { return a->Depth; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:304:33
    // signature to use in the veto list: ImGuiTestItemInfo::Depth
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Depth! methods to provide write access to the field Depth (" __HERE__ ")");
    t.method("Depth!", [](ImGuiTestItemInfo& a, int val) -> int { return a.Depth = val; });

    DEBUG_MSG("Adding Depth! methods to provide write access to the field Depth (" __HERE__ ")");
    t.method("Depth!", [](ImGuiTestItemInfo* a, int val) -> int { return a->Depth = val; });

    DEBUG_MSG("Adding TimestampMain methods  to provide read access to the field TimestampMain (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:305:33
    // signature to use in the veto list: ImGuiTestItemInfo::TimestampMain
    t.method("TimestampMain", [](const ImGuiTestItemInfo& a) -> int { return a.TimestampMain; });
    t.method("TimestampMain", [](ImGuiTestItemInfo& a) -> int { return a.TimestampMain; });
    t.method("TimestampMain", [](const ImGuiTestItemInfo* a) -> int { return a->TimestampMain; });
    t.method("TimestampMain", [](ImGuiTestItemInfo* a) -> int { return a->TimestampMain; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:305:33
    // signature to use in the veto list: ImGuiTestItemInfo::TimestampMain
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding TimestampMain! methods to provide write access to the field TimestampMain (" __HERE__ ")");
    t.method("TimestampMain!", [](ImGuiTestItemInfo& a, int val) -> int { return a.TimestampMain = val; });

    DEBUG_MSG("Adding TimestampMain! methods to provide write access to the field TimestampMain (" __HERE__ ")");
    t.method("TimestampMain!", [](ImGuiTestItemInfo* a, int val) -> int { return a->TimestampMain = val; });

    DEBUG_MSG("Adding TimestampStatus methods  to provide read access to the field TimestampStatus (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:306:33
    // signature to use in the veto list: ImGuiTestItemInfo::TimestampStatus
    t.method("TimestampStatus", [](const ImGuiTestItemInfo& a) -> int { return a.TimestampStatus; });
    t.method("TimestampStatus", [](ImGuiTestItemInfo& a) -> int { return a.TimestampStatus; });
    t.method("TimestampStatus", [](const ImGuiTestItemInfo* a) -> int { return a->TimestampStatus; });
    t.method("TimestampStatus", [](ImGuiTestItemInfo* a) -> int { return a->TimestampStatus; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:306:33
    // signature to use in the veto list: ImGuiTestItemInfo::TimestampStatus
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding TimestampStatus! methods to provide write access to the field TimestampStatus (" __HERE__ ")");
    t.method("TimestampStatus!", [](ImGuiTestItemInfo& a, int val) -> int { return a.TimestampStatus = val; });

    DEBUG_MSG("Adding TimestampStatus! methods to provide write access to the field TimestampStatus (" __HERE__ ")");
    t.method("TimestampStatus!", [](ImGuiTestItemInfo* a, int val) -> int { return a->TimestampStatus = val; });

    DEBUG_MSG("Adding ParentID methods  to provide read access to the field ParentID (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:307:33
    // signature to use in the veto list: ImGuiTestItemInfo::ParentID
    t.method("ParentID", [](const ImGuiTestItemInfo& a) -> ImGuiID { return a.ParentID; });
    t.method("ParentID", [](ImGuiTestItemInfo& a) -> ImGuiID { return a.ParentID; });
    t.method("ParentID", [](const ImGuiTestItemInfo* a) -> ImGuiID { return a->ParentID; });
    t.method("ParentID", [](ImGuiTestItemInfo* a) -> ImGuiID { return a->ParentID; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:307:33
    // signature to use in the veto list: ImGuiTestItemInfo::ParentID
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ParentID! methods to provide write access to the field ParentID (" __HERE__ ")");
    t.method("ParentID!", [](ImGuiTestItemInfo& a, ImGuiID val) -> ImGuiID { return a.ParentID = val; });

    DEBUG_MSG("Adding ParentID! methods to provide write access to the field ParentID (" __HERE__ ")");
    t.method("ParentID!", [](ImGuiTestItemInfo* a, ImGuiID val) -> ImGuiID { return a->ParentID = val; });

    DEBUG_MSG("Adding InFlags methods  to provide read access to the field InFlags (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:310:33
    // signature to use in the veto list: ImGuiTestItemInfo::InFlags
    t.method("InFlags", [](const ImGuiTestItemInfo& a) -> ImGuiItemFlags { return a.InFlags; });
    t.method("InFlags", [](ImGuiTestItemInfo& a) -> ImGuiItemFlags { return a.InFlags; });
    t.method("InFlags", [](const ImGuiTestItemInfo* a) -> ImGuiItemFlags { return a->InFlags; });
    t.method("InFlags", [](ImGuiTestItemInfo* a) -> ImGuiItemFlags { return a->InFlags; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:310:33
    // signature to use in the veto list: ImGuiTestItemInfo::InFlags
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding InFlags! methods to provide write access to the field InFlags (" __HERE__ ")");
    t.method("InFlags!", [](ImGuiTestItemInfo& a, ImGuiItemFlags val) -> ImGuiItemFlags { return a.InFlags = val; });

    DEBUG_MSG("Adding InFlags! methods to provide write access to the field InFlags (" __HERE__ ")");
    t.method("InFlags!", [](ImGuiTestItemInfo* a, ImGuiItemFlags val) -> ImGuiItemFlags { return a->InFlags = val; });

    DEBUG_MSG("Adding StatusFlags methods  to provide read access to the field StatusFlags (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:311:33
    // signature to use in the veto list: ImGuiTestItemInfo::StatusFlags
    t.method("StatusFlags", [](const ImGuiTestItemInfo& a) -> ImGuiItemStatusFlags { return a.StatusFlags; });
    t.method("StatusFlags", [](ImGuiTestItemInfo& a) -> ImGuiItemStatusFlags { return a.StatusFlags; });
    t.method("StatusFlags", [](const ImGuiTestItemInfo* a) -> ImGuiItemStatusFlags { return a->StatusFlags; });
    t.method("StatusFlags", [](ImGuiTestItemInfo* a) -> ImGuiItemStatusFlags { return a->StatusFlags; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_engine.h:311:33
    // signature to use in the veto list: ImGuiTestItemInfo::StatusFlags
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding StatusFlags! methods to provide write access to the field StatusFlags (" __HERE__ ")");
    t.method("StatusFlags!", [](ImGuiTestItemInfo& a, ImGuiItemStatusFlags val) -> ImGuiItemStatusFlags { return a.StatusFlags = val; });

    DEBUG_MSG("Adding StatusFlags! methods to provide write access to the field StatusFlags (" __HERE__ ")");
    t.method("StatusFlags!", [](ImGuiTestItemInfo* a, ImGuiItemStatusFlags val) -> ImGuiItemStatusFlags { return a->StatusFlags = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ImGuiTestItemInfo>> type_;
};
std::shared_ptr<Wrapper> newJlImGuiTestItemInfo(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlImGuiTestItemInfo(module));
}
