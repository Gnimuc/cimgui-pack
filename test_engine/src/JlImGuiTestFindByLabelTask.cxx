// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlImGuiTestEngine.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<ImGuiTestFindByLabelTask> : std::false_type { };
  template<> struct DefaultConstructible<ImGuiTestFindByLabelTask> : std::false_type { };
}

// Class generating the wrapper for type ImGuiTestFindByLabelTask
// signature to use in the veto file: ImGuiTestFindByLabelTask
struct JlImGuiTestFindByLabelTask: public Wrapper {

  JlImGuiTestFindByLabelTask(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ImGuiTestFindByLabelTask (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:50:8
    jlcxx::TypeWrapper<ImGuiTestFindByLabelTask>  t = jlModule.add_type<ImGuiTestFindByLabelTask>("ImGuiTestFindByLabelTask");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ImGuiTestFindByLabelTask>>(new jlcxx::TypeWrapper<ImGuiTestFindByLabelTask>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding InPrefixId methods  to provide read access to the field InPrefixId (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:53:29
    // signature to use in the veto list: ImGuiTestFindByLabelTask::InPrefixId
    t.method("InPrefixId", [](const ImGuiTestFindByLabelTask& a) -> ImGuiID { return a.InPrefixId; });
    t.method("InPrefixId", [](ImGuiTestFindByLabelTask& a) -> ImGuiID { return a.InPrefixId; });
    t.method("InPrefixId", [](const ImGuiTestFindByLabelTask* a) -> ImGuiID { return a->InPrefixId; });
    t.method("InPrefixId", [](ImGuiTestFindByLabelTask* a) -> ImGuiID { return a->InPrefixId; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:53:29
    // signature to use in the veto list: ImGuiTestFindByLabelTask::InPrefixId
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding InPrefixId! methods to provide write access to the field InPrefixId (" __HERE__ ")");
    t.method("InPrefixId!", [](ImGuiTestFindByLabelTask& a, ImGuiID val) -> ImGuiID { return a.InPrefixId = val; });

    DEBUG_MSG("Adding InPrefixId! methods to provide write access to the field InPrefixId (" __HERE__ ")");
    t.method("InPrefixId!", [](ImGuiTestFindByLabelTask* a, ImGuiID val) -> ImGuiID { return a->InPrefixId = val; });

    DEBUG_MSG("Adding InSuffixDepth methods  to provide read access to the field InSuffixDepth (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:54:29
    // signature to use in the veto list: ImGuiTestFindByLabelTask::InSuffixDepth
    t.method("InSuffixDepth", [](const ImGuiTestFindByLabelTask& a) -> int { return a.InSuffixDepth; });
    t.method("InSuffixDepth", [](ImGuiTestFindByLabelTask& a) -> int { return a.InSuffixDepth; });
    t.method("InSuffixDepth", [](const ImGuiTestFindByLabelTask* a) -> int { return a->InSuffixDepth; });
    t.method("InSuffixDepth", [](ImGuiTestFindByLabelTask* a) -> int { return a->InSuffixDepth; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:54:29
    // signature to use in the veto list: ImGuiTestFindByLabelTask::InSuffixDepth
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding InSuffixDepth! methods to provide write access to the field InSuffixDepth (" __HERE__ ")");
    t.method("InSuffixDepth!", [](ImGuiTestFindByLabelTask& a, int val) -> int { return a.InSuffixDepth = val; });

    DEBUG_MSG("Adding InSuffixDepth! methods to provide write access to the field InSuffixDepth (" __HERE__ ")");
    t.method("InSuffixDepth!", [](ImGuiTestFindByLabelTask* a, int val) -> int { return a->InSuffixDepth = val; });

    DEBUG_MSG("Adding InSuffix methods  to provide read access to the field InSuffix (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:55:29
    // signature to use in the veto list: ImGuiTestFindByLabelTask::InSuffix
    t.method("InSuffix", [](const ImGuiTestFindByLabelTask& a) -> const char * { return a.InSuffix; });
    t.method("InSuffix", [](const ImGuiTestFindByLabelTask* a) -> const char * { return a->InSuffix; });

    DEBUG_MSG("Adding InSuffixLastItem methods  to provide read access to the field InSuffixLastItem (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:56:29
    // signature to use in the veto list: ImGuiTestFindByLabelTask::InSuffixLastItem
    t.method("InSuffixLastItem", [](const ImGuiTestFindByLabelTask& a) -> const char * { return a.InSuffixLastItem; });
    t.method("InSuffixLastItem", [](const ImGuiTestFindByLabelTask* a) -> const char * { return a->InSuffixLastItem; });

    DEBUG_MSG("Adding InSuffixLastItemHash methods  to provide read access to the field InSuffixLastItemHash (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:57:29
    // signature to use in the veto list: ImGuiTestFindByLabelTask::InSuffixLastItemHash
    t.method("InSuffixLastItemHash", [](const ImGuiTestFindByLabelTask& a) -> ImGuiID { return a.InSuffixLastItemHash; });
    t.method("InSuffixLastItemHash", [](ImGuiTestFindByLabelTask& a) -> ImGuiID { return a.InSuffixLastItemHash; });
    t.method("InSuffixLastItemHash", [](const ImGuiTestFindByLabelTask* a) -> ImGuiID { return a->InSuffixLastItemHash; });
    t.method("InSuffixLastItemHash", [](ImGuiTestFindByLabelTask* a) -> ImGuiID { return a->InSuffixLastItemHash; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:57:29
    // signature to use in the veto list: ImGuiTestFindByLabelTask::InSuffixLastItemHash
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding InSuffixLastItemHash! methods to provide write access to the field InSuffixLastItemHash (" __HERE__ ")");
    t.method("InSuffixLastItemHash!", [](ImGuiTestFindByLabelTask& a, ImGuiID val) -> ImGuiID { return a.InSuffixLastItemHash = val; });

    DEBUG_MSG("Adding InSuffixLastItemHash! methods to provide write access to the field InSuffixLastItemHash (" __HERE__ ")");
    t.method("InSuffixLastItemHash!", [](ImGuiTestFindByLabelTask* a, ImGuiID val) -> ImGuiID { return a->InSuffixLastItemHash = val; });

    DEBUG_MSG("Adding InFilterItemStatusFlags methods  to provide read access to the field InFilterItemStatusFlags (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:58:29
    // signature to use in the veto list: ImGuiTestFindByLabelTask::InFilterItemStatusFlags
    t.method("InFilterItemStatusFlags", [](const ImGuiTestFindByLabelTask& a) -> ImGuiItemStatusFlags { return a.InFilterItemStatusFlags; });
    t.method("InFilterItemStatusFlags", [](ImGuiTestFindByLabelTask& a) -> ImGuiItemStatusFlags { return a.InFilterItemStatusFlags; });
    t.method("InFilterItemStatusFlags", [](const ImGuiTestFindByLabelTask* a) -> ImGuiItemStatusFlags { return a->InFilterItemStatusFlags; });
    t.method("InFilterItemStatusFlags", [](ImGuiTestFindByLabelTask* a) -> ImGuiItemStatusFlags { return a->InFilterItemStatusFlags; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:58:29
    // signature to use in the veto list: ImGuiTestFindByLabelTask::InFilterItemStatusFlags
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding InFilterItemStatusFlags! methods to provide write access to the field InFilterItemStatusFlags (" __HERE__ ")");
    t.method("InFilterItemStatusFlags!", [](ImGuiTestFindByLabelTask& a, ImGuiItemStatusFlags val) -> ImGuiItemStatusFlags { return a.InFilterItemStatusFlags = val; });

    DEBUG_MSG("Adding InFilterItemStatusFlags! methods to provide write access to the field InFilterItemStatusFlags (" __HERE__ ")");
    t.method("InFilterItemStatusFlags!", [](ImGuiTestFindByLabelTask* a, ImGuiItemStatusFlags val) -> ImGuiItemStatusFlags { return a->InFilterItemStatusFlags = val; });

    DEBUG_MSG("Adding OutItemId methods  to provide read access to the field OutItemId (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:61:29
    // signature to use in the veto list: ImGuiTestFindByLabelTask::OutItemId
    t.method("OutItemId", [](const ImGuiTestFindByLabelTask& a) -> ImGuiID { return a.OutItemId; });
    t.method("OutItemId", [](ImGuiTestFindByLabelTask& a) -> ImGuiID { return a.OutItemId; });
    t.method("OutItemId", [](const ImGuiTestFindByLabelTask* a) -> ImGuiID { return a->OutItemId; });
    t.method("OutItemId", [](ImGuiTestFindByLabelTask* a) -> ImGuiID { return a->OutItemId; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:61:29
    // signature to use in the veto list: ImGuiTestFindByLabelTask::OutItemId
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding OutItemId! methods to provide write access to the field OutItemId (" __HERE__ ")");
    t.method("OutItemId!", [](ImGuiTestFindByLabelTask& a, ImGuiID val) -> ImGuiID { return a.OutItemId = val; });

    DEBUG_MSG("Adding OutItemId! methods to provide write access to the field OutItemId (" __HERE__ ")");
    t.method("OutItemId!", [](ImGuiTestFindByLabelTask* a, ImGuiID val) -> ImGuiID { return a->OutItemId = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ImGuiTestFindByLabelTask>> type_;
};
std::shared_ptr<Wrapper> newJlImGuiTestFindByLabelTask(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlImGuiTestFindByLabelTask(module));
}
