// this file was auto-generated by wrapit v1.3.3
#include "Wrapper.h"

#include "jlImGuiTestEngine.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {

  template<typename TYPE>
  struct BuildParameterList<ImMovingAverage<TYPE>>
  {
    typedef ParameterList<TYPE> type;
  };

  template<typename TYPE> struct IsMirroredType<ImMovingAverage<TYPE>> : std::false_type { };
  template<typename TYPE> struct DefaultConstructible<ImMovingAverage<TYPE>> : std::false_type { };
}

// Class generating the wrapper for type ImMovingAverage
// signature to use in the veto file: ImMovingAverage
struct JlImMovingAverage: public Wrapper {

  JlImMovingAverage(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ImMovingAverage (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_utils.h:137:8
    jlcxx::TypeWrapper<jlcxx::Parametric<jlcxx::TypeVar<1>>>  t =  jlModule.add_type<jlcxx::Parametric<jlcxx::TypeVar<1>>>("ImMovingAverage");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<jlcxx::Parametric<jlcxx::TypeVar<1>>>>(new jlcxx::TypeWrapper<jlcxx::Parametric<jlcxx::TypeVar<1>>>(jlModule, t));
    t.constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);
    auto t25_decl_methods = [this]<typename TYPE> (jlcxx::TypeWrapper<ImMovingAverage<TYPE>> wrapped){
      auto module_ = this->module_;
      typedef ImMovingAverage<TYPE> WrappedType;
      wrapped.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

      DEBUG_MSG("Adding wrapper for void ImMovingAverage::Init(int) (" __HERE__ ")");
      // signature to use in the veto list: void ImMovingAverage::Init(int)
      // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_utils.h:147:13
      wrapped.method("Init", static_cast<void (WrappedType::*)(int) >(&WrappedType::Init));

      DEBUG_MSG("Adding wrapper for void ImMovingAverage::AddSample(TYPE) (" __HERE__ ")");
      // signature to use in the veto list: void ImMovingAverage::AddSample(TYPE)
      // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_utils.h:148:13
      wrapped.method("AddSample", static_cast<void (WrappedType::*)(TYPE) >(&WrappedType::AddSample));

      DEBUG_MSG("Adding wrapper for TYPE ImMovingAverage::GetAverage() (" __HERE__ ")");
      // signature to use in the veto list: TYPE ImMovingAverage::GetAverage()
      // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_utils.h:149:13
      wrapped.method("GetAverage", static_cast<TYPE (WrappedType::*)()  const>(&WrappedType::GetAverage));

      DEBUG_MSG("Adding wrapper for int ImMovingAverage::GetSampleCount() (" __HERE__ ")");
      // signature to use in the veto list: int ImMovingAverage::GetSampleCount()
      // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_utils.h:150:13
      wrapped.method("GetSampleCount", static_cast<int (WrappedType::*)()  const>(&WrappedType::GetSampleCount));

      DEBUG_MSG("Adding wrapper for bool ImMovingAverage::IsFull() (" __HERE__ ")");
      // signature to use in the veto list: bool ImMovingAverage::IsFull()
      // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_utils.h:151:13
      wrapped.method("IsFull", static_cast<bool (WrappedType::*)()  const>(&WrappedType::IsFull));
    };
    t.apply<ImMovingAverage<double>>(t25_decl_methods);
  }

  void add_methods() const{
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<jlcxx::Parametric<jlcxx::TypeVar<1>>>> type_;
};
std::shared_ptr<Wrapper> newJlImMovingAverage(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlImMovingAverage(module));
}
