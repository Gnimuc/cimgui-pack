// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlImGuiTestEngine.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<ImGuiTestRefDesc> : std::false_type { };
  template<> struct DefaultConstructible<ImGuiTestRefDesc> : std::false_type { };
}

// Class generating the wrapper for type ImGuiTestRefDesc
// signature to use in the veto file: ImGuiTestRefDesc
struct JlImGuiTestRefDesc: public Wrapper {

  JlImGuiTestRefDesc(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ImGuiTestRefDesc (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:88:18
    jlcxx::TypeWrapper<ImGuiTestRefDesc>  t = jlModule.add_type<ImGuiTestRefDesc>("ImGuiTestRefDesc");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ImGuiTestRefDesc>>(new jlcxx::TypeWrapper<ImGuiTestRefDesc>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for const char * ImGuiTestRefDesc::c_str() (" __HERE__ ")");
    // signature to use in the veto list: const char * ImGuiTestRefDesc::c_str()
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:92:17
    t.method("c_str", [](ImGuiTestRefDesc& a) { return (std::string)a.c_str(); });
    t.method("c_str", [](ImGuiTestRefDesc* a) { return (std::string)a->c_str(); });


    DEBUG_MSG("Adding wrapper for void ImGuiTestRefDesc::ImGuiTestRefDesc(const ImGuiTestRef &) (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:93:5
    t.constructor<const ImGuiTestRef &>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void ImGuiTestRefDesc::ImGuiTestRefDesc(const ImGuiTestRef &, const ImGuiTestItemInfo &) (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_context.h:94:5
    t.constructor<const ImGuiTestRef &, const ImGuiTestItemInfo &>(/*finalize=*/jlcxx::finalize_policy::yes);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ImGuiTestRefDesc>> type_;
};
std::shared_ptr<Wrapper> newJlImGuiTestRefDesc(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlImGuiTestRefDesc(module));
}
