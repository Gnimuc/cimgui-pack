// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlImGuiTestEngine.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<ImGuiTestInputs> : std::false_type { };
  template<> struct DefaultConstructible<ImGuiTestInputs> : std::false_type { };
}

// Class generating the wrapper for type ImGuiTestInputs
// signature to use in the veto file: ImGuiTestInputs
struct JlImGuiTestInputs: public Wrapper {

  JlImGuiTestInputs(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ImGuiTestInputs (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:116:8
    jlcxx::TypeWrapper<ImGuiTestInputs>  t = jlModule.add_type<ImGuiTestInputs>("ImGuiTestInputs");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ImGuiTestInputs>>(new jlcxx::TypeWrapper<ImGuiTestInputs>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding MousePosValue methods  to provide read access to the field MousePosValue (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:118:33
    // signature to use in the veto list: ImGuiTestInputs::MousePosValue
    t.method("MousePosValue", [](const ImGuiTestInputs& a) -> const ImVec2& { return a.MousePosValue; });
    t.method("MousePosValue", [](ImGuiTestInputs& a) -> ImVec2& { return a.MousePosValue; });
    t.method("MousePosValue", [](const ImGuiTestInputs* a) -> const ImVec2& { return a->MousePosValue; });
    t.method("MousePosValue", [](ImGuiTestInputs* a) -> ImVec2& { return a->MousePosValue; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:118:33
    // signature to use in the veto list: ImGuiTestInputs::MousePosValue
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding MousePosValue! methods to provide write access to the field MousePosValue (" __HERE__ ")");
    t.method("MousePosValue!", [](ImGuiTestInputs& a, const ImVec2& val) -> ImVec2& { return a.MousePosValue = val; });

    DEBUG_MSG("Adding MousePosValue! methods to provide write access to the field MousePosValue (" __HERE__ ")");
    t.method("MousePosValue!", [](ImGuiTestInputs* a, const ImVec2& val) -> ImVec2& { return a->MousePosValue = val; });

    DEBUG_MSG("Adding MouseWheel methods  to provide read access to the field MouseWheel (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:119:33
    // signature to use in the veto list: ImGuiTestInputs::MouseWheel
    t.method("MouseWheel", [](const ImGuiTestInputs& a) -> const ImVec2& { return a.MouseWheel; });
    t.method("MouseWheel", [](ImGuiTestInputs& a) -> ImVec2& { return a.MouseWheel; });
    t.method("MouseWheel", [](const ImGuiTestInputs* a) -> const ImVec2& { return a->MouseWheel; });
    t.method("MouseWheel", [](ImGuiTestInputs* a) -> ImVec2& { return a->MouseWheel; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:119:33
    // signature to use in the veto list: ImGuiTestInputs::MouseWheel
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding MouseWheel! methods to provide write access to the field MouseWheel (" __HERE__ ")");
    t.method("MouseWheel!", [](ImGuiTestInputs& a, const ImVec2& val) -> ImVec2& { return a.MouseWheel = val; });

    DEBUG_MSG("Adding MouseWheel! methods to provide write access to the field MouseWheel (" __HERE__ ")");
    t.method("MouseWheel!", [](ImGuiTestInputs* a, const ImVec2& val) -> ImVec2& { return a->MouseWheel = val; });

    DEBUG_MSG("Adding MouseHoveredViewport methods  to provide read access to the field MouseHoveredViewport (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:120:33
    // signature to use in the veto list: ImGuiTestInputs::MouseHoveredViewport
    t.method("MouseHoveredViewport", [](const ImGuiTestInputs& a) -> ImGuiID { return a.MouseHoveredViewport; });
    t.method("MouseHoveredViewport", [](ImGuiTestInputs& a) -> ImGuiID { return a.MouseHoveredViewport; });
    t.method("MouseHoveredViewport", [](const ImGuiTestInputs* a) -> ImGuiID { return a->MouseHoveredViewport; });
    t.method("MouseHoveredViewport", [](ImGuiTestInputs* a) -> ImGuiID { return a->MouseHoveredViewport; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:120:33
    // signature to use in the veto list: ImGuiTestInputs::MouseHoveredViewport
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding MouseHoveredViewport! methods to provide write access to the field MouseHoveredViewport (" __HERE__ ")");
    t.method("MouseHoveredViewport!", [](ImGuiTestInputs& a, ImGuiID val) -> ImGuiID { return a.MouseHoveredViewport = val; });

    DEBUG_MSG("Adding MouseHoveredViewport! methods to provide write access to the field MouseHoveredViewport (" __HERE__ ")");
    t.method("MouseHoveredViewport!", [](ImGuiTestInputs* a, ImGuiID val) -> ImGuiID { return a->MouseHoveredViewport = val; });

    DEBUG_MSG("Adding MouseButtonsValue methods  to provide read access to the field MouseButtonsValue (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:121:33
    // signature to use in the veto list: ImGuiTestInputs::MouseButtonsValue
    t.method("MouseButtonsValue", [](const ImGuiTestInputs& a) -> int { return a.MouseButtonsValue; });
    t.method("MouseButtonsValue", [](ImGuiTestInputs& a) -> int { return a.MouseButtonsValue; });
    t.method("MouseButtonsValue", [](const ImGuiTestInputs* a) -> int { return a->MouseButtonsValue; });
    t.method("MouseButtonsValue", [](ImGuiTestInputs* a) -> int { return a->MouseButtonsValue; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:121:33
    // signature to use in the veto list: ImGuiTestInputs::MouseButtonsValue
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding MouseButtonsValue! methods to provide write access to the field MouseButtonsValue (" __HERE__ ")");
    t.method("MouseButtonsValue!", [](ImGuiTestInputs& a, int val) -> int { return a.MouseButtonsValue = val; });

    DEBUG_MSG("Adding MouseButtonsValue! methods to provide write access to the field MouseButtonsValue (" __HERE__ ")");
    t.method("MouseButtonsValue!", [](ImGuiTestInputs* a, int val) -> int { return a->MouseButtonsValue = val; });

    DEBUG_MSG("Adding HostEscDown methods  to provide read access to the field HostEscDown (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:123:33
    // signature to use in the veto list: ImGuiTestInputs::HostEscDown
    t.method("HostEscDown", [](const ImGuiTestInputs& a) -> bool { return a.HostEscDown; });
    t.method("HostEscDown", [](ImGuiTestInputs& a) -> bool { return a.HostEscDown; });
    t.method("HostEscDown", [](const ImGuiTestInputs* a) -> bool { return a->HostEscDown; });
    t.method("HostEscDown", [](ImGuiTestInputs* a) -> bool { return a->HostEscDown; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:123:33
    // signature to use in the veto list: ImGuiTestInputs::HostEscDown
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding HostEscDown! methods to provide write access to the field HostEscDown (" __HERE__ ")");
    t.method("HostEscDown!", [](ImGuiTestInputs& a, bool val) -> bool { return a.HostEscDown = val; });

    DEBUG_MSG("Adding HostEscDown! methods to provide write access to the field HostEscDown (" __HERE__ ")");
    t.method("HostEscDown!", [](ImGuiTestInputs* a, bool val) -> bool { return a->HostEscDown = val; });

    DEBUG_MSG("Adding HostEscDownDuration methods  to provide read access to the field HostEscDownDuration (" __HERE__ ")");
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:124:33
    // signature to use in the veto list: ImGuiTestInputs::HostEscDownDuration
    t.method("HostEscDownDuration", [](const ImGuiTestInputs& a) -> float { return a.HostEscDownDuration; });
    t.method("HostEscDownDuration", [](ImGuiTestInputs& a) -> float { return a.HostEscDownDuration; });
    t.method("HostEscDownDuration", [](const ImGuiTestInputs* a) -> float { return a->HostEscDownDuration; });
    t.method("HostEscDownDuration", [](ImGuiTestInputs* a) -> float { return a->HostEscDownDuration; });
    // defined in ./imgui_test_engine/imgui_test_engine/imgui_te_internal.h:124:33
    // signature to use in the veto list: ImGuiTestInputs::HostEscDownDuration
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding HostEscDownDuration! methods to provide write access to the field HostEscDownDuration (" __HERE__ ")");
    t.method("HostEscDownDuration!", [](ImGuiTestInputs& a, float val) -> float { return a.HostEscDownDuration = val; });

    DEBUG_MSG("Adding HostEscDownDuration! methods to provide write access to the field HostEscDownDuration (" __HERE__ ")");
    t.method("HostEscDownDuration!", [](ImGuiTestInputs* a, float val) -> float { return a->HostEscDownDuration = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ImGuiTestInputs>> type_;
};
std::shared_ptr<Wrapper> newJlImGuiTestInputs(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlImGuiTestInputs(module));
}
